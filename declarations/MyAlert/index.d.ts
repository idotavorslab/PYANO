/// <reference types="./node_modules/sweetalert2" />
import Swal, { SweetAlertOptions } from 'sweetalert2';
declare const _default: {
    fire<T>(title?: string, html?: string, icon?: import("sweetalert2").SweetAlertIcon): Promise<import("sweetalert2").SweetAlertResult<T extends Promise<infer U> ? U : T>>;
    fire<T_1>(options: SweetAlertOptions<T_1, any>): Promise<import("sweetalert2").SweetAlertResult<T_1 extends Promise<infer U> ? U : T_1>>;
    mixin(options: SweetAlertOptions<any, any>): typeof Swal;
    isVisible(): boolean;
    update(options: Pick<SweetAlertOptions<any, any>, import("sweetalert2").SweetAlertUpdatableParameters>): void;
    close(result?: import("sweetalert2").SweetAlertResult<any>): void;
    getPopup(): HTMLElement;
    getTitle(): HTMLElement;
    getHeader(): HTMLElement;
    getProgressSteps(): HTMLElement;
    getContent(): HTMLElement;
    getHtmlContainer(): HTMLElement;
    getImage(): HTMLElement;
    getCloseButton(): HTMLElement;
    getIcon(): HTMLElement;
    getIcons(): readonly HTMLElement[];
    getConfirmButton(): HTMLElement;
    getCancelButton(): HTMLElement;
    getActions(): HTMLElement;
    getFooter(): HTMLElement;
    getTimerProgressBar(): HTMLElement;
    getFocusableElements(): readonly HTMLElement[];
    enableButtons(): void;
    disableButtons(): void;
    showLoading(): void;
    hideLoading(): void;
    isLoading(): boolean;
    clickConfirm(): void;
    clickCancel(): void;
    showValidationMessage(validationMessage: string): void;
    resetValidationMessage(): void;
    getInput(): HTMLInputElement;
    disableInput(): void;
    enableInput(): void;
    getValidationMessage(): HTMLElement;
    getTimerLeft(): number;
    stopTimer(): number;
    resumeTimer(): number;
    toggleTimer(): number;
    isTimerRunning(): boolean;
    increaseTimer(n: number): number;
    queue<T_2>(steps: readonly (string | SweetAlertOptions<any, any>)[]): Promise<T_2>;
    getQueueStep(): string;
    insertQueueStep(step: SweetAlertOptions<any, any>, index?: number): number;
    deleteQueueStep(index: number): void;
    isValidParameter(paramName: string): paramName is "text" | "footer" | "html" | "input" | "title" | "padding" | "width" | "animation" | "background" | "position" | "allowEscapeKey" | "allowOutsideClick" | "buttonsStyling" | "cancelButtonAriaLabel" | "cancelButtonColor" | "cancelButtonText" | "confirmButtonAriaLabel" | "confirmButtonColor" | "confirmButtonText" | "currentProgressStep" | "customClass" | "hideClass" | "icon" | "imageAlt" | "imageHeight" | "imageUrl" | "imageWidth" | "onAfterClose" | "onClose" | "onDestroy" | "progressSteps" | "reverseButtons" | "showCancelButton" | "showConfirmButton" | "titleText" | "iconHtml" | "backdrop" | "toast" | "target" | "grow" | "showClass" | "timer" | "timerProgressBar" | "heightAuto" | "allowEnterKey" | "stopKeydownPropagation" | "keydownListenerCapture" | "focusConfirm" | "focusCancel" | "showCloseButton" | "closeButtonHtml" | "closeButtonAriaLabel" | "showLoaderOnConfirm" | "preConfirm" | "inputPlaceholder" | "inputValue" | "inputOptions" | "inputAutoTrim" | "inputAttributes" | "inputValidator" | "validationMessage" | "progressStepsDistance" | "onBeforeOpen" | "onOpen" | "onRender" | "scrollbarPadding";
    isUpdatableParameter(paramName: string): paramName is import("sweetalert2").SweetAlertUpdatableParameters;
    argsToParams<T_3>(params: import("sweetalert2").SweetAlertArrayOptions | readonly [SweetAlertOptions<T_3, any>]): SweetAlertOptions<T_3, any>;
    DismissReason: typeof Swal.DismissReason;
    version: string;
    small: {
        _question(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        _info(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        _success(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        _error(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        _warning(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        error(title: any, text: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        info(title: any, text?: any, showConfirmBtns?: boolean): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        success(title: any, text?: any, timer?: number): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        warning(title: any, text?: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
    };
    big: {
        error(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        warning(options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        blocking(options: any, moreOptions: any): Promise<unknown>;
        oneButton(title: any, options: any): Promise<import("sweetalert2").SweetAlertResult<unknown>>;
        twoButtons(options: any): Promise<"confirm" | "second">;
        threeButtons(options: any): Promise<any>;
    };
};
export default _default;
//# sourceMappingURL=index.d.ts.map