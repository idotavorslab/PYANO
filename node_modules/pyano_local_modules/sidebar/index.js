// **sidebar/index.js
const $ = require("jquery");
let { enumerate, str, span } = require("pyano_local_modules/util");
const Pages = require("pyano_local_modules/pages/pages");
let { $Sidebar, $Title } = require("pyano_local_modules/document");

function selectSidebarItem(targetId, { changeTitle }) {
	let html;
	for (let sidebarItem of $Sidebar.children()) {
		if (sidebarItem.id == targetId) {
			html = sidebarItem.innerHTML;
			$(sidebarItem).addClass("sidebar-item-selected");
		} else {
			$(sidebarItem).removeClass("sidebar-item-selected");
		}
	}
	if (changeTitle) {
		$Title.fadeTo(100, 0.1, () => {
			$Title.html(html.title()).fadeTo(100, 1);
		});
	}


}

function build() {
	let sidebarItems = [];
	let sidebarDict = {
		new_test: "New Test",
		record: 'Record',
		video_tools: 'Video Tools',
		settings: "Settings",
		inside_test: "",
	};
	for (let [i, [eid, human]] of enumerate(Object.entries(sidebarDict))) {

		let gridRow = str(i + 1);
		let id = `sidebar_${eid}`;
		sidebarItems.push($(span(human))
			.addClass(`sidebar-item`)
			.attr("id", id)
			.css({ gridRow: `${gridRow}/${gridRow}` })
			.click(() => Pages.toPage(eid, true))
		);


	}

	$Sidebar
		.append(sidebarItems);
}


function to_inside_test() { selectSidebarItem('sidebar_inside_test', { changeTitle: false }); }

function to_video_tools() { selectSidebarItem('sidebar_video_tools', { changeTitle: true }); }

function to_settings() { selectSidebarItem('sidebar_settings', { changeTitle: true }); }

function to_new_test() { selectSidebarItem('sidebar_new_test', { changeTitle: true }); }

function to_record() { selectSidebarItem('sidebar_record', { changeTitle: true }); }

module.exports = { build, to_record, to_new_test, to_video_tools, to_settings, to_inside_test };

