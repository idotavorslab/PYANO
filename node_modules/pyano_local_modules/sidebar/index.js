// **sidebar/index.js
const $ = require("jquery");
let { span } = require("pyano_local_modules/util");
const Pages = require("pyano_local_modules/pages/pages");
let { $Sidebar, $Title } = require("pyano_local_modules/document");

/**@typedef {'sidebar_inside_test' | 'sidebar_file_tools' | 'sidebar_settings' | 'sidebar_new_test' | 'sidebar_exam' | 'sidebar_record'} TSidebarId*/

/**@param {TSidebarId} targetId
 * @param {boolean} changeTitle*/
function _selectSidebarItem(targetId, { changeTitle }) {
	let html;
	for (let sidebarItem of $Sidebar.children()) {
		if (sidebarItem.id == targetId) {
			html = sidebarItem.innerHTML;
			$(sidebarItem).addClass("sidebar-item-selected");
		} else {
			$(sidebarItem).removeClass("sidebar-item-selected");
		}
	}
	if (changeTitle)
		$Title.html(html.title());


}

function build() {
	const $sidebarItems = [];
	const sidebarDict = {
		new_test: "New Test",
		exam: 'Exam',
		record: 'Record',
		file_tools: 'File Tools',
		settings: "Settings",
		inside_test: "Start Test",
	};
	for (let [i, [eid, human]] of enumerate(Object.entries(sidebarDict))) {

		const gridRow = str(i + 1);
		const id = `sidebar_${eid}`;
		$sidebarItems.push($(span(human))
			.addClass(`sidebar-item`)
			.attr("id", id)
			.css({ gridRow: `${gridRow}/${gridRow}` })
			.click(() => Pages.toPage(eid, true))
		);


	}

	$Sidebar
		.append($sidebarItems);
}


function to_inside_test() { _selectSidebarItem('sidebar_inside_test', { changeTitle: false }); }

function to_file_tools() { _selectSidebarItem('sidebar_file_tools', { changeTitle: true }); }

function to_settings() { _selectSidebarItem('sidebar_settings', { changeTitle: true }); }

function to_new_test() { _selectSidebarItem('sidebar_new_test', { changeTitle: true }); }

function to_exam() { _selectSidebarItem('sidebar_exam', { changeTitle: true }); }

function to_record() { _selectSidebarItem('sidebar_record', { changeTitle: true }); }

module.exports = { build, to_exam, to_record, to_new_test, to_file_tools, to_settings, to_inside_test };

