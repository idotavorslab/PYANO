class Messages {
	/**@param {TMessage[]} msgs*/
	constructor(msgs) {
		/**@type {TMessage[]}*/
		this._msgs = msgs;
	}

	/**@return {Object<number,number[]>}*/
	chords() {
		let chords = {};
		for (let [i, message] of enumerate(this._msgs)) {
			if (message.time_delta == null) continue;
			if (message.time_delta <= 0.05) {
				if (!bool(chords)) {
					chords[i - 1] = [i];
					continue;
				}
				let last_key = chords.keys().last();
				/**@type {number[]}*/
				let last_value = chords[last_key];

				if (last_key == i - 1 || last_value.includes(i - 1))
					chords[last_key].push(i);
				else
					chords[i - 1] = [i];

			}
		}
		return chords;
	}

	_numofChordedNotes(upTo) {
		let numofChordedNotes = 0;
		let chords = this.chords();
		let roots = chords.keys();
		for (let root of roots) {
			if (root <= upTo) // yes lower equal
				numofChordedNotes += chords[root].length;
			else
				break; // OrderedDict;
		}
		return numofChordedNotes;
	}

	time_deltas(numOfNotes) {
		/*const numofChordedNotes = this._numofChordedNotes(numOfNotes);
		const end = numOfNotes + 1 + numofChordedNotes;
		console.log(`\t\tMessages.time_deltas numofChordedNotes: `, numofChordedNotes, 'end: ', end);
		*/
		// const numofChordedNotes = this._numofChordedNotes(numOfNotes);
		const end = numOfNotes + 1;
		console.log(`\t\tMessages.time_deltas, numOfNotes: `, numOfNotes, 'end: ', end);
		let time_deltas = this._msgs.slice(0, end).map(msg => msg.time_delta);
		if (numOfNotes >= this._msgs.length) {
			// if user specified as much notes as in txt file, add a fake "last note" lasting 1 second
			// this is to prevent cropping of last note (compensate for lack of "time_delta")
			time_deltas.push(1);
		} else {
			// user specified some notes, not all of them
			// shorten last note a bit so the beginning of the last one won't be heard
			// time_deltas[time_deltas.length - 1] -= 0.1; // same as audio fadeout dur
			time_deltas[time_deltas.length - 1] -= 0.15; // same as audio fadeout dur
		}
		return time_deltas;
	}
}

module.exports = Messages;
