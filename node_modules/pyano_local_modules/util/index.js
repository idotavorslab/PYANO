let { Path, EStore } = require("pyano_local_modules/ext_libs");
const color = require("./Color");
const Log = require("./Log");
const { Alert } = require("./Alert");
let Messages = require("./Message");

const fs = require("fs");

function num2eng(num, letters = false) {
	switch (int(num)) {
		case 1:
			return letters
			       ? "first"
			       : "1st";
		case 2:
			return letters
			       ? "second"
			       : "2nd";
		case 3:
			return letters
			       ? "third"
			       : "3rd";
		case 4:
			return letters
			       ? "fourth"
			       : "4th";
		case 5:
			return letters
			       ? "fifth"
			       : "5th";
		case 6:
			return letters
			       ? "sixth"
			       : "6th";
		case 7:
			return letters
			       ? "seventh"
			       : "7th";
		case 8:
			return letters
			       ? "eighth"
			       : "8th";
		case 9:
			return letters
			       ? "ninth"
			       : "9th";

		default:
			return `${num}th`;
	}
}

/**@param {String} s*/
function underscore2space(s) {
	return s.replaceAll('_', ' ');
	// if (!s.includes('_'))
	// 	return s;
	// else
	// 	return underscore2space(s.replace('_', ' '));

}

function date2datetime(date) {
	let d = date.getUTCDate();
	d = d < 10
	    ? `0${d}`
	    : d;
	let m = date.getMonth() + 1;
	m = m < 10
	    ? `0${m}`
	    : m;
	const y = date.getFullYear();
	const t = date.toTimeString().slice(0, 8).replaceAll(':', '-');
	return `${d}_${m}_${y}_${t}`;
}

function bool(val) {
	// If empty (no keys), allow only if function. Disallow empty containers.
	return (val instanceof Object)
	       ? val.isEmpty()
	         ? typeof val == 'function'
	         : true
	       : !!val;
}

function sum(arr) {
	let sum = 0;
	let dirty = false;
	for (let v of arr) {
		let number = float(v);
		if (!isNaN(number)) {
			dirty = true;
			sum += number;
		}

	}
	return !dirty
	       ? null
	       : sum;
}

const str = (val) => val
                     ? val.toString()
                     : "";

function enumerate(collection) {
	let entries = Object.entries(collection);
	entries.map(entry => entry[0] = entry[0].isdigit()
	                                ? int(entry[0])
	                                : entry[0]);
	return entries;
}


/**
 @param {String|Number} num
 @return {Number}
 */
const int = (num) => Math.floor(num);
const float = (str) => parseFloat(str);
const max = (...values) => Math.max(...values);
const min = (...values) => Math.min(...values);

function round(n, d = 0) {
	let fr = 10 ** d;
	return Math.floor(n * fr) / fr;
}

function* range(start, stop) {
	for (let i = start; i <= stop; i++)
		yield i;

}

function* zip(arr1, arr2) {
	for (let key in arr1)
		yield [arr1[key], arr2[key]];
}

const span = (s, cls = null) => cls
                                ? `<span class="${cls}">${s}</span>`
                                : `<span>${s}</span>`;
const strong = (s) => `<strong>${s}</strong>`;

async function wait(ms) {
	if (EStore.get('dev')) ms /= 5;
	if (ms <= 0)
		throw new Error(`ms is ${ms}, has to be greater than 0`);
	return new Promise(resolve => setTimeout(resolve, ms));
}

/**@param jQuery
 @param {Number} ms*/
function $fadeOut(jQuery, ms) {
	// if (EStore.get('dev')) ms /= 5;
	return new Promise(resolve => jQuery.fadeTo(ms, 0, resolve));
}

/**@param jQuery
 @param {Number} ms*/
function $fadeIn(jQuery, ms) {
	// if (EStore.get('dev')) ms /= 5;

	return new Promise(resolve => jQuery.fadeTo(ms, 1, resolve));

}

/**@param {Number} ms
 @param {...} jQueries*/
async function $fadeInMany(ms, ...jQueries) {
	let promises = [];
	for (let jQ of jQueries)
		promises.push($fadeIn(jQ, ms));

	return await Promise.all(promises);
}

/**@param {Number} ms
 @param {...} jQueries*/
async function $fadeOutMany(ms, ...jQueries) {
	let promises = [];
	for (let jQ of jQueries)
		promises.push($fadeOut(jQ, ms));

	return await Promise.all(promises);
}

async function concurrent(...fns) {
	return await Promise.all(fns);
}

async function waterfall(...fns) {
	for (let fn of fns)
		await fn();
}

function reloadPage() {
	let { remote } = require("electron");
	const currentWindow = remote.getCurrentWindow();
	currentWindow.reload();
}

function mkdir(path, options) {
	return new Promise(resolve =>
		fs.mkdir(path, options, err => resolve(!bool(err))));
}

function path_exists(path) {
	return new Promise(resolve =>
		fs.access(path, fs.constants.F_OK, err => resolve(!bool(err))));
}

/**@param {String} filePath
 @param {String} ext
 @return {String}*/
function replace_to_ext(filePath, ext) {
	if (ext.includes('.'))
		throw new Error(`ext included dot ".", ext: ${ext}`);
	return `${remove_ext(filePath)}.${ext}`;
}

function remove_ext(filePath) {
	return Path.join(Path.dirname(filePath), Path.basename(filePath, Path.extname(filePath)));
}

module.exports = {
	$fadeIn,
	$fadeInMany,
	$fadeOut,
	$fadeOutMany,
	Alert,
	bool,
	color,
	concurrent,
	date2datetime,
	enumerate,
	float,
	int,
	Log,
	max,
	Messages,
	min,
	mkdir,
	num2eng,
	path_exists,
	range,
	reloadPage,
	remove_ext,
	replace_to_ext,
	round,
	span,
	str,
	strong,
	sum,
	underscore2space,
	wait,
	waterfall,
	zip,
};
