// **pages/NewTest/StoreFns.js
let { EStore } = require("pyano_local_modules/ext_libs");
let Gui = require("./Gui");
let LevelsPart = () => require("./Parts/parts").LevelsPart;

let { remote } = require("electron");
const fs = require("fs");

/**@param {String[]} list
 @param {boolean} nullifyCurrentIfNotInList
 @return Boolean*/
function setSubjects(list, { nullifyCurrentIfNotInList }) {
	let exists = false;
	EStore.set('subjects', list);
	if (nullifyCurrentIfNotInList) {
		// If passed list doesn't include "current_subject", set "current_subject" to null

		if (!list.includes(EStore.subjectName())) {
			exists = false;
			setCurrentSubject(null, { updateSubjects: false });
			return exists;
		}
	}
	exists = true;
	return exists;
}


function setCurrentSubject(subject, { updateSubjects }) {
	console.log(...small(`NewTest.StoreFns.setCurrentSubject(${subject})`));
	EStore.set('current_test.current_subject', subject);
	if (updateSubjects) {
		EStore.update('subjects', subject);
	}
}

function saveToCurrentTest() {

	let levelsDicts = LevelsPart().getLevelsArr().toDicts();
	EStore.set("current_test.levels", levelsDicts);
	Alert.small.success(`Saved ${levelsDicts.length} levels to config file.`);


}

function saveTestAs() {
	console.log(...small(`NewTest.StoreFns.saveTestAs()`));
	const rootAbsPath = EStore.get('root_abs_path');
	const currentWindow = remote.getCurrentWindow();
	const dialogOptions = {
		defaultPath: rootAbsPath,
		filters: [{ name: "JSON", extensions: ['json'] }],
		title: "Save current test to file..."
	};
	remote.dialog.showSaveDialog(currentWindow, dialogOptions, (filename, bookmark) => {
		console.log({ filename, bookmark });
		const fs = require("fs");
		try {
			fs.writeFileSync(filename, JSON.stringify(EStore.get('current_test')));
			Alert.small.success("Saved file successfully", filename);
		} catch (e) {
			Alert.small.error('Failed to save the file!', filename);
		}

	});
}

function loadNewTestConfig() {
	console.log(...small(`NewTest.StoreFns.loadNewTestConfig()`));
	const rootAbsPath = EStore.get('root_abs_path');
	const currentWindow = remote.getCurrentWindow();
	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: rootAbsPath,
		filters: [{ name: 'JSON', extensions: ['json'] }],
		title: "Load test config file..."
	};
	remote.dialog.showOpenDialog(currentWindow, dialogOptions, async files => {
		console.log({ files });
		if (!bool(files))
			return Alert.small.warning("No files chosen", "Nothing changed.");

		const filename = files[0];
		try {
			// noinspection JSCheckFunctionSignatures
			let data = JSON.parse(await fs.readFileSync(filename));
			EStore.set('current_test', data);

			Gui.setTruthFileSubtitle(fsx.basename(data.truth_file_path), EStore.truthFileTotalNotes());
			Gui.setCurrentSubjectSubtitle(data.current_subject);
			Alert.small.success("Saved file successfully!");
		} catch (e) {
			Alert.small.error('Failed to save the file', filename);
		}


	});

}

/**@param {string} file*/
function setNewTruth(file) {
	console.log(...small(`NewTest.StoreFns.setNewTruth(${file})`));
	const truthsDirPath = EStore.truthsDirPath();
	if (fsx.dirname(file) != truthsDirPath)
		return Alert.small.warning(`File "${fsx.basename(file)}" isn't in truths dir`, `Place it here: ${truthsDirPath}`);
	let truth;
	try {
		truth = new Truth(fsx.remove_ext(file));
	} catch (err) {
		console.error(err);
		return Alert.small.error('Failed setting truth file', err.message);
	}
	EStore.setTruthFilePath(truth)
	      .then(truth => {

		      console.log(`\tSet new truth file path: ${truth.name}`);
		      Alert.small.success("Set new truth file", truth.name);
		      Gui.setTruthFileSubtitle(truth, truth.numOfNotes());
		      LevelsPart().toMode(EStore.currentTest().learning_type);
	      })
	      .catch(err => {
		      console.warn(err);
		      return Alert.small.error('Failed setting truth file', err.message);
	      });

}

function browseAndSetNewTruth() {


	const currentWindow = remote.getCurrentWindow();

	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: EStore.truthsDirPath(),
		filters: [{ name: 'Text', extensions: ['txt'] }],
		title: "Load truth file..."
	};
	remote.dialog.showOpenDialog(currentWindow, dialogOptions, files => {
		console.log({ files });
		if (!bool(files))
			return Alert.small.warning("No files chosen", "Nothing changed.");

		setNewTruth(files[0]);
	});
}

module.exports = {
	setSubjects,
	setCurrentSubject,
	saveToCurrentTest,
	saveTestAs,
	loadNewTestConfig,
	browseAndSetNewTruth,
	setNewTruth
};
