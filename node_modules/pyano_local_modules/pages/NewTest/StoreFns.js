let { EStore } = require("pyano_local_modules/ext_libs");
let Gui = require("./Gui");
let LevelsPart = () => require("./Parts/parts").LevelsPart;

let { remote } = require("electron");
const fs = require("fs");
const configsPath = () => require('path').join(EStore.get('root_abs_path'), 'experiments', 'configs');

function saveAsCurrentTest() {

	const levels = LevelsPart().getLevelsArr().toTLevels();
	EStore.set("current_test.levels", levels);
	return Alert.small.success(`Saved ${levels.length} levels to config file.`);


}

function saveConfigAs() {
	console.log(...small(`NewTest.StoreFns.saveConfigAs()`));
	const dialogOptions = {
		defaultPath: configsPath(),
		filters: [{ name: "JSON", extensions: ['json'] }],
		title: "Save current test to file..."
	};
	remote.dialog.showSaveDialog(getCurrentWindow(), dialogOptions, (filename, bookmark) => {
		console.log({ filename, bookmark });
		if (filename === undefined)
			return Alert.small.warning("Aborting", "Nothing changed.");
		const fs = require("fs");
		try {
			fs.writeFileSync(filename, JSON.stringify(EStore.get('current_test')));
			Alert.small.success("Saved file successfully", filename);
		} catch (e) {
			Alert.small.error(`Failed to save "${fsx.basename(filename)}"!`, e.message);
		}

	});
}

function loadConfig() {
	console.log(...small(`NewTest.StoreFns.loadConfig()`));

	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: configsPath(),
		filters: [{ name: 'JSON', extensions: ['json'] }],
		title: "Load test config file..."
	};
	remote.dialog.showOpenDialog(getCurrentWindow(), dialogOptions, async files => {
		console.log({ files });
		if (!bool(files))
			return Alert.small.warning("No files chosen", "Nothing changed.");

		const filename = files[0];
		try {
			// noinspection JSCheckFunctionSignatures
			let data = JSON.parse(await fs.readFileSync(filename));
			// TODO: validate data
			const config = EStore.config();
			for (let [key, value] in data.items()) {
				config[key] = value;
			}

			Gui.setCurrentSubjectSubtitle(data.current_subject);
			// TODO: setTruthFileSubtitle(EStore.truth())

			Gui.setTruthFileSubtitle(config.truth());
			// await Alert.small._success({
			// 	title: "Loaded config successfully!",
			// 	confirmButtonText: "Display new config",
			// 	showConfirmButton: true,
			//
			// });
			return reloadPage();
		} catch (e) {
			Alert.small.error('Failed to load config', filename);
		}


	});

}

/**@param {string} file*/
function setNewTruth(file) {
	console.log(...small(`NewTest.StoreFns.setNewTruth(${file})`));
	const truthsDirPath = EStore.truthsDirPath();
	if (fsx.dirname(file).lower() != truthsDirPath.lower())
		return Alert.small.warning(`File "${fsx.basename(file)}" isn't in truths dir`, `Place it here: ${truthsDirPath}`);
	let truth;
	try {
		truth = new Truth(fsx.remove_ext(file));
	} catch (err) {
		console.error(err);
		return Alert.small.error('Failed setting truth file', err.message);
	}
	try {
		EStore.config().truth_file_path = truth;
		console.log(`\tSet new truth file path: ${truth.name}`);
		Alert.small.success("Set new truth file", truth.name);
		Gui.setTruthFileSubtitle(truth);
	} catch (err) {
		console.warn(err);
		return Alert.small.error('Failed setting truth file', err.message);
	}

	/*EStore.config().setTruthFilePath(truth)
	      .then(truth => {

		      console.log(`\tSet new truth file path: ${truth.name}`);
		      Alert.small.success("Set new truth file", truth.name);
		      Gui.setTruthFileSubtitle(truth);
		      // LevelsPart().toMode(EStore.currentTest().learning_type);
	      })
	      .catch(err => {
		      console.warn(err);
		      return Alert.small.error('Failed setting truth file', err.message);
	      });
	*/

}

function browseAndSetNewTruth() {


	const currentWindow = remote.getCurrentWindow();

	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: EStore.truthsDirPath(),
		filters: [{ name: 'Text', extensions: ['txt'] }],
		title: "Load truth file..."
	};
	remote.dialog.showOpenDialog(currentWindow, dialogOptions, files => {
		console.log({ files });
		if (!bool(files))
			return Alert.small.warning("No files chosen", "Nothing changed.");

		setNewTruth(files[0]);
	});
}

module.exports = {
	saveAsCurrentTest,
	saveConfigAs,
	loadConfig,
	browseAndSetNewTruth,
	setNewTruth
};
