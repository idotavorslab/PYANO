// **pages/NewTest/StoreFns.js
let { EStore, Path } = require("pyano_local_modules/ext_libs");
let Gui = require("./Gui");
let LevelsPart = () => require("./Parts/parts").LevelsPart;
// let { LevelsPart } = require("./Parts/parts");
let { bool, Log, remove_ext } = require("pyano_local_modules/util");

let { remote } = require("electron");
let { Alert } = require("pyano_local_modules/util/Alert");
const fs = require("fs");

/**@param {String[]} list
 @param {Boolean} nullifyCurrentIfNotInList
 @return Boolean*/
function setSubjects(list, { nullifyCurrentIfNotInList }) {
	let exists = false;
	EStore.set('subjects', list);
	if (nullifyCurrentIfNotInList) {
		// If passed list doesn't include "current_subject", set "current_subject" to null
		if (!list.includes(EStore.get('current_test.current_subject'))) {
			exists = false;
			setCurrentSubject(null, { updateSubjects: false });
			return exists;
		}
	}
	exists = true;
	return exists;
}


function setCurrentSubject(subject, { updateSubjects }) {
	EStore.set('current_test.current_subject', subject);
	if (updateSubjects) {
		EStore.update('subjects', subject);
	}
}

function saveToCurrentTest() {

	let levelsDicts = LevelsPart().getLevelsArr().toDicts();
	EStore.set("current_test.levels", levelsDicts);
	Alert.small.success(`Saved ${levelsDicts.length} levels to config file.`);


}

function saveTestAs() {
	Log.yellow('saveTestAs()');
	const rootAbsPath = EStore.get('root_abs_path');
	const currentWindow = remote.getCurrentWindow();
	const dialogOptions = {
		defaultPath: rootAbsPath,
		filters: [{ name: "JSON", extensions: ['json'] }],
		title: "Save current test to file..."
	};
	remote.dialog.showSaveDialog(currentWindow, dialogOptions, (filename, bookmark) => {
		console.log({ filename, bookmark });
		const fs = require("fs");
		try {
			fs.writeFileSync(filename, JSON.stringify(EStore.get('current_test')));
			Alert.small.success("Saved file successfully", filename);
		} catch (e) {
			Alert.small.error('Failed to save the file!', filename);
		}

	});
}

function loadNewTestConfig() {
	Log.yellow('loadNewTestConfig()');
	const rootAbsPath = EStore.get('root_abs_path');
	const currentWindow = remote.getCurrentWindow();
	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: rootAbsPath,
		filters: [{ name: 'JSON', extensions: ['json'] }],
		title: "Load test config file..."
	};
	remote.dialog.showOpenDialog(currentWindow, dialogOptions, files => {
		console.log({ files });
		if (!bool(files)) {
			Log.yellow("!bool(files). returning");
			Alert.small.warning("No files chosen", "Nothing changed.");
			return;
		}
		const fs = require("fs");
		const filename = files[0];
		try {
			// noinspection JSCheckFunctionSignatures
			let data = JSON.parse(fs.readFileSync(filename));
			EStore.set('current_test', data);

			Gui.setTruthFileSubtitle(Path.basename(data.truth_file_path), EStore.truthFileTotalNotes());
			Gui.setCurrentSubjectSubtitle(data.current_subject);
			Alert.small.success("Saved file successfully!");
		} catch (e) {
			Alert.small.error('Failed to save the file!', filename);

		}


	});

}

function loadNewTruthFile() {
	console.group('loadNewTruthFile()');


	const currentWindow = remote.getCurrentWindow();

	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: EStore.truthsDirPath(),
		filters: [{ name: 'Text', extensions: ['txt'] }],
		title: "Load truth file..."
	};
	remote.dialog.showOpenDialog(currentWindow, dialogOptions, files => {
		console.log({ files });
		if (!bool(files)) {
			console.warn("!bool(files). returning");
			Alert.small.warning("No files chosen", "Nothing changed.");
			console.groupEnd();
			return;
		}
		let newTruthFilePath = Path.relative(EStore.truthsDirPath(), files[0]);
		EStore.setTruthFilePath(remove_ext(newTruthFilePath));
		console.log(`Set new truth file path: ${newTruthFilePath}`);
		Alert.small.success("Set new truth file", newTruthFilePath);
		Gui.setTruthFileSubtitle(Path.basename(newTruthFilePath), EStore.truthFileTotalNotes());
		LevelsPart().toMode(EStore.currentTest().learning_type);
	});
	console.groupEnd();
}

module.exports = {
	setSubjects,
	setCurrentSubject,
	saveToCurrentTest,
	saveTestAs,
	loadNewTestConfig,
	loadNewTruthFile,
};
