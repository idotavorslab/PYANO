// **pages/NewTest/Parts/LevelsPart.js
const _$ = require('jquery');
/**@param elem
 * @param {'button','toggle','select'} type
 * @return {jQuery}*/
const $ = (elem, type = null) => {
	/**@type {jQuery}*/
	let $elem = _$(elem);
	let classes;
	if (type == null)
		return $elem;

	if (type == 'button') {
		classes = {
			off: 'inactive-btn',
			on: 'active-btn'
		};
	} else if (type == 'toggle') {
		classes = {
			off: 'toggle-btn-off',
			on: 'toggle-btn-on'
		};
		$elem.val = () => $elem.hasClass('toggle-btn-on');
	} else if (type == 'select') {

		$elem._val = $elem.val;
		$elem.val = num => {
			let prevVal = $elem._val();
			prevVal = prevVal === null ? null : int(prevVal);
			if (num === undefined)  // GET
				return prevVal;

			// SET
			$elem.prevVal = prevVal;
			$elem._val(num);
			return $elem;

		};
	} else {
		throw new Error(`recevied type: "${type}", can be either button or toggle`);
	}
	if (type != "select") {
		$elem.activate = () => $elem.toggleClass(classes.off, false).toggleClass(classes.on, true);
		$elem.deactivate = () => $elem.toggleClass(classes.off, true).toggleClass(classes.on, false);
		/*** @param {boolean} on
		 * @return {jQuery}*/
		$elem.toggle = (on = null) => {
			if (on == true) {
				return $elem.activate();
			} else if (on == false) {
				return $elem.deactivate();
			} else if (on == null) {
				return $elem.toggleClass(classes.off).toggleClass(classes.on);
			}
		};
	} else { // select
		/**@return {jQuery}*/
		$elem.toggle = () => {
			if (!$elem.prop('disabled'))
				$elem.val(null);
			else
				$elem.val($elem.prevVal);

			$elem[0].toggleAttribute('disabled');
			return $elem.toggleClass('my-select-disabled');
		};
	}
	return $elem;
};


let Gui = require("../Gui");
let { $midVertAlign } = require("pyano_local_modules/util");
let { EStore } = require("pyano_local_modules/ext_libs");

const LevelsPart = (() => {
	/**@class LevelsArray*/
	class LevelsArray {
		constructor() {
			/**@type {$Level[]}*/
			this.levels = [];
		}

		/** @param {number} levelIndex
		 * @return {$Level} */
		get(levelIndex) {
			return this.levels[levelIndex];
		}

		/**@param {$Level} level*/
		push(level) {
			this.levels.push(level);
		}

		/**@return {$Level}*/
		pop(index = -1) {
			if (index == -1)
				return this.levels.pop();
			else
				return this.levels.splice(index, 1)[0];
		}

		get length() {
			return this.levels.length;
		}


		/** [ [3,4] , [7,2] ]
		 @return {number[][]}
		 @private*/
		_notesTrialsValuesList() {

			return this.levels.map(
				level => level.$notesTrialsTuple().map(
					$selector => int($selector.val())
				)
			);
		}

		/**[ {"notes":3, "trials":4} , {"notes":7, "trials":2} ]
		 @return {{notes:number,trials:number}[]}*/
		toDicts() {
			return this.levels.map(level => level.toDict());

		}

		/**@return {boolean}*/
		isEmpty() {return !bool(this._notesTrialsValuesList());}

		/**@return {boolean}*/
		hasNoZeroes() {
			if (this.isEmpty())
				return false;
			return this._notesTrialsValuesList()
			           .every(pair => pair
				           .every(value => bool(int(value))));
		}

	}

	/**@class $Level*/
	class $Level {
		/**@param {number} row
		 @param {number} levelIndex
		 @param {number} right*/
		constructor(row, levelIndex, right = 0) {
			this.gridRow = `${row}/${row}`;
			let baseGridColumn = 5 + 5 * right;
			const prevLevel = levelsArr.get(levelIndex - 1);
			this.$i = this._$constructI(baseGridColumn, levelIndex);

			this.$notesSelect = this._$constructNotesSelect(baseGridColumn, prevLevel);


			this.$rhythmSwitch = this._$constructRhythmSwitch(baseGridColumn, prevLevel);


			this.$tempoSelect = this._$constructTempoSelect(baseGridColumn, prevLevel);

			this.$trialsSelect = this._$constructTrialsSelect(baseGridColumn);


			this.$trialsSelect.add(this.$notesSelect).change(() => {
				const noZeroes = levelsArr.hasNoZeroes();
				Gui.toggleButtons(noZeroes);

			});

		}

		/**@param {number} baseGridColumn
		 * @param {number} levelIndex
		 * @return {jQuery}
		 * @private*/
		_$constructI(baseGridColumn, levelIndex) {
			return $midVertAlign(levelIndex + 1)
				.css({
					textAlign: 'center',
					gridColumn: `${baseGridColumn}/${baseGridColumn}`,
					gridRow: this.gridRow
				});
		}

		/**@param {number} baseGridColumn
		 * @param {$Level} prevLevel
		 * @return {jQuery}
		 * @private*/
		_$constructNotesSelect(baseGridColumn, prevLevel) {
			let _$notesSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 1}/${baseGridColumn + 1}`,
					gridRow: this.gridRow
				});

			for (let i of range(0, EStore.truth().numOfNotes()))
				_$notesSelect.append(`<option value="${i}">${i}`);

			if (prevLevel)
				_$notesSelect.val(int(prevLevel.$notesSelect.val()));

			return _$notesSelect;
		}

		/**@param {number} baseGridColumn
		 * @param {$Level} prevLevel
		 * @return {jQuery}
		 * @private*/
		_$constructRhythmSwitch(baseGridColumn, prevLevel) {
			let prevWasOn = false;
			if (prevLevel)
				prevWasOn = prevLevel.$rhythmSwitch.val();

			return $(`<button class="my-btn toggle-btn-${prevWasOn ? 'on' : 'off'}">`, "toggle")
				.css({
					gridColumn: `${baseGridColumn + 2}/${baseGridColumn + 2}`,
					gridRow: this.gridRow
				})
				.click(() => {
					this.$rhythmSwitch.toggle();
					this.$tempoSelect.toggle();
				});
		}

		/**@param {number} baseGridColumn
		 * @param {$Level} prevLevel
		 * @return {jQuery}
		 * @private*/
		_$constructTempoSelect(baseGridColumn, prevLevel) {
			let prevWasDisabled = true;
			if (prevLevel)
				prevWasDisabled = !prevLevel.$tempoSelect.val();

			let _$tempoSelect = $('<select class="my-select">', "select")
				.prop('disabled', prevWasDisabled)
				.toggleClass('my-select-disabled', prevWasDisabled)
				.css({
					gridColumn: `${baseGridColumn + 3}/${baseGridColumn + 3}`,
					gridRow: this.gridRow
				});

			for (let i of range(5, 15))
				_$tempoSelect.append(`<option value="${i * 10}">${i * 10}%`);

			_$tempoSelect.val(prevWasDisabled ? null : prevLevel.$tempoSelect.val());
			return _$tempoSelect;
		}

		/**@param {number} baseGridColumn
		 * @return {jQuery}
		 * @private*/
		_$constructTrialsSelect(baseGridColumn) {
			const _$trialsSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 4}/${baseGridColumn + 4}`,
					gridRow: this.gridRow
				});
			for (let i of range(0, 15))
				_$trialsSelect.append(`<option value="${i}">${i}`);
			return _$trialsSelect;
		}


		/**@return {jQuery[]}*/
		$elements() {
			return [this.$i, this.$notesSelect,
			        this.$rhythmSwitch,
			        this.$tempoSelect, this.$trialsSelect];
		}

		/**@return {jQuery[]}*/
		$notesTrialsTuple() {
			return [this.$notesSelect, this.$trialsSelect];
		}


		/**@return {{notes:number,trials:number}}*/
		toDict() {
			return {
				notes: int(this.$notesSelect.val()),
				trials: int(this.$trialsSelect.val()),
				rhythm: this.$rhythmSwitch.val(),
				tempo: this.$tempoSelect.val() ? int(this.$tempoSelect.val()) : null,
			};
		}
	}

	let levelsArr = new LevelsArray();
	let $Div = $('<div id="levels_div">');

	let $addLevelBtn = $('<button id="levels_add_level_btn">', "button")
		.addClass('my-btn active-btn')
		.html('Add Level')
		.click(_addLevel);

	let $removeLevelBtn = $('<button id="levels_remove_level_btn">', "button")
		.addClass('my-btn inactive-btn')
		.html('Remove Level')
		.click(_removeLevel);


	let $selectorsContainer = $('<div id="levels_selectors_container">');
	let $subtitlesContainer = $('<div id="levels_subtitles_container">')
		.addClass('subtitle')
		.append(
			'<div id="levels_level_subtitle">LEVEL',
			'<div id="levels_notes_subtitle">NOTES',
			'<div id="levels_rhythm_subtitle">RHYTHM',
			'<div id="levels_tempo_subtitle">TEMPO',
			'<div id="levels_trials_subtitle">TRIALS');

	$Div.append(
		$addLevelBtn,
		$subtitlesContainer,
		$selectorsContainer,
		$removeLevelBtn
	);
	asx.wait(1000).then(() => {
		const levels = EStore.getLevels();
		for (let lvl of levels) {
			const $lvl = _addLevel();
			$lvl.$notesSelect.val(lvl.notes);
			if (lvl.rhythm != $lvl.$rhythmSwitch.val()) {
				$lvl.$rhythmSwitch.click();
			}
			if (lvl.rhythm) {
				$lvl.$tempoSelect.val(lvl.tempo);
			}
			$lvl.$trialsSelect.val(lvl.trials);
		}
	});


	function _removeLevel() {
		if (levelsArr.length == 0) {
			Alert.small.info("No levels to remove", "No changes have been made");
			return;
		}
		let last = levelsArr.pop();
		last.$elements().map($e => $e.remove());
		const noZeroes = levelsArr.hasNoZeroes();
		Gui.toggleButtons(noZeroes);
		if (levelsArr.isEmpty())
			$removeLevelBtn.deactivate();

		return last;
	}

	/**
	 * @return {$Level}
	 * @private
	 */
	function _addLevel() {
		let row = levelsArr.length + int($Div.css('grid-row-start')) + 1;
		if (row > 35)
			return Alert.small.warning(`Can't have move levels`);
		const subsDivs = ['<div>LEVEL</div>', '<div>NOTES</div>',
		                  '<div>RHYTHM</div>', '<div>TEMPO</div>', '<div>TRIALS</div>'];
		let right = 0;
		if (row > 18) {
			right = 1;
			row -= 17;
			if ($subtitlesContainer.children().length == 5)
				$subtitlesContainer.append(...subsDivs);
		}

		let $level = new $Level(row, levelsArr.length, right);


		levelsArr.push($level);


		Gui.toggleButtons(false);
		$removeLevelBtn.activate();
		$selectorsContainer
			.append(...$level.$elements());
		$level.$notesSelect.focus();
		return $level;
	}

	function _reset() {
		$selectorsContainer.empty();
		$removeLevelBtn.deactivate();
		levelsArr = new LevelsArray();
	}

	/**@return {LevelsArray}*/
	function getLevelsArr() {
		return levelsArr;
	}

	/*	function toMode(mode) {
			const toTempoMode = mode == "tempo";
			const truth = EStore.truth();
			const totalNotes = truth.numOfNotes();
			$addLevelBtn.toggle(!toTempoMode);


			if (toTempoMode) {
				_reset();
				EStore.set("current_test.levels", [{ notes: totalNotes, trials: 0 }]);
				$addLevelBtn.click();
				$removeLevelBtn.deactivate();
			}
			try {
				levelsArr.get(0).$notesSelect
							.attr('disabled', toTempoMode ? 'disabled' : null)
							.toggleClass('my-select-disabled', toTempoMode)
							.val(toTempoMode ? totalNotes : 0);

			} catch (e) {
				if (!(e instanceof TypeError)) {
					Alert.small.error("Failed changing learning type", e.message);
					throw e;
				}

			}


		}
	*/

	return {
		$Div,
		getLevelsArr,
	};
})();


module.exports = LevelsPart;
