// **pages/NewTest/Parts/LevelsPart.js
const $ = require('jquery');
let { bool, range, int } = require("pyano_local_modules/util");
let { Alert } = require("pyano_local_modules/util/Alert");
let Gui = require("../Gui");


const LevelsPart = (() => {
	class LevelsArray {
		constructor() {
			/**@type {$Level[]}*/
			this.levels = [];
		}

		/** @return {$Level} */
		get(levelIndex) {
			return this.levels[levelIndex];
		}

		push(level) {
			this.levels.push(level);
		}

		/**@return {$Level}*/
		pop(index = -1) {
			if (index == -1)
				return this.levels.pop();
			else
				return this.levels.splice(index, 1)[0];
		}

		get length() {
			return this.levels.length;
		}


		/** [ [3,4] , [7,2] ]
		 @return {Number[][]}
		 @private*/
		_rawValuesPairs() {

			let ret = this.levels.map(
				level => level.$notesTrialsPair().map(
					$selector => int($selector.val())
				)
			);
			return ret;
		}

		/**[ {"notes":3, "trials":4} , {"notes":7, "trials":2} ]
		 @return {{notes:Number,trials:Number}[]}*/
		toDicts() {
			return this.levels.map(level => level.toDict());

		}


		hasNoZeroes() {
			if (!bool(this._rawValuesPairs()))
				return false;
			if (EStore.isInTempo())
				return this._rawValuesPairs().every(
					pair => bool(int(pair[1]))
				);
			else
				return this._rawValuesPairs().every(
					pair => pair.every(
						value => bool(int(value))
					)
				);
		}

	}

	class $Level {
		/**@param {Number} row
		 @param {Number} levelIndex
		 @param {Number} right*/
		constructor(row, levelIndex, right = 0) {
			this.gridRow = `${row}/${row}`;
			let baseGridColumn = 5 + 3 * right;
			this.$levelId = $('<div class="mid-v-align-container">')
				.css({
					textAlign: 'center',
					gridColumn: `${baseGridColumn}/${baseGridColumn}`,
					gridRow: this.gridRow
				}).append(`<span class="mid-v-align">${levelIndex + 1}`);

			this.$notesSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 1}/${baseGridColumn + 1}`,
					gridRow: this.gridRow
				});

			this.$trialsSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 2}/${baseGridColumn + 2}`,
					gridRow: this.gridRow
				});


			let $selects = this.$trialsSelect.add(this.$notesSelect);
			for (let i of range(0, 200))
				$selects
					.append(`<option value="${i}">${i}`);


			$selects
				.change(() => {
					Gui.toggleMainButtons({ activate: levelsArr.hasNoZeroes() });

				});

		}

		$elements() {
			return [this.$levelId, this.$notesSelect, this.$trialsSelect];
		}

		/**@return jQuery[]*/
		$notesTrialsPair() {
			return [this.$notesSelect, this.$trialsSelect];
		}


		/**@return {{notes:Number,trials:Number}}*/
		toDict() {
			return { notes: int(this.$notesSelect.val()), trials: int(this.$trialsSelect.val()) };
		}
	}

	let levelsArr = new LevelsArray();
	let $Div = $('<div id="levels_div">');
	let $addLevelBtn = $('<button id="levels_add_level_btn">')
		.addClass('my-btn active-btn')
		.html('Add Level')
		.click(addLevel);

	let $removeLevelBtn = $('<button id="levels_remove_level_btn">')
		.addClass('my-btn active-btn')
		.html('Remove Level')
		.click(removeLevel);
	let $selectorsContainer = $('<div id="levels_selectors_container">');
	let $subtitlesContainer = $('<div id="levels_subtitles_container">')
		.addClass('subtitle')
		.append(
			'<div id="levels_level_subtitle">LEVEL',
			'<div id="levels_notes_subtitle">NOTES',
			'<div id="levels_trials_subtitle">TRIALS');

	$Div.append(
		$addLevelBtn,
		$subtitlesContainer,
		$selectorsContainer,
		$removeLevelBtn
	);

	function removeLevel() {
		if (levelsArr.length == 0) {
			Alert.small.info("No levels to remove", "No changes have been made");
			return;
		}
		let row = levelsArr.length + int($Div.css('grid-row-start')) + 1;
		let last = levelsArr.pop();
		last.$elements().map($e => $e.remove());
		const noZeroes = levelsArr.hasNoZeroes();
		Gui.toggleMainButtons({ activate: noZeroes });
		$removeLevelBtn.toggleClass('inactive-btn', noZeroes)
		               .toggleClass('active-btn', !noZeroes);
		return last;
	}

	function addLevel() {

		let row = levelsArr.length + int($Div.css('grid-row-start')) + 1;
		let right = 0;
		if (row > 35) {
			if ($subtitlesContainer.children().length == 6)
				$subtitlesContainer.append('<div>LEVEL</div>', '<div>NOTES</div>', '<div>TRIALS</div>');
			right = 2;
			row -= 34;
		} else if (row > 18) {
			right = 1;
			row -= 17;
			if ($subtitlesContainer.children().length == 3)
				$subtitlesContainer.append('<div>LEVEL</div>', '<div>NOTES</div>', '<div>TRIALS</div>');
		}

		let level = new $Level(row, levelsArr.length, right);


		levelsArr.push(level);


		Gui.toggleMainButtons({ activate: levelsArr.hasNoZeroes() });
		$selectorsContainer
			.append(...level.$elements());
	}

	function _reset() {
		$selectorsContainer.empty();
		levelsArr = new LevelsArray();
	}

	function getLevelsArr() {
		return levelsArr;
	}

	/**@param {String} mode*/
	function toMode(mode) {
		const toTempoMode = mode == "tempo";
		$addLevelBtn.toggleClass('inactive-btn', toTempoMode);
		$addLevelBtn.toggleClass('active-btn', !toTempoMode);
		if (toTempoMode) {
			_reset();
			$addLevelBtn.click();
		}
		try {
			levelsArr.get(0).$notesSelect
			         .attr('disabled', toTempoMode
			                           ? 'disabled'
			                           : null)
			         .toggleClass('my-select-disabled', toTempoMode)
			         .val(toTempoMode
			              ? EStore.truthFileTotalNotes()
			              : 0);

		} catch (e) {
			if (!(e instanceof TypeError))
				throw e;

		}


	}


	return {
		$Div,
		getLevelsArr,
		toMode
	};
})();


module.exports = LevelsPart;
