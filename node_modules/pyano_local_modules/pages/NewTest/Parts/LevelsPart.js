// **pages/NewTest/Parts/LevelsPart.js
const $ = require('jquery');

const $$ = elem => {
	let $elem = $(elem);
	$elem.activate = () => $elem.toggleClass('inactive-btn', false).toggleClass('active-btn', true);
	$elem.deactivate = () => $elem.toggleClass('inactive-btn', true).toggleClass('active-btn', false);
	$elem.toggle = (on) => on ? $elem.activate() : $elem.deactivate();
	return $elem;
};
let Gui = require("../Gui");
let { $midVertAlign } = require("pyano_local_modules/util");
let { EStore } = require("pyano_local_modules/ext_libs");

const LevelsPart = (() => {
	/**@class LevelsArray*/
	class LevelsArray {
		constructor() {
			/**@type {$Level[]}*/
			this.levels = [];
		}

		/** @param {number} levelIndex
		 * @return {$Level} */
		get(levelIndex) {
			return this.levels[levelIndex];
		}

		/**@param {$Level} level*/
		push(level) {
			this.levels.push(level);
		}

		/**@return {$Level}*/
		pop(index = -1) {
			if (index == -1)
				return this.levels.pop();
			else
				return this.levels.splice(index, 1)[0];
		}

		get length() {
			return this.levels.length;
		}


		/** [ [3,4] , [7,2] ]
		 @return {number[][]}
		 @private*/
		_notesTrialsValuesList() {

			return this.levels.map(
				level => level.$notesTrialsTuple().map(
					$selector => int($selector.val())
				)
			);
		}

		/**[ {"notes":3, "trials":4} , {"notes":7, "trials":2} ]
		 @return {{notes:number,trials:number}[]}*/
		toDicts() {
			return this.levels.map(level => level.toDict());

		}

		/**@return {boolean}*/
		isEmpty() {return !bool(this._notesTrialsValuesList());}

		/**@return {boolean}*/
		hasNoZeroes() {
			if (this.isEmpty())
				return false;
			// if (EStore.isLearningTempo())
			// 	return this._notesTrialsValuesList()
			// 	           .every(pair => bool(int(pair[1])));
			// else
			return this._notesTrialsValuesList()
			           .every(pair => pair
				           .every(value => bool(int(value))));
		}

	}

	/**@class $Level*/
	class $Level {
		/**@param {number} row
		 @param {number} levelIndex
		 @param {number} right*/
		constructor(row, levelIndex, right = 0) {
			this.gridRow = `${row}/${row}`;
			let baseGridColumn = 5 + 5 * right;
			this.$i = $midVertAlign(levelIndex + 1)
				.css({
					textAlign: 'center',
					gridColumn: `${baseGridColumn}/${baseGridColumn}`,
					gridRow: this.gridRow
				});

			this.$notesSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 1}/${baseGridColumn + 1}`,
					gridRow: this.gridRow
				});


			this.$rhythmSwitch = $('<button class="my-btn toggle-btn-off">')
				.css({
					gridColumn: `${baseGridColumn + 2}/${baseGridColumn + 2}`,
					gridRow: this.gridRow
				})
				.click(() => this.$rhythmSwitch
				                 .toggleClass("toggle-btn-off")
				                 .toggleClass("toggle-btn-on"));


			this.$rhythmSwitch.val = () => this.$rhythmSwitch.hasClass('toggle-btn-on');
			this.$tempoSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 3}/${baseGridColumn + 3}`,
					gridRow: this.gridRow
				});


			for (let i of range(5, 15))
				this.$tempoSelect.append(`<option value="${i * 10}">${i * 10}%`);

			this.$trialsSelect = $('<select class="my-select">')
				.css({
					gridColumn: `${baseGridColumn + 4}/${baseGridColumn + 4}`,
					gridRow: this.gridRow
				});


			let $selects = this.$trialsSelect.add(this.$notesSelect);
			for (let i of range(0, EStore.truth().numOfNotes()))
				$selects.append(`<option value="${i}">${i}`);


			$selects.change(() => {
				const noZeroes = levelsArr.hasNoZeroes();
				Gui.toggleButtons(noZeroes);

			});

		}

		/**@return {jQuery[]}*/
		$elements() {
			return [this.$i, this.$notesSelect,
				// this.$accuracySwitch,
				     this.$rhythmSwitch,
				     this.$tempoSelect, this.$trialsSelect];
		}

		/**@return {jQuery[]}*/
		$notesTrialsTuple() {
			return [this.$notesSelect, this.$trialsSelect];
		}


		/**@return {{notes:number,trials:number}}*/
		toDict() {
			return {
				notes: int(this.$notesSelect.val()),
				trials: int(this.$trialsSelect.val()),
				// accuracy: this.$accuracySwitch.val(),
				rhythm: this.$rhythmSwitch.val(),
				tempo: int(this.$tempoSelect.val()),
			};
		}
	}

	let levelsArr = new LevelsArray();
	let $Div = $('<div id="levels_div">');
	let $$addLevelBtn = $$('<button id="levels_add_level_btn">')
		.addClass('my-btn active-btn')
		.html('Add Level')
		.click(addLevel);

	let $$removeLevelBtn = $$('<button id="levels_remove_level_btn">')
		.addClass('my-btn inactive-btn')
		.html('Remove Level')
		.click(removeLevel);


	let $selectorsContainer = $('<div id="levels_selectors_container">');
	let $subtitlesContainer = $('<div id="levels_subtitles_container">')
		.addClass('subtitle')
		.append(
			'<div id="levels_level_subtitle">LEVEL',
			'<div id="levels_notes_subtitle">NOTES',
			'<div id="levels_rhythm_subtitle">RHYTHM',
			'<div id="levels_tempo_subtitle">TEMPO',
			'<div id="levels_trials_subtitle">TRIALS');

	$Div.append(
		$$addLevelBtn,
		$subtitlesContainer,
		$selectorsContainer,
		$$removeLevelBtn
	);

	function removeLevel() {
		if (levelsArr.length == 0) {
			Alert.small.info("No levels to remove", "No changes have been made");
			return;
		}
		let last = levelsArr.pop();
		last.$elements().map($e => $e.remove());
		const noZeroes = levelsArr.hasNoZeroes();
		Gui.toggleButtons(noZeroes);
		if (levelsArr.isEmpty())
			$$removeLevelBtn.deactivate();

		return last;
	}

	function addLevel() {
		let row = levelsArr.length + int($Div.css('grid-row-start')) + 1;
		if (row > 35)
			return Alert.small.warning(`Can't have move levels`);
		const subsDivs = ['<div>LEVEL</div>', '<div>NOTES</div>',
		                  '<div>RHYTHM</div>', '<div>TEMPO</div>', '<div>TRIALS</div>'];
		let right = 0;
		if (row > 18) {
			right = 1;
			row -= 17;
			if ($subtitlesContainer.children().length == 5)
				$subtitlesContainer.append(...subsDivs);
		}

		let level = new $Level(row, levelsArr.length, right);


		levelsArr.push(level);


		//const noZeroes = levelsArr.hasNoZeroes();
		Gui.toggleButtons(false);
		$$removeLevelBtn.activate();
		$selectorsContainer
			.append(...level.$elements());
	}

	function _reset() {
		$selectorsContainer.empty();
		$$removeLevelBtn.deactivate();
		levelsArr = new LevelsArray();
	}

	/**@return {LevelsArray}*/
	function getLevelsArr() {
		return levelsArr;
	}

	/**@param {TLearningType} mode*/
	function toMode(mode) {
		const toTempoMode = mode == "tempo";
		const truth = EStore.truth();
		const totalNotes = truth.numOfNotes();
		$$addLevelBtn.toggle(!toTempoMode);


		if (toTempoMode) {
			_reset();
			EStore.set("current_test.levels", [{ notes: totalNotes, trials: 0 }]);
			$$addLevelBtn.click();
			$$removeLevelBtn.deactivate();
		}
		try {
			levelsArr.get(0).$notesSelect
			         .attr('disabled', toTempoMode ? 'disabled' : null)
			         .toggleClass('my-select-disabled', toTempoMode)
			         .val(toTempoMode ? totalNotes : 0);

		} catch (e) {
			if (!(e instanceof TypeError)) {
				Alert.small.error("Failed changing learning type", e.message);
				throw e;
			}

		}


	}

	return {
		$Div,
		getLevelsArr,
		toMode
	};
})();


module.exports = LevelsPart;
