// **pages/NewTest/Parts/SettingsPart.js
const $ = require('jquery');
let { EStore } = require("pyano_local_modules/ext_libs");

/**@typedef {'demo_type' | 'errors_playingspeed' | 'allowed_tempo_deviation_factor' | 'learning_type'} TFieldName*/

/**@typedef {{id:string,text:string}} TIdTextPair*/

/**@typedef {{id:string, text:string, storeVal:string}} TIdTextStoreVal*/

/**@typedef {{
	label: TIdTextPair,
	firstOpt: TIdTextStoreVal,
	secondOpt: TIdTextStoreVal
}} TToggleElementsOptions*/

/**@typedef {{
	label: TIdTextPair,
	select: {
		id: string,
		options: {
			rangeStop: number,
			valueFn: function (number): (number|string)
		}
	},
}} TSelectElementsOptions*/
/**@class ToggleSetting*/
class ToggleSetting {
	/**
	 @param {TFieldName} fieldName
	 @param {TToggleElementsOptions} elements
	 */
	constructor({ fieldName, elements }) {

		// let [labelText, firstText, secondText] = texts;

		// let [labelId, firstId, secondId] = ids;

		this.fieldName = fieldName;
		let { label, firstOpt, secondOpt } = elements;
		// this.values = values;
		this.label = {
			...label, $jQ: $(`<div id=${label.id}>`)
				.addClass("mid-v-align-container")
				.append($('<span class="mid-v-align">')
					.text(label.text))
		};
		/*this.$label = $(`<div id=${label.id}>`)
			.addClass("mid-v-align-container")
			.append($('<span class="mid-v-align">')
				.text(label.text));
		*/
		this.firstOpt = {
			...firstOpt, $jQ: $(`<button id=${firstOpt.id}>`)
				.html(firstOpt.text)
				.addClass('my-btn radio-option-selected')
		};

		// this.$firstOpt = $(`<button id=${firstOpt.id}>`)
		// 	.html(firstOpt.text)
		// 	.addClass('my-btn radio-option-selected');

		/*this.$secondOpt = $(`<button id=${secondOpt.id}>`)
			.html(secondOpt.text)
			.addClass('my-btn radio-option-selected');
		*/

		this.secondOpt = {
			...secondOpt,
			$jQ: $(`<button id=${secondOpt.id}>`)
				.html(secondOpt.text)
				.addClass('my-btn radio-option-selected')
		};

		this._setButtonsByStore();

		this.firstOpt.$jQ.add(this.secondOpt.$jQ)
		    .click(e => {
			    const firstOptClicked = e.currentTarget.id == this.firstOpt.id;
			    this._setStoreAndToggleGui(firstOptClicked);

		    });
	}

	setClickFn(clickFn) {
		this.firstOpt.$jQ.add(this.secondOpt.$jQ)
		    .click(clickFn);
	}


	/**@param {boolean} first*/
	_select({ first }) {

		this.firstOpt.$jQ
		    .toggleClass('radio-option-selected', first)
		    .toggleClass('radio-option-unselected', !first);

		this.secondOpt.$jQ
		    .toggleClass('radio-option-unselected', first)
		    .toggleClass('radio-option-selected', !first);


	}

	_setButtonsByStore() {
		let currentTest = EStore.get('current_test');
		let cfgIsSetToFirst = currentTest[this.fieldName] == this.firstOpt.storeVal;
		this._select({ first: cfgIsSetToFirst });

	}

	/**@param {boolean} toFirst*/
	_setStoreAndToggleGui(toFirst) {

		// let [firstValue, secondValue] = this.values;
		let fieldValue = toFirst
		                 ? this.firstOpt.storeVal
		                 : this.secondOpt.storeVal;
		EStore.set(`current_test.${this.fieldName}`, fieldValue);

		this._select({ first: toFirst });

		Alert.small.success(`${this.fieldName.replaceAll('_', ' ').title()}`, `set to ${fieldValue}`);

	}

	/** @return {jQuery[]} */
	jQueries() {
		return [this.firstOpt.$jQ,
		        this.secondOpt.$jQ,
		        this.label.$jQ];

	}
}

/**@class SelectSetting*/
class SelectSetting {
	/**
	 @param {TFieldName} fieldName
	 @param {TSelectElementsOptions} elements
	 @param {boolean} isPercent
	 */
	constructor({ fieldName, elements, isPercent }) {
		this.isPercent = isPercent;
		this.fieldName = fieldName;
		let { label, select } = elements;
		this.label = {
			...label, $jQ: $(`<div id=${label.id}>`)
				.addClass("mid-v-align-container")
				.append($('<span class="mid-v-align">')
					.text(label.text))
		};
		this.select = {
			...select, $jQ: $(`<select id=${select.id}>`)
				.addClass("my-select")
				.change(() => this._setStore())
		};

		this._previousValue = null;
		this._popuplateOptionsByStore(select.options);

	}

	// Called in constructor on change. Don't manually "select" because .change() does this automatically
	_setStore() {

		let fieldValue;
		if (this.isPercent)
			fieldValue = this.select.$jQ.val();
		else
			fieldValue = float(this.select.$jQ.val());
		this._previousValue = fieldValue;
		EStore.set(`current_test.${this.fieldName}`, fieldValue);
		let msg = `${this.fieldName.replaceAll('_', ' ').title()} set to ${fieldValue}`;
		if (!this.isPercent)
			msg += 'x';
		Alert.small.success(msg);
		console.log(`${this.isPercent ? "deviation fac" : "err play speed"}._setStore()`, { 'this._previousValue': this._previousValue });

	}

	// Instance method, called by instanciator
	/**
	 @param {number} rangeStop
	 @param {Function} valueFn
	 */
	_popuplateOptionsByStore({ rangeStop, valueFn }) {
		let currentTest = EStore.get('current_test');
		let valueInCfg;
		if (this.isPercent)
			valueInCfg = currentTest[this.fieldName];
		else
			valueInCfg = float(currentTest[this.fieldName]);

		this._previousValue = bool(valueInCfg) ? valueInCfg : 1;
		for (let i of range(0, rangeStop)) {
			let value = valueFn(i);


			let $option = $(`<option value="${value}">`)
				.attr('selected', value == valueInCfg)
				.text(this.isPercent ? value : value + 'x');
			this.select.$jQ.append($option);
		}
		console.log(`${this.isPercent ? "deviation fac" : "err play speed"}._popuplate(...)`, { 'this._previousValue': this._previousValue });
	}

	// LearningTypeSetting clickFn
	// SettingsPart, toggle(false) if in tempo
	toggle(on) {
		this.select.$jQ
		    .attr('disabled', on ? null : 'disabled')
		    .toggleClass('my-select-disabled', !on);
		let valueToSet = on ? this._previousValue : 1;
		this.select.$jQ.val(valueToSet);
		if (!this.isPercent)
			EStore.set(`current_test.${this.fieldName}`, valueToSet);

		// this.select.$jQ.val(valueToSet);
		console.log(`${this.isPercent ? "deviation fac" : "err play speed"}.toggle(${on})`, { 'this._previousValue': this._previousValue });
	}


	jQueries() {
		return [this.select.$jQ, this.label.$jQ];
	}
}

let SettingsPart = (() => {
	/**@param {string} mode*/
	function toMode(mode) {
		ErrorsPlayingSpeedSetting.toggle(mode == "accuracy");
		AllowedTempoDeviationSetting.toggle(mode == "tempo");
	}

	let $Div = $('<div id="settings_div">');
	let DemoTypeSetting = new ToggleSetting({
		fieldName: 'demo_type',
		elements: {
			label: { id: "settings_video_animation_label", text: 'Demo Type' },
			firstOpt: { id: "settings_video_btn", text: 'Video', storeVal: 'video' },
			secondOpt: { id: "settings_animation_btn", text: 'Animation', storeVal: 'animation' }
		},
	});

	let ErrorsPlayingSpeedSetting = new SelectSetting({
		fieldName: 'errors_playingspeed',
		elements: {
			label: { id: "settings_errors_playingspeed_label", text: "Errors demo playing speed" },
			select: {
				id: "settings_errors_playingspeed_select",
				options: {
					rangeStop: 30,
					valueFn: i => 0.5 + (i / 20),
				}
			}
		},

		isPercent: false
	});


	let AllowedTempoDeviationSetting = new SelectSetting({
		fieldName: 'allowed_tempo_deviation_factor',
		elements: {
			label: { id: "settings_tempo_deviation_label", text: "Allowed tempo deviation factor" },
			select: {
				id: "settings_tempo_deviation_select",
				options: {
					rangeStop: 40,
					valueFn: i => `${i}%`
				}
			}
		},
		isPercent: true
	});


	let LearningTypeSetting = new ToggleSetting({
		fieldName: 'learning_type',
		elements: {
			label: { text: "Learning Type", id: "settings_accuracy_tempo_label" },
			firstOpt: { text: "Accuracy", id: "settings_accuracy_btn", storeVal: 'accuracy' },
			secondOpt: { text: "Tempo", id: "settings_tempo_btn", storeVal: 'tempo' },
		}

	});


	$Div.append(
		...LearningTypeSetting.jQueries(),
		...DemoTypeSetting.jQueries(),
		...ErrorsPlayingSpeedSetting.jQueries(),
		...AllowedTempoDeviationSetting.jQueries(),
	);
	return { $Div, LearningTypeSetting, toMode };
})();
module.exports = SettingsPart;
