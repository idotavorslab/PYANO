// **pages/NewTest/Parts/SettingsPart.js
const $ = require('jquery');
let { EStore } = require("pyano_local_modules/ext_libs");

/**@typedef {'demo_type' | 'errors_playingspeed' | 'allowed_tempo_deviation_factor' | 'learning_type'} TFieldName*/
class Setting {
	/**
	 @param {TFieldName} fieldName
	 @param {string[]} texts
	 @param {string[]} ids
	 @param {string[]|boolean[]} values
	 @param {function?} clickFn
	 */
	constructor({ fieldName, texts, ids, values }) {

		let [labelText, firstText, secondText] = texts;

		let [labelId, firstId, secondId] = ids;

		this.fieldName = fieldName;
		this.values = values;
		this.$label = $(`<div id=${labelId}>`)
			.addClass("mid-v-align-container")
			.append($('<span class="mid-v-align">')
				.text(labelText));


		this.$first = $(`<button id=${firstId}>`)
			.html(firstText)
			.addClass('my-btn radio-option-selected');

		this.$second = $(`<button id=${secondId}>`)
			.html(secondText)
			.addClass('my-btn radio-option-selected');

		this._toggleFirstAndSecondFromStore();

		// [Click]
		this.$first.add(this.$second)
		    .click(e => {
			    const firstClicked = e.currentTarget.id == this.$first[0].id;
			    this._setStoreAndToggleGui(firstClicked);
			    // if (bool(clickFn))
			    //    clickFn(firstClicked);

		    });
	}

	setClickFn(clickFn) {
		this.$first.add(this.$second)
		    .click(clickFn);
	}


	/**@param {boolean} first*/
	_select({ first }) {

		this.$first.toggleClass('radio-option-selected', first);
		this.$first.toggleClass('radio-option-unselected', !first);
		this.$second.toggleClass('radio-option-unselected', first);
		this.$second.toggleClass('radio-option-selected', !first);


	}

	_toggleFirstAndSecondFromStore() {
		let currentTest = EStore.get('current_test');
		let cfgIsSetToFirst = currentTest[this.fieldName] == this.values[0];
		this._select({ first: cfgIsSetToFirst });

	}

	/**@param {boolean} toFirst*/
	_setStoreAndToggleGui(toFirst) {

		let [firstValue, secondValue] = this.values;
		let fieldValue = toFirst
		                 ? firstValue
		                 : secondValue;
		EStore.set(`current_test.${this.fieldName}`, fieldValue);

		this._select({ first: toFirst });

		Alert.small.success(`${this.fieldName.replaceAll('_', ' ').title()}`, `set to ${fieldValue}`);

	}

	/** @return {jQuery[]} */
	elements() {
		return [this.$first,
		        this.$second,
		        this.$label];
	}
}


class SelectSetting {
	/**
	 @param {TFieldName} fieldName
	 @param {string} labelText
	 @param {string[]} ids
	 @param {boolean} isPercent
	 */
	constructor({ fieldName, labelText, ids, isPercent }) {
		let [labelId, selectId] = ids;
		this.isPercent = isPercent;
		this.fieldName = fieldName;
		this.$label = $(`<div id=${labelId}>`)
			.addClass("mid-v-align-container")
			.append($('<span class="mid-v-align">')
				.text(labelText));
		this.$select = $(`<select id=${selectId}>`)
			.addClass("my-select")
			.change(() => this._setNewValueInStore());

		this._previousValue = null;
	}

	// Called in constructor on change. Don't manually "select" because .change() does this automatically
	_setNewValueInStore() {
		let fieldValue;
		if (this.isPercent)
			fieldValue = this.$select.val();
		else
			fieldValue = float(this.$select.val());
		this._previousValue = fieldValue;
		EStore.set(`current_test.${this.fieldName}`, fieldValue);
		let msg = `${this.fieldName.replaceAll('_', ' ').title()} set to ${fieldValue}`;
		if (!this.isPercent)
			msg += 'x';
		Alert.small.success(msg);

	}

	// Instance method, called by instanciator
	/**
	 @param {number} rangeStop
	 @param {Function} valueFn
	 */
	popuplateOptions({ rangeStop, valueFn }) {
		let currentTest = EStore.get('current_test');
		let valueInCfg;
		if (this.isPercent)
			valueInCfg = currentTest[this.fieldName];
		else
			valueInCfg = float(currentTest[this.fieldName]);

		this._previousValue = valueInCfg;
		for (let i of range(0, rangeStop)) {
			let value = valueFn(i);
			let selected = value == valueInCfg
			               ? 'selected="selected"'
			               : '';
			let option = `<option ${selected} value="${value}">${value}`;
			if (!this.isPercent)
				option += 'x';
			this.$select.append(option);
		}
	}

	// LearningTypeSetting clickFn
	// SettingsPart, toggle(false) if in tempo
	toggle(on) {
		this.$select
		    .attr('disabled', on
		                      ? null
		                      : 'disabled')
		    .toggleClass('my-select-disabled', !on);

		let valueToSet = on
		                 ? this._previousValue
		                 : 1;
		this.$select.val(valueToSet);
		if (!this.isPercent)
			EStore.set(`current_test.${this.fieldName}`, valueToSet);

		this.$select.val(valueToSet);
		// console.log(`toggle(${on})`, { 'this._previousValue': this._previousValue });
	}


	elements() {
		return [this.$select, this.$label];
	}
}

let SettingsPart = (() => {
	/**@param {string} mode*/
	function toMode(mode) {
		ErrorsPlayingSpeedSetting.toggle(mode == "accuracy");
		AllowedTempoDeviationSetting.toggle(mode == "tempo");
	}

	let $Div = $('<div id="settings_div">');
	let DemoTypeSetting = new Setting({
		fieldName: 'demo_type',
		texts: ['Demo type', 'Video', 'Animation'],
		ids: ["settings_video_animation_label", "settings_video_btn", "settings_animation_btn"],
		values: ['video', 'animation']
	});
	let ErrorsPlayingSpeedSetting = new SelectSetting({
		fieldName: 'errors_playingspeed',
		labelText: "Errors demo playing speed",
		ids: ["settings_errors_playingspeed_label", "settings_errors_playingspeed_select"],
		isPercent: false
	});

	ErrorsPlayingSpeedSetting.popuplateOptions({
		rangeStop: 30,
		valueFn: i => 0.5 + (i / 20),
	});


	let AllowedTempoDeviationSetting = new SelectSetting({
		fieldName: 'allowed_tempo_deviation_factor',
		labelText: "Allowed tempo deviation factor",
		ids: ["settings_tempo_deviation_label", "settings_tempo_deviation_select"],
		isPercent: true
	});
	AllowedTempoDeviationSetting.popuplateOptions({
		rangeStop: 40,
		valueFn: i => `${i}%`
	});


	let LearningTypeSetting = new Setting({
		fieldName: 'learning_type',
		texts: ["Learning type", 'Accuracy', 'Tempo'],
		ids: ["settings_accuracy_tempo_label", "settings_accuracy_btn", "settings_tempo_btn"],
		values: ['accuracy', 'tempo']
	});


	$Div.append(
		...LearningTypeSetting.elements(),
		...DemoTypeSetting.elements(),
		...ErrorsPlayingSpeedSetting.elements(),
		...AllowedTempoDeviationSetting.elements(),
	);
	return { $Div, LearningTypeSetting, toMode };
})();
module.exports = SettingsPart;
