// **pages/NewTest/Elements.js
const $ = require('jquery');
let { EStore } = require("pyano_local_modules/ext_libs");
let { strong } = require("pyano_local_modules/util");
const StoreFns = () => require("./StoreFns");
let currentSubject = EStore.currentTest().current_subject;

/**$readyBtn, $saveBtn [, $loadConfigBtn]*/
function $btns({ includeLoadBtn }) {
	let $readySaveSaveas = $readyBtn.add($saveBtn).add($saveAsBtn);
	if (includeLoadBtn)
		return $readySaveSaveas.add($loadConfigBtn);
	else
		return $readySaveSaveas;
}

async function startTestIfReady() {
	StoreFns().saveToCurrentTest();
	if (EStore.subjectName() == null)
		return await Alert.small.warning("Please specify current subject.");

	const truth = EStore.truth();
	let missingTxts = await truth.txt.getMissing();
	if (bool(missingTxts))
		return await Alert.small.warning(`Some text files are missing, namely: ${missingTxts.map(_f => _f.name)}`, "Use File Tools Page.");
	if (!(await truth.midi.exists()))
		return await Alert.small.warning(`Couldn't find midi file of truth: "${truth.name}"`, "Use File Tools Page.");

	if (EStore.isDemoVideo()) {
		let missingNames = [];
		if (!(await truth.mp4.exists()))
			missingNames.push(truth.mp4.name);

		if (!(await truth.onsets.exists()))
			missingNames.push(truth.onsets.name);

		if (bool(missingNames)) {
			const missing = missingNames.length > 1 ? missingNames : missingNames[0];
			console.warn('startTestIfReady()', { missing });
			return await Alert.small.warning(`Demo type is set to video, I'm missing: ${missing}`, "Use File Tools Page.");
		}
	}


	require("pyano_local_modules/pages/pages").toPage('inside_test', true);
}

const $currentSubjectSubtitle = $('<div id="page_subtitle_current_subject">')
	.html(bool(currentSubject)
	      ? `Current subject: ${strong(currentSubject)}`
	      : 'Current subject: --');
const $currentTruthFileSubtitle = $('<div>Truth File:</div>')
	.append(strong(EStore.truthFileName({ withExtension: false })))
	.click(() => StoreFns().browseAndSetNewTruth())
	.css('cursor', 'pointer');

let $subtitle = $('<div class="subtitle" id="page_subtitle">')
	.append($currentSubjectSubtitle)
	.append($currentTruthFileSubtitle);

let $readyBtn = $('<button id="page_ready_btn">')
	.html('Ready')
	.click(async () => await startTestIfReady());

let $saveBtn = $('<button id="page_save_btn">')
	.html("Save")
	.click(() => StoreFns().saveToCurrentTest());

let $saveAsBtn = $('<button id="page_save_as_btn">')
	.html("Save As...")
	.click(() => {
		StoreFns().saveToCurrentTest();
		StoreFns().saveTestAs();
	});

let $loadConfigBtn = $('<button id="page_load_config_btn">')
	.html("Load Config...")
	.addClass('my-btn active-btn')
	.click(() => StoreFns().loadNewTestConfig());

$btns({ includeLoadBtn: false })
	.addClass('my-btn inactive-btn');

module.exports = {
	$readyBtn,
	$saveBtn,
	$saveAsBtn,
	$loadConfigBtn,
	$subtitle,
	$currentTruthFileSubtitle,
	$currentSubjectSubtitle,
	$btns
};
