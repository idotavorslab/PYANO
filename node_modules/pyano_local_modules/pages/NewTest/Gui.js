const { strong } = require("pyano_local_modules/util");
const { EStore } = require("pyano_local_modules/ext_libs");
const StoreFns = () => require("./StoreFns");
const PyFns = () => require("./PyFns");
const LevelsPart = () => require("./Parts/LevelsPart");
const Path = require('path');

// function setSubjectSubtitle(val) {
// 	val = bool(val) ? val : '--';
// 	$subjectSubtitle
// 		.html(`Subject: ${strong(val)}`);
// }

/**@param {Truth} truth
 * @param {number} numOfNotes*/
function setTruthSubtitle(truth, numOfNotes = undefined) {
	if (numOfNotes === undefined)
		numOfNotes = truth.numOfNotes();
	$truthSubtitle.html(`Truth: ${strong(truth.name)} (${numOfNotes} notes)`);
}

/**@param {string} savePath*/
function setSavePathSubtitle(savePath) {
	$savePathSubtitle.html(`Config: ${strong(Path.basename(savePath))}`);
}

/** Warn user and return false if input missing */
function toggleInputDiv($inputDiv, { bad }) {
	if (bad) {
		$inputDiv.addClass('input-missing');
		Alert.small._warning({
			title: 'Fill subject Id',
			html: 'Marked in red',
			onAfterClose: () => $inputDiv.removeClass('input-missing')
		});

		return false;
	} else {
		$inputDiv.removeClass('input-missing');
		return true;
	}
}

/**@param {boolean} noZeroes*/
function toggleButtons(noZeroes) {
	$readyBtn.add($saveBtn).add($saveAsBtn).toggle(noZeroes);

}

/**@return {jQuery}*/
function $readySaveLoadSaveas() {
	return $loadConfigBtn.add($readyBtn).add($saveBtn).add($saveAsBtn);
}

async function _startTestIfReady() {
	const TLevels = LevelsPart().getLevelsArr().toTLevels();
	const config = EStore.config();
	// if (!bool(config.current_subject))
	// 	return await Alert.small.warning("Please specify current subject.");
	config.levels = TLevels;

	const truth = EStore.truth();
	const missingTxtFiles = await truth.txt.getMissing();
	if (bool(missingTxtFiles))
		return await Alert.small.warning(`Some text files are missing, namely: ${missingTxtFiles.map(_f => _f.name)}`, "Use File Tools Page.");
	if (!(await truth.midi.exists()))
		return await Alert.small.warning(`Couldn't find midi file of truth: "${truth.name}"`, "Use File Tools Page.");

	if (config.isDemoVideo()) {
		const missingNames = [];
		if (!(await truth.mp4.exists()))
			missingNames.push(truth.mp4.name);

		if (!(await truth.onsets.exists()))
			missingNames.push(truth.onsets.name);

		if (bool(missingNames)) {
			const missing = missingNames.length > 1 ? missingNames : missingNames[0];
			console.warn('_startTestIfReady()', { missing });
			return await Alert.small.warning(`Demo type is set to video, I'm missing: ${missing}`, "Use File Tools Page.");
		}
	}

	const { value } = await Alert.big.blocking({
		title: 'Enter Subject',
		input: 'text',
		type: 'question',
		width: '1000px',
		onOpen: htmlElement => {
			const swalContent = htmlElement.querySelector('.swal2-content');
			const swalInput = swalContent.querySelector('.swal2-input');
			swalInput.style.display = 'none';
			const inputDiv = document.createElement('DIV');
			inputDiv.classList.add('input-div', 'swal2-input');
			// swalInput.replaceWith(inputDiv);
			swalContent.appendChild(inputDiv);

			const innerContainer = document.createElement('DIV');
			innerContainer.classList.add('input-div-inner-container');
			inputDiv.appendChild(innerContainer);

			const editableSpan = document.createElement('span');
			editableSpan.classList.add('input-div-editable-span');
			editableSpan.setAttribute('contenteditable', true);
			editableSpan.setInnerText = function (text) {
				swalInput.value = text;
				this.innerText = text;
			};
			innerContainer.appendChild(editableSpan);

			const autocompleteSpan = document.createElement('span');
			autocompleteSpan.classList.add('input-div-autocomplete-span');
			autocompleteSpan.innerText = 'Letters, digits, spaces, under_scores or-dashes. Tab completes, Esc removes suggestion.';
			innerContainer.appendChild(autocompleteSpan);


			inputDiv.style.transition = 'background-color 200ms ease 0s';
			const subjects = EStore.subjects;
			inputDiv.onclick = () => editableSpan.focus();
			inputDiv.onkeydown = (kbevt) => {

				const key = kbevt.key.lower();
				const shouldComplete = (key === 'tab' || key === 'arrowright') && (bool(editableSpan.innerText) || subjects.includes(autocompleteSpan.innerText));
				if (shouldComplete) {
					editableSpan.setInnerText(editableSpan.innerText + autocompleteSpan.innerText);
					autocompleteSpan.innerText = '';
				} else if (key === 'escape') {
					autocompleteSpan.innerText = '';
				}
			};
			editableSpan.oninput = async function (inputevt) {
				let justTyped = inputevt.data;
				const subjectInput = this.innerText;
				if (/[a-zA-Z0-9_ \-]/.test(justTyped)) {
					try {
						inputDiv.style.removeProperty('background-color');
					} catch (e) {
						// no style yet
					}
					const autocomplete = subjects.find(s => s.startsWith(subjectInput));
					autocompleteSpan.innerText = autocomplete ? autocomplete.substr(subjectInput.length) : '';
					swalInput.value = this.innerText;
				} else { // bad char
					this.setInnerText(subjectInput.removeAll(justTyped));
					getCurrentWindow().webContents.sendInputEvent({
						type: 'keyDown',
						keyCode: "End",
					});
					inputDiv.style.backgroundColor = 'lightpink';
					await asx.wait(1000);
					inputDiv.style.removeProperty('background-color');

				}
			};

		},
		onAfterClose: evt => {
			console.log('onAfterClose: ', evt);
		},
		onClose: evt => {
			console.log('onClose: ', evt);
		},
		preConfirm: (evt) => {
			console.log('preConfirm: ', evt);
		},
		inputValidator: value => {
			console.log('inputValidator: ', value);
			if (!bool(value))
				return 'Subject name has to be composed of either letters, digits, under_scores, spaces or-dashes.';
		}
	});
	console.log('value: ', value);
	if (bool(value)) {
		const config = EStore.config();
		config.current_subject = value;
		try {
			PyFns().check_create_new_subject(value);
			require("pyano_local_modules/pages/pages").toPage('inside_test', true);
		} catch (e) {
			console.error(e);
			Alert.small.error(`Something happened while setting subject name: `, e.message);
		}
	}
}


// const _current_subject = EStore.config().current_subject;
// const $subjectSubtitle = $('<div id="page_subtitle_current_subject">')
// 	.html(`Subject: ${bool(_current_subject) ? strong(_current_subject) : '--'}`);

const $truthSubtitle = $('<div>Truth:</div>');


const $savePathSubtitle = $(`<div>Config: ${strong(Path.basename(EStore.config().save_path))}</div>`);
const $subtitle = $('<div class="subtitle" id="page_subtitle">')
	.append(
		// $subjectSubtitle,
		$truthSubtitle,
		$savePathSubtitle,
	);

const $readyBtn = $('<button id="page_ready_btn">')
	.html('Ready')
	.click(_startTestIfReady);

const $saveBtn = $('<button id="page_save_btn">')
	.html("Save")
	.click(async () => {
		$saveBtn.deactivate();
		await StoreFns().saveExperiment();
		$saveBtn.activate();
	});


const $saveAsBtn = $('<button id="page_save_as_btn">')
	.html("Save As...")
	.click(async () => {
		const storeFns = StoreFns();
		// storeFns.saveExperiment();
		storeFns.saveExperimentAs();
	});

const $loadConfigBtn = $('<button id="page_load_config_btn">')
	.html("Load Config...")
	.addClass('active-btn')
	.click(async () => StoreFns().loadExperiment());

$readyBtn.add($saveBtn).add($saveAsBtn)
         .addClass('inactive-btn');


module.exports = {
	toggleButtons,
	toggleInputDiv,
	// setSubjectSubtitle,
	setTruthSubtitle,
	setSavePathSubtitle,
	$readySaveLoadSaveas,
	$subtitle,
};
