// **pages/NewTest/newtest.js

let { EStore } = require("pyano_local_modules/ext_libs");
let { safeSwitchCss, $MainContent, $Sidebar, $Title } = require("pyano_local_modules/document");
let PyFns = require("./PyFns");
let Elements = require("./Elements");
let Gui = require("./Gui");
let { reloadPage, $fadeInMany, $fadeOutMany } = require("pyano_local_modules/util");
let { SubjectPart, LevelsPart, SettingsPart } = require("./Parts/parts");


/**@param {string} mode*/
function _toMode(mode) {
	SettingsPart.toMode(mode);
	LevelsPart.toMode(mode);
}

const newTestPage = {

	/**@param {boolean} reload*/
	switch: async reload => {
		EStore.set({ last_page: 'new_test', 'current_test.finished_trials_count': 0 });
		if (reload)
			return reloadPage();

		await $fadeOutMany(100, $Sidebar, $MainContent);
		$MainContent.empty();
		$MainContent.on({
			'dragover dragenter': e => {
				e.preventDefault();
				e.stopPropagation();
			}, 'drop': async e => await require("./DragDrop").onDrop(e)
		});
		require("pyano_local_modules/sidebar").to_new_test();
		safeSwitchCss("templates/css/new_test.css");
		const truth = EStore.truth();
		const numOfNotes = await truth.numOfNotes();
		// let numOfNotes = EStore.truthFileTotalNotes();
		Gui.setTruthFileSubtitle(truth, numOfNotes);
		let subjectsList = await PyFns.getSubjectDirsNames();
		$MainContent.append(
			Elements.$subtitle,
			SubjectPart.$Div,
			SettingsPart.$Div,
			LevelsPart.$Div,
			...Elements.$btns({ includeLoadBtn: true }),
		);
		require("./StoreFns").setSubjects(subjectsList, { nullifyCurrentIfNotInList: true });
		const learningType = EStore.currentTest().learning_type;
		_toMode(learningType);

		SettingsPart.LearningTypeSetting.setClickFn(e => {
			const accuracyClicked = e.currentTarget.id == SettingsPart.LearningTypeSetting.$first[0].id;
			let mode = accuracyClicked
			           ? "accuracy"
			           : "tempo";
			_toMode(mode);
		});
		await $fadeInMany(300, $Sidebar, $MainContent);
	}

};
module.exports = newTestPage;
