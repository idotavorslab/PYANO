// **pages/NewTest/newtest.js

let { EStore } = require("pyano_local_modules/ext_libs");
let { safeSwitchCss, $MainContent, $Sidebar, $Title } = require("pyano_local_modules/document");
let PyFns = require("./PyFns");
let Elements = require("./Elements");
let Gui = require("./Gui");
let { $fadeInMany, $fadeOutMany } = require("pyano_local_modules/util");
let { SubjectPart, LevelsPart, SettingsPart } = require("./Parts/parts");
let { remote } = require("electron");

/**@param {String} mode*/
function _toMode(mode) {
	SettingsPart.toMode(mode);
	LevelsPart.toMode(mode);
}

const newTestPage = {

	/**@param {Boolean} reload*/
	switch: async (reload) => {
		EStore.set('last_page', 'new_test');
		if (reload) {
			const currentWindow = remote.getCurrentWindow();
			currentWindow.reload();
		}
		await $fadeOutMany(100, $Sidebar, $MainContent, $Title);
		$MainContent.empty();
		require("pyano_local_modules/sidebar").to_new_test();
		safeSwitchCss("templates/css/new_test.css");
		let numOfNotes = EStore.truthFileTotalNotes();
		Gui.setTruthFileSubtitle(EStore.truthFileName({ withExtension: false }), numOfNotes);
		let subjectsList = await PyFns.getSubjectDirsNames();
		EStore.set("current_test.finished_trials_count", 0);
		$MainContent.append(
			Elements.$subtitle,
			SubjectPart.$Div,
			SettingsPart.$Div,
			LevelsPart.$Div,
			...Elements.$btns({ includeLoadBtn: true }),
		);
		require("./StoreFns").setSubjects(subjectsList, { nullifyCurrentIfNotInList: true });
		const learningType = EStore.currentTest().learning_type;
		_toMode(learningType);

		SettingsPart.LearningTypeSetting.setClickFn(e => {
			const accuracyClicked = e.currentTarget.id == SettingsPart.LearningTypeSetting.$first[0].id;
			let mode = accuracyClicked
			           ? "accuracy"
			           : "tempo";
			_toMode(mode);
		});
		await $fadeInMany(300, $Sidebar, $MainContent);
	}

};
module.exports = newTestPage;
