// **pages/InsideTest/index.js
let { safeSwitchCss, $MainContent, $Title } = require("pyano_local_modules/document");
let { EStore } = require("pyano_local_modules/ext_libs");
let PyFns = require("./PyFns");
const Pages = () => require("pyano_local_modules/pages/pages");
let {
	$fadeIn, $fadeOut, $fadeOutMany, Alert, bool,
	concurrent, date2datetime, mkdir, path_exists, reload, reloadPage,
} = require('pyano_local_modules/util');
let { $pageSubtitle, $bigMessage, $smallMessage, $smallMessageSecondary, $bigButton, animation, video } = require("./Gui");
const Gui = require("./Gui");
let { Midi, toMidiFromMessages } = require("pyano_local_modules/gilad");
let Piano = require("pyano_local_modules/gilad/Piano");
const fs = require("fs");
const Path = require("path");
const { $Sidebar } = require("pyano_local_modules/document");
const log = (s, b = false) => [`insidetest.%c${s}`, `color: #58a4c8${b ? ';font-weight:900' : ''}`];

/**@param {Midi} midi
 @param {Piano} playbackPiano
 @return {Promise<String>}*/
async function _runTrial(midi, playbackPiano) {
	console.log(...log('_runTrial()'));
	let { levels, finished_trials_count } = EStore.currentTest();
	Gui.updateLevelTrialSubtitles(levels);

	let [levelIndex, trialIndex] = EStore.currentTrialCoords();
	let numOfNotes;
	if (EStore.isLearningTempo()) {
		numOfNotes = EStore.truthFileTotalNotes();
	} else {
		numOfNotes = levels[levelIndex].notes;
	}

	// No pre trial demo if just started in video + tempo mode. Video already played everything the user needs
	const withPreTrialDemo = !(EStore.isDemoVideo() && finished_trials_count == 0 && EStore.isLearningTempo());
	if (withPreTrialDemo)
		await Gui.playPreTrialDemo(midi, playbackPiano, levelIndex, trialIndex, numOfNotes);
	await Gui.$promptIn(numOfNotes);

	const trialFilePathNoExt = EStore.trialFilePath();
	await midi.newTxtStreamAndMaybeLoadUserPiano(`${trialFilePathNoExt}.txt`);
	return trialFilePathNoExt;

}


/**@param {Midi} midi
 @param {Piano} playbackPiano
 @param {string} trialFilePathNoExt
 @return {Promise<Boolean>}*/
async function _handleDoneTrial(midi, playbackPiano, trialFilePathNoExt) {
	console.log(...log('_handleDoneTrial()'));

	let messages = await PyFns.normalizeTxtFile(`${trialFilePathNoExt}.txt`);
	await midi.endTxtAndWriteMidi(messages, `${trialFilePathNoExt}.mid`);
	let { passed, mistakes } = await PyFns.checkDoneTrial();

	const badAccuracyInTempo = bool(mistakes)
	                           && 'note'.in(mistakes)
	                           && EStore.isLearningTempo();
	let trialIndex = EStore.currentTrialCoords()[1];
	if (passed) {
		await Gui.showPassedTrialFeedback(midi, playbackPiano, trialIndex);
	} else { // did not pass

		await Gui.showFailedTrialFeedback(midi, playbackPiano, trialIndex, mistakes);
	}

	if (!badAccuracyInTempo) {
		// don't increase if got wrong acc in tempo mode
		EStore.increase("current_test.finished_trials_count");
	} else {
		let failIndex = 0;
		console.log(`Trying to rename ${trialFilePathNoExt} with failIndex: ${failIndex}`);
		let newPath = `${trialFilePathNoExt}_ACCFAIL_${failIndex}`;
		let newPathExists = await path_exists(`${newPath}.txt`);
		while (newPathExists) {

			failIndex += 1;
			console.log(`\tFile exists, trying failIndex: ${failIndex}`);
			newPath = `${trialFilePathNoExt}_ACCFAIL_${failIndex}`;
			newPathExists = await path_exists(`${newPath}.txt`);
		}
		console.log(`\trenaming to: ${newPath}`);
		fs.renameSync(`${trialFilePathNoExt}.txt`, `${newPath}.txt`);
		fs.renameSync(`${trialFilePathNoExt}.mid`, `${newPath}.mid`);
	}
}

async function _maybeCreateOutputDir() {
	console.log(...log('_maybeCreateOutputDir()'));
	const outputDir = EStore.testOutPath();
	let exists = await path_exists(outputDir);
	if (!exists)
		await mkdir(outputDir + '/', { recursive: true });

	else
		fs.stat(outputDir, async (err, stats) => {

			let datestr = date2datetime(stats.birthtime);
			await fs.renameSync(outputDir, `${outputDir}_${datestr}`);
			await mkdir(outputDir + '/', { recursive: true });


		});


}

/**@param {Midi} midi
 @param {string} filePathNoExt*/
async function _maybeWriteMidiFileFromTxt(midi, filePathNoExt) {
	console.log(...log('_maybeWriteMidiFileFromTxt()'));
	let txtExists = await path_exists(`${filePathNoExt}.txt`);
	if (!txtExists)
		throw new Error(`.txt file does not exist. This function converts .txt files to .mid.\n${filePathNoExt}`);
	let midExists = await path_exists(`${filePathNoExt}.mid`);
	if (midExists) // good
		return;


	let messages = await PyFns.normalizeTxtFile(`${filePathNoExt}.txt`);
	await toMidiFromMessages(messages, `${filePathNoExt}.mid`);
}

async function _maybeAlertNoVideo(truthPathNoExt) {
	console.log(...log('_maybeAlertNoVideo()'));
	if (!EStore.isDemoVideo())
		return;
	let mp4exists = await path_exists(`${truthPathNoExt}.mp4`);
	if (mp4exists)
		return; // good
	let movexists = await path_exists(`${truthPathNoExt}.mov`);
	let html = movexists
	           ? `Looks like a .mov file exists though. Go to File Tools?`
	           : `A .mov file doesn't exist either. Switch to Animation mode?`;
	let { value } = await Alert.big.blocking({
		title: `Can't find a video file: ${truthPathNoExt}.mp4`,
		html,
		showCancelButton: false
	});

	if (value) {
		if (movexists) {
			Pages().fileToolsPage.switch(true);
		} else {
			EStore.setDemoType('animation');
			reload();
		}
	}

}

async function _maybeCreateOnsetsJson(truthPathNoExt) {
	console.log(...log('_maybeCreateOnsetsJson()'));
	if (EStore.isLearningTempo() || !EStore.isDemoVideo())
		return;
	let onsetsJsonPath = `${truthPathNoExt}_onsets.json`;
	let onsetsJsonName = Path.basename(onsetsJsonPath);
	let exists = await path_exists(onsetsJsonPath);

	if (!exists) {
		console.log('\tonsetsJson !exists');
		let { value } = await Alert.big.blocking({
			title: `Can't find onsets file: ${onsetsJsonName}`,
			html: 'You will be redirected to File Tools page',
			showCancelButton: false,
		});
		return Pages().fileToolsPage.switch(true);

	} else {
		console.log('\tonsetsJson exists');
		let data = JSON.parse(await fs.readFileSync(onsetsJsonPath));
		if (("onsets" in data) && ("first_onset_index" in data))
			return;

		console.log('\tonsets file doesnt have both "onsets" and "first_onset_index" keys');
		let { value } = await Alert.big.blocking({
			title: `Onsets file seems currupt: ${onsetsJsonName}`,
			html: 'You will be redirected to File Tools page',
			showCancelButton: false
		});
		return Pages().fileToolsPage.switch(true);


	}


}

const insideTestPage = {
	switch: async reload => {
		console.log(...log(`insideTestPage.switch(${reload})`));
		await $fadeOutMany(100, $MainContent, $Sidebar, $Title);

		EStore.set({ last_page: 'inside_test', dev: false, 'current_test.finished_trials_count': 0 });
		if (reload)
			reloadPage();

		Alert.small.info('Checking for missing files...');
		const truthPathNoExt = EStore.truthFilePath();
		let current_test = EStore.currentTest();
		let { finished_trials_count, levels } = current_test;
		// user plays it, does all the txt/mid writing, its "playMidiFile" fn is passed playbackPiano
		let midi = new Midi({ name: 'insidetest.midi', muteUserPiano: true });
		// passed to midi "playMidiFile" fn and passively plays the midi animation
		let playbackPiano = new Piano(`file:///${EStore.salamanderDirPath()}`, 'insidetest.playbackPiano', [21, 108], 5).toMaster();
		playbackPiano.load();
		await concurrent(
			_maybeCreateOutputDir(),
			_maybeWriteMidiFileFromTxt(midi, truthPathNoExt),
			_maybeAlertNoVideo(truthPathNoExt),);

		// Video file exists for sure because of _maybeAlertNoVideo
		await _maybeCreateOnsetsJson(truthPathNoExt);
		$MainContent.empty();
		require("pyano_local_modules/sidebar").to_inside_test();
		safeSwitchCss("templates/css/inside_test.css");
		if (EStore.isDemoVideo())
			video.init();
		$MainContent.append(
			$pageSubtitle,
			$bigMessage,
			$smallMessage,
			$smallMessageSecondary,
			$bigButton,
			animation.$element,
			video.$element);

		$Title.text(`testing ${current_test.current_subject}`.title());
		Gui.updateLevelTrialSubtitles(levels);
		await $fadeIn($MainContent, 300);


		if (finished_trials_count == 0)
			await Gui.playWholeTruthDemo(midi, playbackPiano);

		let trialFilePathNoExt = await _runTrial(midi, playbackPiano);

		Gui.$bigButton
		   .click(async () => {
			   console.log(...log('$bigButton clicked', true));
			   let { size } = fs.lstatSync(`${trialFilePathNoExt}.txt`);
			   if (size == 0) {
				   Alert.small.warning('Please play something');
				   return;
			   }
			   // ***_handleDoneTrial  (Gui.showPassedTrialFeedback | Gui.showFailedTrialFeedback)
			   await _handleDoneTrial(midi, playbackPiano, trialFilePathNoExt);

			   if (!EStore.isWholeTestOver()) {
				   console.log(...log('Test aint over!'));
				   // ***_runTrial
				   trialFilePathNoExt = await _runTrial(midi, playbackPiano);
				   // No more logic - user should click $bigButton

			   } else {
				   playbackPiano.dispose();
				   // ***Gui.showTestCompleteMessages
				   await Gui.showTestCompleteMessages();
			   }
		   });


	}
};
module.exports = insideTestPage;
