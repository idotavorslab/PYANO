// **pages/InsideTest/index.js
let { safeSwitchCss, $MainContent, $Title } = require("pyano_local_modules/document");
let { EStore } = require("pyano_local_modules/ext_libs");
let PyFns = require("./PyFns");
// let sidebar = require("pyano_local_modules/sidebar");
let { mkdir, path_exists, $fadeIn, $fadeOut, bool, concurrent, date2datetime } = require('pyano_local_modules/util');
let { $pageSubtitle, $bigMessage, $smallMessage, $smallMessageSecondary, $bigButton, animation, video } = require("./Gui");
const Gui = require("./Gui");
let { Midi, toMidiFromMessages } = require("pyano_local_modules/gilad");
let Piano = require("pyano_local_modules/gilad/Piano");
const fs = require("fs");

/**@param {Midi} midi
 @param {Piano|Tone.AudioNode} playbackPiano
 @return {Promise<String>}*/
async function _runTrial(midi, playbackPiano) {
	console.log('%c_runTrial()', 'color:#58a4c8');
	let { levels } = EStore.currentTest();
	Gui.updateLevelTrialSubtitles(levels);

	let [levelIndex, trialIndex] = EStore.currentTrialCoords();
	let numOfNotes;
	if (EStore.isLearningTempo()) {
		numOfNotes = EStore.truthFileTotalNotes();
	} else {
		numOfNotes = levels[levelIndex].notes;
	}

	await Gui.playPreTrialDemo(midi, playbackPiano, levelIndex, trialIndex, numOfNotes);

	const trialFilePathNoExt = EStore.trialFilePath();
	await midi.newTxtStreamAndMaybeLoadUserPiano(`${trialFilePathNoExt}.txt`);
	return trialFilePathNoExt;

}


/**@param {Midi} midi
 @param {Piano|Tone.AudioNode} playbackPiano
 @param {String} trialFilePathNoExt
 @return {Promise<Boolean>}*/
async function _handleDoneTrial(midi, playbackPiano, trialFilePathNoExt) {
	console.log('%c_handleDoneTrial()', 'color:#58a4c8');
	let messages = await PyFns.normalizeTxtFile(`${trialFilePathNoExt}.txt`);
	await midi.endTxtAndWriteMidi(messages, `${trialFilePathNoExt}.mid`);
	let { passed, mistakes } = await PyFns.checkDoneTrial();

	const badAccuracyInTempo = bool(mistakes)
	                           && 'note'.in(mistakes)
	                           && EStore.isLearningTempo();
	let trialIndex = EStore.currentTrialCoords()[1];
	if (passed) {
		await Gui.showPassedTrialFeedback(midi, playbackPiano, trialIndex);
	} else { // did not pass

		await Gui.showFailedTrialFeedback(midi, playbackPiano, trialIndex, mistakes);
	}

	if (!badAccuracyInTempo) {
		// don't increase if got wrong acc in tempo mode
		EStore.increase("current_test.finished_trials_count");
	} else {
		let failIndex = 0;
		console.log(`Trying to rename ${trialFilePathNoExt} with failIndex: ${failIndex}`);
		let newPath = `${trialFilePathNoExt}_ACCFAIL_${failIndex}`;
		let newPathExists = await path_exists(`${newPath}.txt`);
		while (newPathExists) {
			failIndex += 1;
			console.log(`\tFile exists, trying failIndex: ${failIndex}`);
			newPath = `${trialFilePathNoExt}_ACCFAIL_${failIndex}`;
			newPathExists = await path_exists(`${newPath}.txt`);
		}
		console.log(`\trenaming to: ${newPath}`);
		fs.renameSync(`${trialFilePathNoExt}.txt`, `${newPath}.txt`);
		fs.renameSync(`${trialFilePathNoExt}.mid`, `${newPath}.mid`);
	}
}

async function _safeCreateOutputDir() {
	console.log('%c_safeCreateOutputDir()', 'color:#58a4c8');
	const outputDir = EStore.testOutPath();
	let exists = await path_exists(outputDir);
	if (!exists) {
		await mkdir(outputDir + '/', { recursive: true });

	} else {
		fs.stat(outputDir, async (err, stats) => {

			let datestr = date2datetime(stats.birthtime);
			fs.renameSync(outputDir, `${outputDir}_${datestr}`);
			await mkdir(outputDir + '/', { recursive: true });


		});
	}


}


/**@param {Midi} midi
 @param {String} filePathNoExt*/
async function _maybeWriteMidiFileFromTxt(midi, filePathNoExt) {
	console.log('%c_maybeWriteMidiFileFromTxt()', 'color:#58a4c8');
	let txtExists = await path_exists(`${filePathNoExt}.txt`);
	if (!txtExists)
		throw new Error(`.txt file does not exist. This function converts .txt files to .mid.\n${filePathNoExt}`);
	let midExists = await path_exists(`${filePathNoExt}.mid`);
	if (midExists) // good
		return;

	let messages = await PyFns.normalizeTxtFile(`${filePathNoExt}.txt`);
	await toMidiFromMessages(messages, `${filePathNoExt}.mid`);
}

async function _maybeTrimVideoFromTruth(truthPathNoExt) {
	if (EStore.isLearningTempo() || !EStore.isDemoVideo())
		return;
	const notes = EStore.numOfNotesCurrLevel();
}

const insideTestPage = {
	switch: async () => {
		console.log('%cinsideTestPage.switch()', 'color:#58a4c8');
		EStore.set({ last_page: 'inside_test', dev: false });

		const truthPathNoExt = EStore.truthFilePath();
		let current_test = EStore.currentTest();
		let { finished_trials_count, levels } = current_test;
		let midi = new Midi({ muteUserPiano: false });
		let playbackPiano = new Piano(`file:///${EStore.salamanderDirPath()}`, [21, 108], 5).toMaster();
		playbackPiano.load();
		await concurrent(
			_maybeWriteMidiFileFromTxt(midi, truthPathNoExt),
			_maybeTrimVideoFromTruth(truthPathNoExt),
			_safeCreateOutputDir(),
			$fadeOut($MainContent, 100));

		$MainContent.empty();
		require("pyano_local_modules/sidebar").to_inside_test();
		safeSwitchCss("templates/css/inside_test.css");
		$MainContent.append(
			$pageSubtitle,
			$bigMessage,
			$smallMessage,
			$smallMessageSecondary,
			$bigButton,
			animation.$element,
			video.$element);

		$Title.text(`testing ${current_test.current_subject}`.title());
		Gui.updateLevelTrialSubtitles(levels);
		await $fadeIn($MainContent, 300);

		// ***Gui.playWholeTruthDemo
		if (finished_trials_count == 0)
			await Gui.playWholeTruthDemo(midi, playbackPiano);
		// ***_runTrial (Gui.playPreTrialDemo)
		let trialFilePathNoExt = await _runTrial(midi, playbackPiano);

		Gui.$bigButton
		   .click(async () => {
			   console.log('%c$bigButton clicked', 'color:#58a4c8');
			   // ***_handleDoneTrial  (Gui.showPassedTrialFeedback | Gui.showFailedTrialFeedback)
			   await _handleDoneTrial(midi, playbackPiano, trialFilePathNoExt);

			   if (!EStore.isWholeTestOver()) {
				   console.log('Test aint over!');
				   // ***_runTrial
				   trialFilePathNoExt = await _runTrial(midi, playbackPiano);
				   // No more logic - user should click $bigButton

			   } else {
				   playbackPiano.dispose();
				   // ***Gui.showTestCompleteMessages
				   await Gui.showTestCompleteMessages();
			   }
		   });


	}
};
module.exports = insideTestPage;
