let { Python, EStore } = require("pyano_local_modules/ext_libs");
const log = s => [`üêç PyFns.%c${s}`, 'color:#698651'];


/**@param {Truth} truth
 * @param {Truth} trialTruth
 * @return {Promise<TDoneTrialResult>}*/
function check_done_trial(truth, trialTruth) {
	console.log(...log('check_done_trial(truth, trialTruth)'));
	return new Promise((resolve, reject) => {

		const { allowed_rhythm_deviation } = EStore.currentTest();
		const current_level = EStore.getCurrentLevel();

		const args = [allowed_rhythm_deviation, trialTruth.txt.on.path,
		              truth.txt.on.path, JSON.stringify(current_level)];
		console.log(...log('\tcheck_done_trial, sending args in json mode: '), args);
		Python.run('InsideTest/check_done_trial.py', {
				args,
				mode: "json"
			},
			async (err, output) => {
				if (err) {
					reject(err);
				}
				let { passed, mistakes, played_enough_notes, played_too_many_notes, advance_trial, tempo } = output[0];
				console.log(...log('\tcheck_done_trial resolving'), {
					passed,
					mistakes,
					played_enough_notes,
					played_too_many_notes,
					advance_trial, tempo
				});
				resolve({ passed, mistakes, played_enough_notes, played_too_many_notes, advance_trial, tempo });

			});


	});
}

/**Also chord-normalizes txt on path.
 @param {Truth} truth
 @return {Promise<{on_msgs:TMessage[], off_msgs:TMessage[], on_off_pairs:TOnOffPairs, all_msgs:TMessage[]}>}*/
async function merge_on_off_txt_files(truth) {
	console.log(...log('merge_on_off_txt_files(truth)'));
	let msgs = await Python.runAsync('InsideTest/merge_on_off_txt_files.py', {
		args: [truth.txt.base.path, truth.txt.on.path, truth.txt.off.path],
		mode: "json"
	});
	let { all_msgs, on_msgs, off_msgs, on_off_pairs } = msgs[0];
	return { all_msgs, on_msgs, off_msgs, on_off_pairs };
}

module.exports = {
	check_done_trial,
	merge_on_off_txt_files
};
