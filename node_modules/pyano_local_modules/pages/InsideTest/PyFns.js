// **pages/InsideTest/PyFns.js
let { Python, EStore } = require("pyano_local_modules/ext_libs");


/**@return {Promise<{ passed: Boolean, mistakes: String[] }>}*/
function checkDoneTrial() {
	console.log(`%cPyFns.checkDoneTrial()`, 'color:#698651');
	return new Promise((resolve, reject) => {

		const full_truth_file_path = EStore.truthFilePath('txt');
		const trial_file_path = EStore.trialFilePath('txt');
		const { learning_type, allowed_tempo_deviation_factor } = EStore.currentTest();
		const num_of_notes_to_test = EStore.numOfNotesCurrLevel();
		Python.run('InsideTest/check_done_trial.py', {
				args: [JSON.stringify({
					learning_type,
					allowed_tempo_deviation_factor,
					trial_file_path,
					full_truth_file_path,
					num_of_notes_to_test
				})],
				mode: "json"
			},
			async (err, output) => {
				if (err) {
					reject(err);
				}
				let { passed, mistakes } = output[0];
				console.log(`\t%ccheckDoneTrial resolving`, 'color:#698651', { passed, mistakes });
				resolve({ passed, mistakes });

			});


	});
}


/** @param {String} txtFilePath
 @return {Promise<TMessage[]>} */
async function normalizeTxtFile(txtFilePath) {
	console.log(`%cPyFns.normalizeTxtFile()`, 'color:#698651', { txtFilePath });
	return await Python.runAsync('InsideTest/normalize_txt_file.py', { args: [txtFilePath], mode: "json" });
	/*return new Promise((resolve, reject) => {

		let shell = new Python('InsideTest/normalize_txt_file.py', {
			args: [txtFilePath],
		});
		shell.on('message', async ({ messages }) => {
			resolve(messages);
		});
		shell.on('error', reject);
	});
	*/

}


module.exports = {
	normalizeTxtFile,
	checkDoneTrial,
};
