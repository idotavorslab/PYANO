const $ = require('jquery');
let { strong } = require("pyano_local_modules/util");
let { EStore } = require("pyano_local_modules/ext_libs");
const Svg = require("./Svg");
const fs = require("fs");

const { $Sidebar } = require("pyano_local_modules/document");

let PyFns = require("./PyFns");
const log = (s, { b, sm } = {}) => [`🎨 %c${s}`,
                                    `color: #a147ad; ${b ? 'font-weight:900;' : ''} ${sm ? 'font-size:10px;' : ''}`];
const logmod = (s, { b, sm } = {}) => [`🎨 Gui.%c${s}`, `color: #a147ad; ${b ? 'font-weight:900;' : ''} ${sm ? 'font-size:10px;' : ''}`];

const F = 1;
if (F != 1) console.warn('F is not 1, it is: ', F);

class Messages {
	/**@param {TMessage[]} msgs*/
	constructor(msgs) {
		/**@type {TMessage[]}*/
		this._msgs = msgs;
	}

	/**@return {Object<number,number[]>}*/
	// chords() {
	// 	let chords = {};
	// 	for (let [i, message] of enumerate(this._msgs)) {
	// 		if (message.time_delta == null) continue;
	// 		if (message.time_delta <= 0.05) {
	// 			if (!bool(chords)) {
	// 				chords[i - 1] = [i];
	// 				continue;
	// 			}
	// 			let last_key = chords.keys().last();
	// 			/**@type {number[]}*/
	// 			let last_value = chords[last_key];
	//
	// 			if (last_key == i - 1 || last_value.includes(i - 1))
	// 				chords[last_key].push(i);
	// 			else
	// 				chords[i - 1] = [i];
	//
	// 		}
	// 	}
	// 	return chords;
	// }

	/*_numofChordedNotes(upTo) {
		let numofChordedNotes = 0;
		let chords = this.chords();
		let roots = chords.keys();
		for (let root of roots) {
			if (root <= upTo) // yes lower equal
				numofChordedNotes += chords[root].length;
			else
				break; // OrderedDict;
		}
		return numofChordedNotes;
	}
	*/

	/**@param {number} numOfNotes
	 @return {number[]}*/
	time_deltas(numOfNotes) {
		/*const numofChordedNotes = this._numofChordedNotes(numOfNotes);
		const end = numOfNotes + 1 + numofChordedNotes;
		console.log(`\t\tMessages.time_deltas numofChordedNotes: `, numofChordedNotes, 'end: ', end);
		*/
		// const numofChordedNotes = this._numofChordedNotes(numOfNotes);
		const end = numOfNotes + 1;
		console.log(`\tMessages.time_deltas, numOfNotes:`, numOfNotes, 'end:', end);
		let time_deltas = this._msgs.slice(0, end).map(msg => msg.time_delta);
		if (numOfNotes >= this._msgs.length) {
			// if user specified as much notes as in txt file, add a fake "last note" lasting 1 second
			// this is to prevent cropping of last note (compensate for lack of "time_delta")
			time_deltas.push(1);
		} else {
			// user specified some notes, not all of them
			// shorten last note a bit so the beginning of the last one won't be heard
			// time_deltas[time_deltas.length - 1] -= 0.1; // same as audio fadeout dur
			time_deltas[time_deltas.length - 1] -= 0.10; // same as audio fadeout dur
		}
		return time_deltas;
	}
}

class Video {
	/**@param {jQuery} $video*/
	constructor($video) {
		this.$element = $video;
		this.firstOnset = null;
	}

	/**@param {Truth} truth*/
	async init(truth) {
		let vidsrcfile = `file:///${truth.mp4.path}`;
		let src = `<source src="${vidsrcfile}" type="video/mp4">`;
		this.$element.append(src);
		let data = await fs.readFileSync(truth.onsets.path);
		/**@type {{onsets:string[],first_onset_index:number}}*/
		data = JSON.parse(data);
		console.log('Video.data from onsets.json', { data });
		this.firstOnset = float(data.onsets[data.first_onset_index]);
		this.lastOnset = float(data.onsets.last());
		// this.on_messages = new Messages(await Python.runAsync('InsideTest/normalize_txt_file.py', {
		// 	args: [truth.txt.on.path],
		// 	mode: "json"
		// }));
		let { on_msgs, off_msgs, on_off_pairs } = await PyFns.merge_on_off_txt_files(truth);
		/**@type {Messages}*/
		this.on_messages = new Messages(on_msgs);
		/**@type {Messages}*/
		this.off_messages = new Messages(off_msgs);
		/**@type {TOnOffPairs}*/
		this.on_off_pairs = on_off_pairs;

		const events = [
			'canplay',  // not enough data has been loaded to play the media up to its end
			'canplaythrough', // can play the media up to its end
			'emptied',
			'ended', // reached end
			'loadeddata', // first frame of media has finished loading
			'loadedmetadata',
			'play', // Playback has begun
			'playing', // Playback is ready to start after having been paused or delayed due to lack of data.
			'stalled', // trying to fetch media data, but is not coming
			'suspend', // Media data loading has been suspended.
			'waiting', // stopped because of a temporary lack of data
		];
		for (let ev of events) {
			const evFired = `${ev}Fired`;
			this[evFired] = false;
			this.vidElm[`on${ev}`] = () => this[evFired] = true;
		}
		// this.vidElm.addEventListener('mousedown', e => {
		// 	console.log('%cvideo mousedown', 'color:#de7d36', { isTrusted: e.isTrusted });
		// 	this.vidElm.play();
		// }, { once: true });
		// this.vidElm.onmousedown = e => {
		// 	console.log('%cvideo mousedown', 'color:#de7d36', { isTrusted: e.isTrusted });
		// 	this.vidElm.play();
		// };

	}

	_promiseMousedown() {
		console.log(...small('_promiseMousedown() started'));
		return new Promise(resolve =>
			this.vidElm.addEventListener('mousedown', e => {
				console.log('%cvideo mousedown', 'color:#de7d36', { isTrusted: e.isTrusted });
				console.log(...small('_promiseMousedown() resolving'));
				resolve();
			}, { once: true }));
	}

	_promisePlaying() { // TODO: This is not really working
		console.log(...small('_promisePlaying() started'));
		return new Promise(resolve =>
			this.vidElm.onplaying = () => {
				console.log(...small('_promisePlaying() resolving'));
				this.vidElm.onplaying = null;
				resolve();
			});
	}

	_promiseEnded() { // on err
		console.log(...small('_promiseEnded() started'));
		return new Promise(resolve => this.vidElm.onended = () => {
			console.log(...small('_promiseEnded() resolving'));
			this.vidElm.onended = null;
			resolve();
		});
	}

	setCurrentTimeToFirstOnset() {
		console.log(...small('setCurrentTimeToFirstOnset(): ', this.firstOnset - 0.1));
		this.vidElm.currentTime = this.firstOnset - 0.1;
	}

	async _fakeMousedown() {
		console.log(...small('Faking mousedown...'));
		this.$element.css('z-index', 2000);
		let { remote } = require("electron");
		// noinspection JSUnresolvedFunction
		remote.getCurrentWindow().webContents.sendInputEvent({
			type: 'mouseDown',
			x: 1000,
			y: 500,
			button: 'left',
		});
		await asx.wait(100);
		this.$element.css('z-index', -1);

	}

	_promiseReady() {
		console.log('_promiseReady() started');
		return new Promise(resolve => this.vidElm.onloadeddata = () => {
			console.log('_promiseReady() resolving');
			resolve();
		});
	}


	_promiseFadeIn() {
		console.log(...small('_promiseFadeIn()'));
		if (this.vidElm.volume != 0)
			console.warn('_promiseFadeIn volume not 0, it is: ', this.vidElm.volume);
		return new Promise(resolve => this.$element.animate({ volume: 1 }, 50, resolve));
	}

	_promiseFadeOut() {
		console.log(...small('_promiseFadeOut()'));
		if (this.vidElm.volume != 1)
			console.warn('_promiseFadeOut volume not 1, it is: ', this.vidElm.volume);
		return new Promise(resolve => this.$element.animate({ volume: 0 }, 0, resolve));
	}

	_logEvents() {
		console.group(...small('_logEvents()'));
		for (let [evprop, val] of enumerate(this))
			if (evprop.endsWith('Fired')) {
				const strings = small(evprop.upTo('Fired'));
				if (val)
					console.log(...strings, val);
				else
					console.log(...strings);

				this.evprop = false;
			}
		console.groupEnd();
	}

	/**@return {HTMLMediaElement}*/
	get vidElm() {
		return this.$element[0];
	}

	/**@param {number} numOfNotes
	 @param {number} playbackRate*/
	async _getWaitValue(numOfNotes, playbackRate) {
		let waitValue;
		let logData = {};
		if (numOfNotes == null) {
			throw new TypeError("_getWaitValue got numOfNotes == null");
			if (this.lastOnset < this.vidElm.duration) {
				let diff = this.vidElm.duration - this.lastOnset;
				diff = min(1.5, diff);
				logData = { ...logData, diff };
				waitValue = 1000 * (this.lastOnset + diff - this.firstOnset);
			} else {
				waitValue = 1000 * (this.vidElm.duration - this.firstOnset);
			}


		} else {
			// let on_tdeltas = this.on_messages.time_deltas(numOfNotes);
			// let off_tdeltas = this.off_messages.time_deltas(numOfNotes);
			let relevant_pairs = this.on_off_pairs.slice(0, numOfNotes + 1);

			// waitValue = sum(on_tdeltas) * 1000;
			waitValue = (relevant_pairs.last()[0].time - relevant_pairs[0][0].time) * 1000;
			waitValue /= playbackRate;
			// this is equal to on_sliced = this.on_messages._msgs.slice(0,numOfNotes+1); on_sliced.last().time - on_sliced[0].time


		}
		console.log(`_getWaitValue(numOfNotes =`, numOfNotes, ', playbackRate =', playbackRate, ') ->', {
			waitValue,
			'this.vidElm.currentTime': this.vidElm.currentTime
		});
		return waitValue;
	}

	/**@param {number} numOfNotes
	 @param {number} playbackRate
	 @return {Promise<void>}*/
	async play(numOfNotes, playbackRate) {
		console.group(`🎨 Video.play(numOfNotes =`, numOfNotes, 'playbackRate =', playbackRate, ')');
		if (playbackRate <= 0 || playbackRate > 1)
			throw new Error(`playbackRate is le 0 OR gt 1, playbackRate: ${playbackRate}`);
		const { canplaythroughFired, loadeddataFired } = this;
		if (!canplaythroughFired || !loadeddataFired) {
			console.log('\t!canplaythroughFired || !loadeddataFired, calling load()');
			EStore.increase('counters.pages.InsideTest.Video.play.no_playthrough_or_no_loadeddata');
			this.vidElm.load();
			await this._promiseReady();
		}
		this.vidElm.volume = 0;
		this.vidElm.playbackRate = playbackRate;
		let waitValue = await this._getWaitValue(numOfNotes, playbackRate);
		await this._fakeMousedown();
		console.log(`concurrent play, promiseFadeIn, waitValue =`, waitValue);
		await asx.concurrent(this.vidElm.play(), this._promiseFadeIn(), asx.wait(waitValue));
		await this._promiseFadeOut();
		await this.vidElm.pause();


		console.groupEnd();
	}


}

class Animation {
	/**@param {jQuery} $animation*/
	constructor($animation) {
		/**@type {jQuery}*/
		this.$element = $animation;
		let svgs = [];
		for (let i of range(0, 51)) {
			if (i == 0) {
				svgs.push(Svg.blackRight);
				continue;
			} else if (i == 51) {
				svgs.push(Svg.base);
				continue;
			}
			let searchElement = i % 7;
			if ([2, 5].includes(searchElement))
				svgs.push(Svg.blackRight);
			else if ([1, 4, 8].includes(searchElement))
				svgs.push(Svg.blackLeft);
			else // [0, 3, 6, 7]
				svgs.push(Svg.blackBoth);
		}
		this.$element.append(svgs);

	}

	/**@param {number} note*/
	_note2svgIndex(note) {
		let scaleStart = int(note / 12) * 7 - 11;
		let indexInScale = note % 12;
		let index = scaleStart + [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6][indexInScale];
		if (![0, 2, 4, 5, 7, 9, 11].includes(indexInScale))
			return [index, index + 1];
		return index;

	}

	/**
	 @param {number} note
	 @param {number} noteDuration
	 @param {string} fill
	 * */
	async markKey(note, noteDuration, fill) {
		return new Promise(async resolve => {
			let index = this._note2svgIndex(note);
			let $toMark, baseFill;
			let $children = this.$element.children();
			if (index.length != undefined) { // [3,4] for example
				let [indexLeft, indexRight] = index;
				let $keyLeft = $children.filter(`svg:nth-child(${indexRight})`).children(`.piano-black-left-rect`);
				let $keyRight = $children.filter(`svg:nth-child(${indexLeft})`).children(`.piano-black-right-rect`);
				$toMark = $keyLeft.add($keyRight);
				baseFill = 'black';
			} else { // 3
				$toMark = $children.filter(`svg:nth-child(${index})`).children(`.piano-white-rect`);
				baseFill = 'white';
			}
			$toMark.css({ fill });
			await asx.wait(noteDuration);
			$toMark.css({ fill: baseFill });
			resolve();


		});

	}


}

/**
 * Fades in [$big] $small [$secondary], fades out $big, $small, [$secondary]
 * @param {boolean} includeSecondary
 * @param {boolean} fadeInBigMsg
 * @return {Promise<void>}
 */
async function _$messagesInAndOut({ includeSecondary = true, fadeInBigMsg = true }) {
	console.log(...log('\t_$messagesInAndOut()'));
	if (fadeInBigMsg)
		await asx.$fadeIn($bigMessage, 700 * F);
	await asx.$fadeIn($smallMessage, 700 * F);
	if (includeSecondary) {
		await asx.wait(700 * F);
		await asx.$fadeIn($smallMessageSecondary, 700 * F);
	}
	await asx.wait(1500 * F);
	let $messages = [$smallMessage];
	if (includeSecondary)
		$messages.push($smallMessageSecondary);
	// if (fadeInBigMsg)
	$messages.push($bigMessage);

	await asx.$fadeOutMany(1500 * F, ...$messages);


}

/**
 * Called by showFailed and showPassed
 * Fades in $big, fades out $small, $bigButton, $Sidebar, $pageSubtitle
 * @return {Promise<void>}
 */
async function _$bigMessageInGuiOut() {
	console.log(...log('\t_$bigMessageInGuiOut()'));
	await asx.concurrent(
		asx.$fadeIn($bigMessage, 700 * F),
		asx.$fadeOutMany(200 * F, $bigButton, $smallMessage, $Sidebar, $pageSubtitle)
	);
	await asx.wait(700 * F);
}

/**
 * Called by insidetest.js after awaiting playPreTrialDemo
 * Fades in $small, $bigButton, $Sidebar, $pageSubtitle
 * @param {number} numOfNotes
 * @return {Promise<void>}
 */
async function $smallMessageAndGuiIn(numOfNotes) {
	console.log(...logmod('\t$smallMessageAndGuiIn()'));
	$smallMessage.html(`Please play <b>${numOfNotes}</b> notes.`);
	await asx.$fadeInMany(300, $bigButton, $smallMessage, $Sidebar, $pageSubtitle);
}

/**@param {number} numOfNotes
 @param {number} playbackRate*/
async function _runVideo(numOfNotes, playbackRate = 1) {
	console.log(...log('_runVideo(numOfNotes,playbackRate)'));
	video.setCurrentTimeToFirstOnset();
	await asx.wait(500 * F); // waits until starting frame is updated to new current time
	await asx.$fadeIn(video.$element, 700 * F);
	await video.play(numOfNotes, playbackRate);
	await asx.wait(1500 * F);
	await asx.$fadeOut(video.$element, 700 * F);
}

/** @param {playMidiFileOptions} playOptions*/
async function _runAnimation(playOptions) {
	console.log(...log('_runAnimation(playOptions)'));
	await asx.$fadeIn(animation.$element, 700 * F);
	const { playMidiFile } = require("pyano_local_modules/gilad");
	await playMidiFile(playOptions);
	await asx.wait(1500 * F);
	await asx.$fadeOut(animation.$element, 700 * F);
}

/**@param {Piano} animationPiano
 @param {Truth} truth
 @param {number} maxNotesAmongLevels*/
async function playWholeTruthDemo(animationPiano, truth, maxNotesAmongLevels) {
	console.log(...logmod('playWholeTruthDemo(userMidi, animationPiano, truth)', { b: true }));
	const shouldRunVideo = EStore.isDemoVideo();
	$bigMessage.text(`A tutorial`);
	$smallMessage.html(`Here's ${shouldRunVideo ? "a video" : "an animation"} that shows you what you will be playing.`);


	await _$messagesInAndOut({ includeSecondary: false });
	if (shouldRunVideo)
		await _runVideo(maxNotesAmongLevels);
	else
		await _runAnimation({
			animation,
			numOfNotes: maxNotesAmongLevels,
			truth,
			animationPiano
		});


}


/**@param {Piano} animationPiano
 @param {Levels} levels
 @param {Truth} truth
 @return {Promise<void>}*/
async function playPreTrialDemo({ animationPiano, levels, truth }) {
	console.log(...logmod('playPreTrialDemo(animationPiano, levels, truth)', { b: true }));


	const currentLevel = levels.current;
	const isFirstTrial = currentLevel.isFirstTrial();
	const shouldAlsoRunVideo = EStore.isDemoVideo() && isFirstTrial;
	if (isFirstTrial)
		$bigMessage.text(`${currentLevel.index.human(true).title()} level, ${currentLevel.internalTrialIndex.human(true)} trial.`);
	else
		$bigMessage.text(`Let's move on to the ${currentLevel.internalTrialIndex.human(true)} trial.`);
	$smallMessage.html(`You'll now play <b>${currentLevel.notes}</b> notes.`);
	let tempo;
	if (!currentLevel.rhythm) {
		tempo = levels.get(currentLevel.index + 1).tempo;
		console.log(...log(`\tgot tempo from next level, tempo = ${tempo}`, { sm: true }));
	} else {
		tempo = currentLevel.tempo;
	}
	tempo /= 100;
	console.log(...log(`\tshouldAlsoRunVideo = ${shouldAlsoRunVideo}`, { sm: true }));
	$smallMessageSecondary.html(`Here's ${shouldAlsoRunVideo ? "a video" : "an animation"} showing only these <b>${currentLevel.notes}</b> notes.<br><b> 
${!currentLevel.rhythm ? 'You can play as slow as you like.' : 'Try to keep rhythm.'}</b>`);
	await _$messagesInAndOut({ includeSecondary: true });


	if (shouldAlsoRunVideo) {
		await _runVideo(currentLevel.notes, tempo);

		$smallMessage.html(`You'll now watch the same notes played with an animation.`);
		await _$messagesInAndOut({ fadeInBigMsg: false, includeSecondary: false });
	}
	await _runAnimation({
		truth,
		animation,
		numOfNotes: currentLevel.notes,
		playbackRate: tempo,
		animationPiano
	});


}


/**@param {showFailedTrialFeedbackOptions} options
 @return {Promise<void>}*/
async function showFailedTrialFeedback(options) {
	console.log(...logmod('showFailedTrialFeedback(options)', { b: true }));
	$bigMessage.text("Oi vei!");
	await _$bigMessageInGuiOut();
	let { animationPiano, trialIndex, mistakes, truth } = options;
	const badAccuracyInTempo = bool(mistakes) &&
	                           'note'.in(mistakes) &&
	                           EStore.isCheckingRhythmInLevel();
	if (badAccuracyInTempo) {
		$smallMessage.text(`You got some notes wrong.`);
		$smallMessageSecondary.text("Please try this trial again.");
	} else {
		$smallMessage.text(`You almost got the ${trialIndex.human()} trial right.`);
		$smallMessageSecondary.text("Here's the animation again, highlighting where you got it wrong this time.");
	}
	await _$messagesInAndOut({ fadeInBigMsg: false });


	const numOfNotes = mistakes.length;

	let playOptions = {
		truth,
		animation,
		numOfNotes,
		mistakes,
		animationPiano,
	};
	if (EStore.isCheckingRhythmInLevel())
		playOptions.speed = 1;
	else
		playOptions.speed = EStore.currentTest().errors_playingspeed;
	await _runAnimation(playOptions);

}

/**@param {Piano} animationPiano
 @param {number} trialIndex
 @param {Truth} truth*/
async function showPassedTrialFeedback(animationPiano, trialIndex, truth) {
	console.log(...logmod('showPassedTrialFeedback(animationPiano, trialIndex, truth)', { b: true }));
	$bigMessage.text(`Good job! You passed the ${trialIndex.human()} trial.`);
	await _$bigMessageInGuiOut();

	const numOfNotes = EStore.getCurrentLevel().notes;
	$smallMessage.html(`Let's show you those same <b>${numOfNotes}</b> notes you just got correctly.`);
	$smallMessageSecondary.html(`This will make you even better.`);

	await _$messagesInAndOut({ fadeInBigMsg: false });


	await _runAnimation({
		truth,
		animation,
		numOfNotes,
		animationPiano
	});

}

async function showTestCompleteMessages() {
	console.log(...logmod('showTestCompleteMessages()'));
	$bigMessage.text(`Thank you ${EStore.subjectName().title()}!`);
	$smallMessage.text(`Test is over.`);
	$smallMessageSecondary.html('You deserve an ice cream. 🍦');

	await asx.$fadeInMany(700, $bigMessage, $smallMessage, $smallMessageSecondary, $Sidebar);
}


/**@param {TLevel[]} levels
 @param {Truth} truth
 @return {number[]}*/
function updateLevelTrialSubtitles(levels, truth) {
	let [levelIndex, trialIndex] = EStore.currentTrialCoords();
	$('#page_subtitle > div:nth-child(1) > strong')
		.text(truth.name);
	$('#page_subtitle > div:nth-child(2) > strong')
		.text(`${levelIndex + 1}/${levels.length}`);
	$('#page_subtitle > div:nth-child(3) > strong')
		.text(`${trialIndex + 1}/${levels[levelIndex].trials}`);

	return [levelIndex, trialIndex];
}

let $pageSubtitle = $('<div class="subtitle" id="page_subtitle">')
	.append(
		`<div>Truth file: ${strong(EStore.truthFileName({ withExtension: false }))}</div>`,
		`<div>Level: <strong>1/1</strong></div>`,
		`<div>Trial: <strong>1/1</strong></div>`,
	).hide();
let $bigMessage = $('<div id="big_message">').hide();
let $smallMessage = $('<div class="subtitle" id="small_message">').hide();
let $smallMessageSecondary = $('<div class="subtitle" id="small_message_secondary">')
	.hide();
let $bigButton = $('<button id="big_button">')
	.addClass("my-btn active-btn")
	.append("<span>I'm done playing</span>")
	.hide();
let animation = new Animation($('<div id="animation">').hide());

let video = new Video($(`<video width="1750" preload="auto" id="video">`).hide());


module.exports = {
	$bigButton,
	$bigMessage,
	$pageSubtitle,
	$smallMessageAndGuiIn,
	$smallMessage,
	$smallMessageSecondary,
	animation,
	playPreTrialDemo,
	playWholeTruthDemo,
	showFailedTrialFeedback,
	showPassedTrialFeedback,
	showTestCompleteMessages,
	updateLevelTrialSubtitles,
	video
};
