// **pages/InsideTest/Gui.js
const $ = require('jquery');
const util = () => require("pyano_local_modules/util");
let {
	$fadeIn,
	$fadeInMany,
	$fadeOut,
	$fadeOutMany,
	Alert,
	Message,
	Messages,
	bool,
	concurrent,
	int,
	num2eng,
	range,
	strong,
	sum,
	wait,
	waterfall,
} = require("pyano_local_modules/util");
let {
	EStore,
	Python
} = require("pyano_local_modules/ext_libs");
const Svg = require("./Svg");
const guiC = 'color:#9876aa';
const fs = require("fs");
const Path = require("path");

class Video {
	/**@param {jQuery} $video*/
	constructor($video) {
		this.$element = $video;

		let trimmedFilePath = `${EStore.truthFilePath()}.mp4`;
		let vidsrcfile = `file:///${trimmedFilePath}`;
		let src = `<source src="${vidsrcfile}" type="video/mp4">`;
		this.$element.append(src);
		let data = fs.readFileSync(`${EStore.truthFilePath()}_onsets.json`, {
			encoding: 'utf8'
		});
		/**@type {{onsets:String[],first_onset_index:Number}}*/
		data = JSON.parse(data);
		this.firstOnset = data.onsets[data.first_onset_index];

		this.loaded = false;
	}


	_setCurrentTimeToFirstOnset() {
		this.vidElm.currentTime = this.firstOnset - 0.05;
	}

	_promisePlaying() {
		console.log('_promisePlaying() started');
		return new Promise(resolve => this.vidElm.onplaying = () => {
			console.log('_promisePlaying() resolving');
			resolve();
		});
	}

	_promiseLoadedData() {
		console.log('_promiseLoadedData() started');
		return new Promise(resolve => this.vidElm.onloadeddata = () => {
			this.loaded = true;
			console.log('_promiseLoadedData() resolving');
			resolve();
		});
	}

	_promiseEnded() {
		console.log('_promiseEnded() started');
		return new Promise(resolve => this.vidElm.onended = () => {
			console.log('_promiseEnded() resolving');
			resolve();
		});
	}

	_promiseFadeIn() {
		if (this.vidElm.volume != 0)
			console.warn('_promiseFadeIn volume not 0', this.vidElm.volume);
		return new Promise(resolve => this.$element.animate({ volume: 1 }, 50, resolve));
	}

	_promiseFadeOut() {
		if (this.vidElm.volume != 1)
			console.warn('_promiseFadeIn volume not 1', this.vidElm.volume);
		return new Promise(resolve => this.$element.animate({ volume: 0 }, 50, resolve));
	}

	/**@return {HTMLMediaElement}*/
	get vidElm() {
		return this.$element[0];
	}


	/**@param {Number?} numOfNotes
	 @return {Promise<void>}*/
	async play(numOfNotes = null) {
		console.log(`Video.play(numOfNotes = )`, numOfNotes);
		if (!this.loaded)
			await this._promiseLoadedData();
		this._setCurrentTimeToFirstOnset();
		this.vidElm.volume = 0;
		let waitValue;
		if (numOfNotes == null) {
			waitValue = 1000 * (this.vidElm.duration - this.firstOnset);
		} else {
			const options = { args: [EStore.truthFilePath('txt')], mode: "json" };
			let messages = await Python.runAsync('InsideTest/normalize_txt_file.py', options);
			/**@type {Messages}*/
			messages = new Messages(messages.map(msg => new Message(msg)));

			// let tdeltas = messages.slice(0, numOfNotes + 1).map(msg => msg.time_delta);
			let tdeltas = messages.time_deltas(numOfNotes);

			waitValue = sum(tdeltas) * 1000;

			console.log('\t', {
				waitValue,
				tdeltas,
				messages,
				'this.vidElm.currentTime': this.vidElm.currentTime,
				'this.firstOnset': this.firstOnset,
				'this.vidElm.duration': this.vidElm.duration,
				'this.vidElm.volume': this.vidElm.volume,
				'this.vidElm': this.vidElm

			});

		}


		try {
			console.log('\tbefore fadeIn/play/wait (waitValue)', waitValue);
			await concurrent(this._promiseFadeIn(), await this.vidElm.play(), wait(waitValue));
			console.log('\tafter fadeIn/play/wait, before fadeOut/pause');
			await concurrent(this._promiseFadeOut(), this.vidElm.pause());
			console.log('\tafter fadeOut/pause');
		} catch (e) {
			if (e.message.startsWith("play() failed because the user didn't interact with the document first.")) {
				this.$element.css('z-index', 2000);
				this.vidElm.controls = true;
				await this._promisePlaying();
				this.vidElm.controls = false;
				await this._promiseEnded();
				this.$element.css('z-index', -1);
			} else {
				Alert.small.error("Can't play", e.message);
				throw e;
			}
		}

	}

	async pause() {
		return await this.vidElm.pause();
	}
}

class Animation {
	/**@param {jQuery} $animation*/
	constructor($animation) {
		/**@type {jQuery}*/
		this.$element = $animation;
		let svgs = [];
		for (let i of range(0, 51)) {
			if (i == 0) {
				svgs.push(Svg.blackRight);
				continue;
			} else if (i == 51) {
				svgs.push(Svg.base);
				continue;
			}
			let searchElement = i % 7;
			if ([2, 5].includes(searchElement))
				svgs.push(Svg.blackRight);
			else if ([1, 4, 8].includes(searchElement))
				svgs.push(Svg.blackLeft);
			else // [0, 3, 6, 7]
				svgs.push(Svg.blackBoth);
		}
		this.$element.append(svgs);

	}

	/**@param {Number} note*/
	_note2svgIndex(note) {
		let scaleStart = int(note / 12) * 7 - 11;
		let indexInScale = note % 12;
		let index = scaleStart + [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6][indexInScale];
		if (![0, 2, 4, 5, 7, 9, 11].includes(indexInScale))
			return [index, index + 1];
		return index;
		/*let trans = {
			0: 0,
			1: 0.5,
			2: 1,
			3: 2,
			4: 2.5,
			5: 3,
			6: 3.5,
			7: 4,
			8: 5,
			9: 5.5,
			10: 6,
			11: 6.5,
		};

		note -= 9;
		let index = (int(note / 12) * 7) + trans[note % 12];
		return parseFloat(index);
		*/
	}

	/**
	 @param {Number} note
	 @param {Number} noteDuration
	 @param {String} fill
	 * */
	async markKey(note, noteDuration, fill) {
		return new Promise(async resolve => {
			let index = this._note2svgIndex(note);
			let $toMark, baseFill;
			let $children = this.$element.children();
			if (index.length != undefined) { // [3,4] for example
				let [indexLeft, indexRight] = index;
				let $keyLeft = $children.filter(`svg:nth-child(${indexRight})`).children(`.piano-black-left-rect`);
				let $keyRight = $children.filter(`svg:nth-child(${indexLeft})`).children(`.piano-black-right-rect`);
				$toMark = $keyLeft.add($keyRight);
				baseFill = 'black';
			} else { // 3
				$toMark = $children.filter(`svg:nth-child(${index})`).children(`.piano-white-rect`);
				baseFill = 'white';
			}
			$toMark.css({
				fill
			});
			await wait(noteDuration);
			$toMark.css({
				fill: baseFill
			});
			resolve();
			// setTimeout(() => {
			//
			// }, noteDuration);

		});

	}


}

/**@param {Midi} midi
 @param {Piano|Tone.AudioNode} playbackPiano*/
async function playWholeTruthDemo(midi, playbackPiano) {
	console.log('%cGui.playWholeTruthDemo()', guiC);
	$bigMessage.text(`A tutorial`);
	await $fadeIn($bigMessage, 700);
	let smallMessage = `Here's a demo that shows you what you will be playing.`;
	$smallMessage.html(smallMessage);
	await $fadeIn($smallMessage, 700);
	await wait(1500);
	await $fadeOutMany(1500, $smallMessage, $bigMessage);

	if (EStore.isDemoVideo()) {
		await $fadeIn(video.$element, 700);
		await video.play();
		await wait(1500);
		await $fadeOut(video.$element, 700);
	} else {
		await $fadeIn(animation.$element, 700);
		await midi.playMidiFile({
			midiFilePath: EStore.truthFilePath('mid'),
			animation,
			playbackPiano
		});
		await wait(1500);
		await $fadeOut(animation.$element, 700);
	}

}


/**@param {Midi} midi
 @param {Piano} playbackPiano
 @param {Number} levelIndex
 @param {Number} trialIndex
 @param {Number} numOfNotes
 @return {Promise<void>}*/
async function playPreTrialDemo(midi, playbackPiano, levelIndex, trialIndex, numOfNotes) {
	console.log('%cGui.playPreTrialDemo()', guiC);
	const trialNumEnglish = num2eng(trialIndex + 1, true);
	if (trialIndex == 0)
		$bigMessage.text(`${num2eng(levelIndex + 1, true).title()} level, ${trialNumEnglish} trial.`);
	else
		$bigMessage.text(`Let's move on to the ${trialNumEnglish} trial.`);
	await $fadeIn($bigMessage, 700);

	$smallMessage.html(`You are going to play <b>${numOfNotes}</b> notes.`);
	await $fadeIn($smallMessage, 700);
	await wait(700);
	$smallMessageSecondary.html(`Here's an demo showing only these <b>${numOfNotes}</b> notes.`);
	await $fadeIn($smallMessageSecondary, 700);
	await wait(1500);
	await $fadeOutMany(1500, $bigMessage, $smallMessage, $smallMessageSecondary);

	if (EStore.isDemoVideo()) {
		await $fadeIn(video.$element, 700);
		await video.play(numOfNotes);
		await wait(1500);
		await $fadeOut(video.$element, 700);
	} else {

		await $fadeIn(animation.$element, 700);
		await midi.playMidiFile({
			midiFilePath: EStore.truthFilePath('mid'),
			animation,
			numOfNotes,
			playbackPiano
		});
		await wait(1500);
		await $fadeOut(animation.$element, 700);
	}

	$smallMessage.html(`Please play <b>${numOfNotes}</b> notes.`);
	await $fadeInMany(300, $bigButton, $smallMessage);

}


/**@param {Midi} midi
 @param {Piano} playbackPiano
 @param {Number} trialIndex
 @param {String[]} mistakes
 @return {Promise<void>}*/
async function showFailedTrialFeedback(midi, playbackPiano, trialIndex, mistakes) {
	console.log('%cGui.showFailedTrialFeedback()', guiC);
	$bigMessage.text("Oi vei!");
	await concurrent($fadeIn($bigMessage, 700), $fadeOutMany(200, $smallMessage, $bigButton));
	await wait(700);
	// await $fadeOutMany(200, $smallMessage, $bigButton);
	// await $fadeIn($bigMessage, 700);
	const badAccuracyInTempo = bool(mistakes) &&
	                           'note'.in(mistakes) &&
	                           EStore.isLearningTempo();
	if (badAccuracyInTempo) {
		$smallMessage.text(`You got some notes wrong.`);
		$smallMessageSecondary.text("Please try this trial again.");
	} else {
		$smallMessage.text(`You almost got the ${num2eng(trialIndex + 1)} trial right.`);
		$smallMessageSecondary.text("Here's an animation showing the errors.");
	}
	await $fadeIn($smallMessage, 700);
	await wait(700);
	await $fadeIn($smallMessageSecondary, 700);
	await wait(1500);
	await $fadeOutMany(1500, $bigMessage, $smallMessage, $smallMessageSecondary);
	await $fadeIn(animation.$element, 700);
	const numOfNotes = mistakes.length;

	let playOptions = {
		midiFilePath: EStore.truthFilePath('mid'),
		animation,
		numOfNotes,
		mistakes,
		playbackPiano
	};
	if (EStore.isLearningTempo())
		playOptions.speed = EStore.currentTest().errors_playingspeed;
	await midi.playMidiFile(playOptions);
	await wait(1500);
	await $fadeOut(animation.$element, 700);
}

/**@param {Midi} midi
 @param {Piano} playbackPiano
 @param {Number} trialIndex*/
async function showPassedTrialFeedback(midi, playbackPiano, trialIndex) {
	console.log('%cGui.showPassedTrialFeedback()', guiC);
	$bigMessage.text(`Good job! You passed the ${num2eng(trialIndex + 1)} trial.`);
	await concurrent($fadeIn($bigMessage, 700), $fadeOutMany(200, $smallMessage, $bigButton));
	await wait(700);
	const numOfNotes = EStore.numOfNotesCurrLevel();
	$smallMessage.html(`Let's show you those same <b>${numOfNotes}</b> notes you just got correctly.`);
	$smallMessageSecondary.html(`This will make you even better.`);


	await $fadeIn($smallMessage, 700);
	await wait(700);
	await $fadeIn($smallMessageSecondary, 700);
	await wait(1500);
	await $fadeOutMany(1000, $bigMessage, $smallMessage, $smallMessageSecondary);
	await $fadeIn(animation.$element, 700);
	await midi.playMidiFile({
		midiFilePath: EStore.truthFilePath('mid'),
		animation,
		numOfNotes,
		playbackPiano
	});
	await wait(1000);
	await $fadeOut(animation.$element, 700);
}

async function showTestCompleteMessages() {
	console.log('%cGui.showTestCompleteMessages()', guiC);
	$bigMessage.text(`Test is over!`);
	$smallMessage.html('You deserve an ice cream. 🍦');

	await $fadeInMany(700, $bigMessage, $smallMessage);
}


/**@param {TLevel[]} levels
 @return {Number[]}*/
function updateLevelTrialSubtitles(levels) {
	let [levelIndex, trialIndex] = EStore.currentTrialCoords();
	$('#page_subtitle > div:nth-child(1) > strong')
		.text(EStore.truthFileName({
			withExtension: false
		}));
	$('#page_subtitle > div:nth-child(2) > strong')
		.text(`${levelIndex + 1}/${levels.length}`);
	$('#page_subtitle > div:nth-child(3) > strong')
		.text(`${trialIndex + 1}/${levels[levelIndex].trials}`);

	return [levelIndex, trialIndex];
}

let $pageSubtitle = $('<div class="subtitle" id="page_subtitle">')
	.append(
		`<div>Truth file: ${strong(EStore.truthFileName({ withExtension: false }))}</div>`,
		`<div>Level: <strong>1/1</strong></div>`,
		`<div>Trial: <strong>1/1</strong></div>`,
	);
let $bigMessage = $('<div id="big_message">').hide();
let $smallMessage = $('<div class="subtitle" id="small_message">').hide();
let $smallMessageSecondary = $('<div class="subtitle" id="small_message_secondary">')
	.hide();
let $bigButton = $('<button id="big_button">')
	.addClass("my-btn active-btn")
	.append("<span>I'm done playing</span>")
	.hide();
let animation = new Animation($('<div id="animation">').hide());

let video = new Video($(`<video width="1750" preload="auto" id="video">`).hide());


module.exports = {
	$pageSubtitle,
	$bigMessage,
	$smallMessageSecondary,
	$smallMessage,
	$bigButton,
	playPreTrialDemo,
	showPassedTrialFeedback,
	showFailedTrialFeedback,
	showTestCompleteMessages,
	playWholeTruthDemo,
	updateLevelTrialSubtitles,
	animation,
	video
};
