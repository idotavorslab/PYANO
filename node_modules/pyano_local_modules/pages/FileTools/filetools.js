const log = s => [`%c${s}`, 'color: #245ed1'];
let { EStore, Python } = require("pyano_local_modules/ext_libs");
let { date2datetime, $fadeOut, $fadeIn } = require("pyano_local_modules/util");
let { safeSwitchCss, $MainContent } = require("pyano_local_modules/document");
const $ = require('jquery');
const fs = require("fs");
let { execSync } = require('child_process');


async function writeFullOnsetsJson(mp4name, mp4path, confirm = true) {
	console.log(...log(`writeFullOnsetsJson(mp4name, mp4path = ${mp4path})`));
	if (confirm) {
		let { value: shouldClean } = await Alert.big.blocking({
			title: 'Get onsets and write data to file?',
			html: `Data will be written to: ${mp4name.upTo('.mp4')}_onsets.json`
		});
		if (!shouldClean)
			return Alert.small.info('Not cleaning.');

	}


	Alert.small.info('Calculating onsets...');
	let onsets = await Python.runAsync("Record/get_and_write_onsets.py", { args: [mp4path] });
	return await Alert.big.blocking({ title: 'How long was it until you played the first note?' },
		{
			strings: onsets.map(o => round(o, 1)),
			clickFn: async $s => {
				let secs = $s.text();
				Alert.small.info(`Working...`);
				try {
					let options = { args: [mp4path, secs] };
					await Python.runAsync("Record/update_onsets_json.py", options);
					Alert.small.success(`Done.`);
					return true;
				} catch (e) {
					await Alert.small.error(`Failed cleaning ${mp4name}`, e.message);
					console.error(e);
					return false;
				}
			}
		});


}

async function handleJson(jsonName, jsonPath) {
	if (!jsonName.endsWith('_onsets.json'))
		return Alert.small.error(`Doesn't look like an onsets file`, `A legal format example: "fur_elise_B_onsets.json"`);

	let mp4name = `${jsonName.upTo('_onsets')}.mp4`;
	let mp4path = `${jsonPath.upTo('_onsets')}.mp4`;
	await writeFullOnsetsJson(mp4name, mp4path);

}

/**@param {Truth} truth*/
async function txt2midi(truth) {
	let shouldConvert = await Alert.big.blocking({
		title: `Create ${truth.midi.name}?`
	});
	if (!shouldConvert.value)
		return Alert.small.info('Aborting.');


	if (await truth.midi.exists()) {
		const midstats = await fs.statSync(truth.midi.path);
		const datestr = date2datetime(midstats.birthtime);
		const midipathNew = fsx.push_before_ext(truth.midi.path, `_${datestr}`);
		let overwrite = await Alert.big.blocking({
			title: `Midi file already exists. Rename old midi file?`,
			html: `${truth.midi.name} => ${fsx.basename(midipathNew)}`
		});
		if (!overwrite.value)
			return Alert.small.info('Aborting.');
		else
			await fs.renameSync(truth.midi.path, midipathNew);

	}
	if (!(await truth.txt.allExist())) {
		let confirm = await Alert.big.blocking({
			title: `There seem to be some txt files missing`,
			html: `Press OK only if ${truth.txt.base.name.path} contains both "on" and "off" data`,
			showConfirmButton: true, showCancelButton: true
		});
		if (!confirm.value)
			return Alert.small.info('Aborting.');
	}
	let msgs = await Python.runAsync('InsideTest/merge_on_off_txt_files.py', {
		args: [truth.txt.base.path, truth.txt.on.path, truth.txt.off.path],
		mode: "json"
	});
	let { on_off_pairs } = msgs[0];
	// let messages = await Python.runAsync('InsideTest/get_messages_from_file.py', {
	// 	args: [truth.txt.base.path],
	// 	mode: "json"
	// });

	console.log({ on_off_pairs });

	let { toMidiFromMessages } = require("pyano_local_modules/gilad");
	try {
		await toMidiFromMessages(on_off_pairs, truth);
		Alert.small.success(`Created ${truth.midi.name}.`);
	} catch (e) {
		Alert.small.error('Converting from txt to midi failed', e.message);
		console.error(e);
	}


}

/**@param {Truth} truth*/
async function midi2txt(truth) {
	let shouldConvert = await Alert.big.blocking({
		title: `Create 3 txt files from ${truth.name}?`
	});
	if (!shouldConvert.value)
		return Alert.small.info('Not converting');


	if (await truth.txt.anyExist()) {
		let shouldOverwrite = await Alert.big.blocking({
			title: `At least one txt file already exists, overwrite *all*?`
		});
		if (!shouldOverwrite.value)
			return Alert.small.info('Aborting.');

		await truth.txt.removeAll();

	}
	let { toTxtFromMidi } = require("pyano_local_modules/gilad");
	try {
		await toTxtFromMidi(truth);
		await Python.runAsync('InsideTest/normalize_txt_file.py', {
			args: [truth.txt.on.path],
			mode: "json"
		});
		let msgs = await Python.runAsync('InsideTest/merge_on_off_txt_files.py', {
			args: [truth.txt.base.path, truth.txt.on.path, truth.txt.off.path],
			mode: "json"
		});

		Alert.small.success(`Created ${[truth.txt.base.name, truth.txt.on.name, truth.txt.off.name]}.`);
	} catch (e) {
		Alert.small.error(`Creating txt files failed`, e.message);
		console.error(e);
	}

}


async function handleMov(movname, movpath) {

	console.log(...log(`handleMov(movname, movpath = ${movpath})`));
	let mp4path = fsx.replace_ext(movpath, 'mp4');
	let mp4name = fsx.basename(mp4path);


	// **Confirm
	let { value: shouldConvert } = await Alert.big.blocking({
		title: 'Crop and create an mp4? (may take a while)',
		html: `${movname} => ${mp4name}`,
		showConfirmButton: true,
		showCancelButton: true,
	});
	if (!shouldConvert)
		return Alert.small.info('Aborting');

	// **Maybe Delete existing
	let overwrite = false;
	if (await fsx.path_exists(mp4path)) {
		let { value: doAnyway } = await Alert.big.blocking({
			title: "An mp4 at destination already exists. Overwrite?",
			html: `Here: ${mp4path}`
		});
		if (doAnyway)
			overwrite = true;
		else
			return Alert.small.info('Aborting');

	}

	// **Convert
	try {

		await Alert.big.blocking({
			title: "Working...", html: "Here's a hamster: 🐹", showConfirmButton: false,
			showCancelButton: false,

		});
		let yesflag = overwrite ? "-y" : "";
		let cmd = `ffmpeg ${yesflag} -i "${movpath}" -filter:v "crop=1900:400:10:360" -qp 18 -preset ultrafast -tune zerolatency -profile:v baseline -level 3.0 -movflags +faststart "${mp4path}"`;
		await execSync(cmd, { encoding: 'utf8', stdio: 'inherit' });
		await writeFullOnsetsJson(mp4name, mp4path);
		Alert.small.success('Success', `New file created: ${mp4path}`);
	} catch (e) {
		console.error(e);
		Alert.small.error('Error', e.message);
	}


}


async function handleMp4(mp4name, mp4path) {
	const ffprobeCmd = `ffprobe -v quiet -print_format json -show_streams -show_format`;
	const mp4probe = JSON.parse(await execSync(`${ffprobeCmd} "${mp4path}"`, { encoding: 'utf8' }));
	let { bit_rate: mp4bitrate, height: mp4height } = mp4probe.streams.find(s => s["codec_type"] == "video");
	let compressed = int(mp4bitrate) / 1000000 < 20;
	let cropped = int(mp4height) < 600;
	if (!compressed || !cropped) {
		const movpath = fsx.replace_ext(mp4path, 'mov');
		if (await fsx.path_exists(movpath)) {
			const movprobe = JSON.parse(await execSync(`${ffprobeCmd} "${movpath}"`, { encoding: 'utf8' }));
			let { bit_rate: movbitrate, height: movheight } = movprobe.streams.find(s => s["codec_type"] == "video");
			compressed |= int(movbitrate) / int(mp4bitrate) > 2;
			cropped |= int(movheight) / int(mp4height) > 1.2;

		}
	}
	if (compressed || cropped) {
		let { value: createOnsets } = await Alert.big.blocking({
			title: "This mp4 looks already compressed or cropped.",
			html: `Only the onsets file will be created. Continue?`
		});
		if (!createOnsets)
			return await Alert.small.info("Aborting");
		return await writeFullOnsetsJson(mp4name, mp4path);
	}
	return await handleMov(mp4name, mp4path);


}


async function onDrop(e) {
	// let {remote} = require('electron');
	require('electron').remote.getCurrentWindow().focus();
	let { name, path, size, type } = e.originalEvent.dataTransfer.files[0];
	console.log({ name, path, size, type });
	const truth = new Truth(fsx.remove_ext(path));
	if (type == "audio/mid")
		return await midi2txt(truth);
	if (type == "application/json")
		return await handleJson(name, path);

	if ("text".in(type))
		return await txt2midi(truth);

	if ("video".in(type)) {
		let ext = fsx.extname(name).lower();
		if (ext.endsWith('mov'))
			return await handleMov(name, path);
		if (ext.endsWith('mp4'))
			return await handleMp4(name, path);
		return Alert.small.warning(`Can't handle this video format`, `Only 'mov' or 'mp4'`);
	}

	Alert.small.warning('Can only hanle mp4 / mov / txt / json / mid');
}

const fileToolsPage = {
	switch: async reload => {
		console.log(...log(`fileToolsPage.switch(${reload})`));
		EStore.setLastPage('file_tools');
		if (reload)
			return reloadPage();

		await $fadeOut($MainContent, 100);
		$MainContent.empty();
		require("pyano_local_modules/sidebar").to_file_tools();
		safeSwitchCss("templates/css/file_tools.css");
		let $bigMessage = $('<div id="big_message">')
			.text('Drop a file');
		let $dropArea = $('<div id="drop_area">')
			.on({
				'dragover dragenter': e => {
					e.preventDefault();
					e.stopPropagation();
				}, 'drop': async e => await onDrop(e)
			});

		$MainContent.append($bigMessage, $dropArea);
		await $fadeIn($MainContent, 300);
	}
};

module.exports = fileToolsPage;
