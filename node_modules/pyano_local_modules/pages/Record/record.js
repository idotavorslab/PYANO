// **pages/Record/record.js
// const sidebar = require("pyano_local_modules/sidebar/index.js");
let { safeSwitchCss, $MainContent } = require("pyano_local_modules/document");
let Gui = require("./Gui");
let { $fadeInMany, $fadeOutMany, $fadeOut, $fadeIn, underscore2space, round } = require('pyano_local_modules/util');
let { EStore, Path } = require("pyano_local_modules/ext_libs");

let { Midi } = require("pyano_local_modules/gilad");
let { Alert, blockingSwalMixin } = require("pyano_local_modules/util/Alert");
const $ = require("jquery");
let Piano = require("pyano_local_modules/gilad/Piano");
let PyFns = require("pyano_local_modules/pages/InsideTest/PyFns");
let { remote } = require("electron");
let Vid = require("./video");

const truthsDirPath = EStore.truthsDirPath();

/**@param {Midi} recordMidi*/
async function _startRecord(recordMidi) {
	console.log('%c_startRecord', 'color:#a70334');
	$fadeOut(Gui.$editableSpan, 300);
	await recordMidi.newTxtStreamAndMaybeLoadUserPiano(_getRecordPath('txt'));
	Gui.animateRecordBtn({ on: true });
}

/**@param {Midi} recordMidi
 @param {Piano|Tone.AudioNode} playbackPiano*/
async function _stopRecord(recordMidi, playbackPiano) {
	console.log('%c_stopRecord', 'color:#a70334');
	let messages = await PyFns.normalizeTxtFile(_getRecordPath('txt'));
	await recordMidi.endTxtAndWriteMidi(messages, _getRecordPath('mid'));
	Gui.animateRecordBtn({ on: false });
	const recordName = Gui.setEditableSpanText(null);
	$fadeIn(Gui.$editableSpan, 0);
	Gui.repopulateTruthFiles()
	   .map(async $f => $f.click(async e => await _playTruthFile(e, recordMidi, playbackPiano)));
	EStore.setTruthFilePath(recordName);
	// playbackPiano.dispose();
	Alert.small.success('Saved files', `${recordName}.txt, ${recordName}.mid`);
}

/**@param {String} ext*/
function _getRecordPath(ext) {
	const recordNameNoExt = Gui.getEditableSpanText();
	const recordPathNoExt = Path.join(truthsDirPath, recordNameNoExt);
	return `${recordPathNoExt}.${ext}`;
}

/**@param e
 @param {Midi} recordMidi
 @param {Piano|Tone.AudioNode} playbackPiano*/
async function _playTruthFile(e, recordMidi, playbackPiano) {
	console.log('%c_playTruthFile', 'color:#a70334');
	const id = e.currentTarget.id;
	const $currentTarget = $(e.currentTarget);
	$currentTarget
		.css('color', 'white')
		.text(underscore2space(id) + ' ðŸ”Š');

	const midiFilePath = Path.join(truthsDirPath, `${id}.mid`);
	await recordMidi.playMidiFile({ midiFilePath, playbackPiano });
	$currentTarget
		.css('color', 'rgba(255,255,255,0.65)')
		.text(underscore2space(id) + ' ðŸ”ˆ');
}

async function doVideoStuff() {
	const vidFilePath = await Vid.getVideoFilePath();
	const onsets = await Vid.getOnsetTimes(vidFilePath);
	let $onsets = onsets
		.map(o => round(o, 1))
		.map(o =>
			$(`<p>${o}</p>`)
				.click(async () => {
					console.log(`user chose ${o}`);
					const silenceLen = EStore.vidSilenceLen();
					const trimmedPath = await Vid.trimAndForceSilence(vidFilePath, o, silenceLen);
					console.log('doVideoStuff()', { trimmedPath });
					await blockingSwalMixin.close();
					console.log('closed');
				}));
	await blockingSwalMixin.fire({
		title: 'How long was it until you played the first note?',
		onBeforeOpen: () => $('#swal2-content').show().append($onsets.map($o => $o.text(`${$o.text()}s`)))
	});


}

const recordPage = {
	/**@param {Boolean} reload*/
	switch: async (reload) => {
		EStore.set('last_page', 'record');
		if (reload) {
			const currentWindow = remote.getCurrentWindow();
			currentWindow.reload();
		}
		await $fadeOutMany(100, $MainContent);
		require("pyano_local_modules/sidebar/index.js").to_record();
		$MainContent.empty();
		safeSwitchCss("templates/css/record.css");

		$MainContent.append(
			Gui.$recordBtn,
			Gui.$inputDiv,
			Gui.$recordPath,
			Gui.truthFilesDiv,
			Gui.videoProcessDiv
		);
		$('#video_file_browse_btn')
			.click(async () => await doVideoStuff());
		let recordMidi = new Midi({ muteUserPiano: true });

		let playbackPiano = new Piano(`file:///${EStore.salamanderDirPath()}`, [21, 108], 5).toMaster();

		await $fadeInMany(300, $MainContent);
		let alreadyRecording = false;
		Gui.$getTruthFiles()
		   .map(async $f => $f.click(async e => await _playTruthFile(e, recordMidi, playbackPiano)));
		Gui.$recordBtn.click(async () => {
			if (!alreadyRecording) {

				await _startRecord(recordMidi);

			} else {
				await _stopRecord(recordMidi, playbackPiano);
			}
			alreadyRecording = !alreadyRecording;
		});
	}
};
module.exports = recordPage;
