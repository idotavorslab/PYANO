let { safeSwitchCss, $MainContent } = require("pyano_local_modules/document");
let Gui = require("./Gui");
let { reloadPage, $fadeInMany, $fadeOutMany, $fadeOut, $fadeIn, underscore2space } = require('pyano_local_modules/util');
let { EStore, Python } = require("pyano_local_modules/ext_libs");

let { Midi } = require("pyano_local_modules/gilad");
// let { Alert } = require("pyano_local_modules/util/Alert");
const $ = require("jquery");
let Piano = require("pyano_local_modules/gilad/Piano");
const Path = require('path');
const truthsDirPath = EStore.truthsDirPath();
const log = s => [`%c${s}`, 'color: #a70334'];

/**@param {Midi} recordMidi*/
async function _startRecord(recordMidi) {
	console.log(...log('_startRecord(recordMidi)'));
	$fadeOut(Gui.$editableSpan, 300);
	try {
		await recordMidi.newTxtStreamAndMaybeLoadUserPiano(_getRecordPath('txt'));
		Gui.animateRecordBtn({ on: true });
		Alert.small.info('Record started');
	} catch (e) {
		console.warn(e);
		Alert.small.error("Can't record", e.message);
	}
}

/**@param {Midi} recordMidi
 @param {Piano} playbackPiano*/
async function _stopRecord(recordMidi, playbackPiano) {
	console.log(...log('_stopRecord(recordMidi, playbackPiano)'));

	const recordTxtPath = _getRecordPath('txt');
	const fs = require("fs");
	let { size } = fs.lstatSync(recordTxtPath);
	if (size == 0) {
		return reloadPage();
	}
	let messages = await Python.runAsync('InsideTest/normalize_txt_file.py', { args: [recordTxtPath], mode: "json" });
	await recordMidi.endTxtAndWriteMidi(messages, _getRecordPath('mid'));
	Gui.animateRecordBtn({ on: false });
	const recordName = Gui.setEditableSpanText(null);
	$fadeIn(Gui.$editableSpan, 0);

	Gui.repopulateTruthFiles()
	   .map(async $f =>
		   $f.click(async e =>
			   await _playTruthFile(e, recordMidi, playbackPiano)));
	try {
		await EStore.setTruthFilePath(recordName);
		Alert.small.success('Saved files', `${recordName}.txt, ${recordName}.mid`);
	} catch (e) {
		console.warn(e);
		Alert.small.error('Error setting new truth file', e.message);
	}
	playbackPiano.dispose();
}

/**@param {string} ext*/
function _getRecordPath(ext) {
	console.log(...log(`_getRecordPath(ext = ${ext})`));
	const recordNameNoExt = Gui.getEditableSpanText();
	const recordPathNoExt = Path.join(truthsDirPath, recordNameNoExt);
	return `${recordPathNoExt}.${ext}`;
}

/**@param e
 @param {Midi} recordMidi
 @param {Piano} playbackPiano*/
async function _playTruthFile(e, recordMidi, playbackPiano) {
	console.log(...log(`_playTruthFile(...)`));
	const id = e.currentTarget.id;
	const $currentTarget = $(e.currentTarget);
	$currentTarget
		.css('color', 'white')
		.text(underscore2space(id) + ' ðŸ”Š');

	const midiFilePath = Path.join(truthsDirPath, `${id}.mid`);

	const { playMidiFile } = require("pyano_local_modules/gilad");
	await playMidiFile({ midiFilePath, playbackPiano });
	$currentTarget
		.css('color', 'rgba(255,255,255,0.65)')
		.text(underscore2space(id) + ' ðŸ”ˆ');
}


const recordPage = {
	/**@param {boolean} reload*/
	switch: async reload => {
		EStore.set('last_page', 'record');
		if (reload) {
			return reloadPage();
		}
		await $fadeOutMany(100, $MainContent);
		require("pyano_local_modules/sidebar/index.js").to_record();
		$MainContent.empty();
		safeSwitchCss("templates/css/record.css");

		$MainContent.append(
			Gui.$recordBtn,
			Gui.$inputDiv,
			Gui.$recordPath,
			Gui.truthFilesDiv
		);

		let recordMidi = new Midi({ name: 'record.recordMidi', muteUserPiano: true });

		let playbackPiano = new Piano(`file:///${EStore.salamanderDirPath()}`, 'record.playbackPiano', [21, 108], 5).toMaster();

		await $fadeInMany(300, $MainContent);
		let alreadyRecording = false;
		Gui.$getTruthFiles()
		   .map(async $f =>
			   $f.click(async e =>
				   await _playTruthFile(e, recordMidi, playbackPiano)
			   )
		   );
		Gui.$recordBtn.click(async () => {
			if (!alreadyRecording) {

				await _startRecord(recordMidi);

			} else {
				await _stopRecord(recordMidi, playbackPiano);
			}
			alreadyRecording = !alreadyRecording;
		});
	}
};
module.exports = recordPage;
