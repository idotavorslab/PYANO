// **pages/Record/record.js
// const sidebar = require("pyano_local_modules/sidebar/index.js");
let { safeSwitchCss, $MainContent } = require("pyano_local_modules/document");
let Gui = require("./Gui");
let { path_exists, remove_ext, zip, $fadeInMany, $fadeOutMany, $fadeOut, $fadeIn, underscore2space, round } = require('pyano_local_modules/util');
let { EStore, Python } = require("pyano_local_modules/ext_libs");

let { Midi } = require("pyano_local_modules/gilad");
let { Alert, blockingSwalMixin } = require("pyano_local_modules/util/Alert");
const $ = require("jquery");
let Piano = require("pyano_local_modules/gilad/Piano");
let { remote } = require("electron");
let Vid = require("./video");
const path = require('path');
const fs = require("fs");
const truthsDirPath = EStore.truthsDirPath();

/**@param {Midi} recordMidi*/
async function _startRecord(recordMidi) {
	console.log('%c_startRecord', 'color:#a70334');
	$fadeOut(Gui.$editableSpan, 300);
	await recordMidi.newTxtStreamAndMaybeLoadUserPiano(_getRecordPath('txt'));
	Gui.animateRecordBtn({ on: true });
}

/**@param {Midi} recordMidi
 @param {Piano|Tone.AudioNode} playbackPiano*/
async function _stopRecord(recordMidi, playbackPiano) {
	console.log('%c_stopRecord', 'color:#a70334');
	let messages = await Python.runAsync('InsideTest/normalize_txt_file.py', { args: [_getRecordPath('txt')], mode: "json" });
	// let messages = await PyFns.normalizeTxtFile(_getRecordPath('txt'));
	await recordMidi.endTxtAndWriteMidi(messages, _getRecordPath('mid'));
	Gui.animateRecordBtn({ on: false });
	const recordName = Gui.setEditableSpanText(null);
	$fadeIn(Gui.$editableSpan, 0);
	Gui.repopulateTruthFiles()
	   .map(async $f => $f.click(async e => await _playTruthFile(e, recordMidi, playbackPiano)));
	EStore.setTruthFilePath(recordName);
	// playbackPiano.dispose();
	Alert.small.success('Saved files', `${recordName}.txt, ${recordName}.mid`);
}

/**@param {String} ext*/
function _getRecordPath(ext) {
	const recordNameNoExt = Gui.getEditableSpanText();
	const recordPathNoExt = path.join(truthsDirPath, recordNameNoExt);
	return `${recordPathNoExt}.${ext}`;
}

/**@param e
 @param {Midi} recordMidi
 @param {Piano|Tone.AudioNode} playbackPiano*/
async function _playTruthFile(e, recordMidi, playbackPiano) {
	console.log('%c_playTruthFile()', 'color:#a70334');
	const id = e.currentTarget.id;
	const $currentTarget = $(e.currentTarget);
	$currentTarget
		.css('color', 'white')
		.text(underscore2space(id) + ' ðŸ”Š');

	const midiFilePath = path.join(truthsDirPath, `${id}.mid`);
	await recordMidi.playMidiFile({ midiFilePath, playbackPiano });
	$currentTarget
		.css('color', 'rgba(255,255,255,0.65)')
		.text(underscore2space(id) + ' ðŸ”ˆ');
}

async function createVidSubVersions() {
	console.log('%c_createVidSubVersions()', 'color:#a70334');
	let truthFilePathNoExt = EStore.truthFilePath();
	const silenceLen = EStore.vidSilenceLen();
	let levels = EStore.currentTest().levels;
	let notesArr = levels.map(level => level.notes).rsort();
	console.log({ notesArr, truthFilePathNoExt });
	let messages = await Python.runAsync('InsideTest/normalize_txt_file.py', { args: [`${truthFilePathNoExt}.txt`], mode: "json" });
	console.log({ messages });
	messages = messages.slice(0, notesArr[0]).map(msg => msg.time_delta);
	let vidsDurations = notesArr.map(notesCount => messages.slice(0, notesCount).reduce((n, m) => n + m));
	for (let [noteCount, vidDur] of zip(notesArr, vidsDurations)) {
		let trimmedPath = await Vid.trimAndForceSilence(`${truthFilePathNoExt}.mp4`, 0, silenceLen, vidDur, noteCount);
		console.log({ trimmedPath });
	}
}

async function trimRawVidFile() {
	console.log('%c_trimRawVidFile()', 'color:#a70334');
	let vidFilePath = await Vid.browseForVideoFile();
	if (vidFilePath == null)
		return; // user cancelled selection
	let vidFileName = path.basename(vidFilePath);
	if (vidFileName.endsWith('_trimmed.mp4')) {
		let { value: shouldTrim } = await Alert.small.warning("Are you sure?", `Looks like this file is already trimmed: ${vidFileName}`, true);
		console.log({ shouldTrim });
		if (!shouldTrim) {
			Alert.small.info('Not trimming.');
			return;
		}
	} // file doesn't end with "_trimmed.mp4"
	vidFilePath = await Vid.maybeMoveVideoFile(vidFilePath);
	let trimmedFilePath = `${remove_ext(vidFilePath)}_trimmed.mp4`;
	let trimmedExists = await path_exists(trimmedFilePath);
	console.log({ trimmedFilePath, trimmedExists });
	if (trimmedExists) {
		let { value: doAnyway } = await Alert.small.warning("A trimmed version of this file already exists. Continue anyway?", `Here: ${trimmedFilePath}`, true);
		console.log({ doAnyway });
		if (doAnyway) {
			await fs.unlinkSync(trimmedFilePath);
		} else {
			Alert.small.info('Not trimming.');
			return;
		}
	}
	const onsets = await Vid.getOnsetTimes(vidFilePath);
	let $onsets = onsets
		.map(o => round(o, 1))
		.map(o =>
			$(`<p class="onset">${o}</p>`)
				.click(async () => {
					console.log(`user chose ${o}`);
					await Vid.trimAndForceSilence(vidFilePath, o, EStore.vidSilenceLen());
					await blockingSwalMixin.close();
					let { value: setAsTruth } = await Alert.small.info('Trimmed successfully. Set as current truth file?', null, true);
					if (setAsTruth) {
						let truthFileNameNoExt = path.basename(vidFilePath, '.mp4');
						EStore.setTruthFilePath(truthFileNameNoExt);
						Alert.small.success(`Set as truth file`, truthFileNameNoExt);
					}
				}));
	await blockingSwalMixin.fire({
		title: 'How long was it until you played the first note?',
		onBeforeOpen: () => $('#swal2-content')
			.show()
			.append($onsets.map($o => $o.text(`${$o.text()}s`)))
	});


}

const recordPage = {
	/**@param {Boolean} reload*/
	switch: async (reload) => {
		EStore.set('last_page', 'record');
		if (reload) {
			const currentWindow = remote.getCurrentWindow();
			currentWindow.reload();
		}
		await $fadeOutMany(100, $MainContent);
		require("pyano_local_modules/sidebar/index.js").to_record();
		$MainContent.empty();
		safeSwitchCss("templates/css/record.css");

		$MainContent.append(
			Gui.$recordBtn,
			Gui.$inputDiv,
			Gui.$recordPath,
			Gui.truthFilesDiv,
			Gui.videoProcessDiv
		);
		$('#video_file_browse_btn')
			.click(async () => await trimRawVidFile());

		$('#video_file_subvideos_btn')
			.click(async () => await createVidSubVersions());
		let recordMidi = new Midi({ muteUserPiano: true });

		let playbackPiano = new Piano(`file:///${EStore.salamanderDirPath()}`, [21, 108], 5).toMaster();

		await $fadeInMany(300, $MainContent);
		let alreadyRecording = false;
		Gui.$getTruthFiles()
		   .map(async $f => $f.click(async e => await _playTruthFile(e, recordMidi, playbackPiano)));
		Gui.$recordBtn.click(async () => {
			if (!alreadyRecording) {

				await _startRecord(recordMidi);

			} else {
				await _stopRecord(recordMidi, playbackPiano);
			}
			alreadyRecording = !alreadyRecording;
		});
	}
};
module.exports = recordPage;
