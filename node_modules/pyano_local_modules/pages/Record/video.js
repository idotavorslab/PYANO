let { bool, Log } = require("pyano_local_modules/util");
let { remote } = require("electron");
let { EStore, Python } = require("pyano_local_modules/ext_libs");
let { Alert } = require("pyano_local_modules/util/Alert");


async function getVideoFilePath() {
	Log.yellow('Vid.getVideoFilePath()');


	const currentWindow = remote.getCurrentWindow();

	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: EStore.truthsDirPath(),
		filters: [{ name: 'Video', extensions: ['mp4'] }],
		title: "Load video file..."
	};
	let files = await remote.dialog.showOpenDialog(currentWindow, dialogOptions);
	console.log('getVideoFilePath() (returning [0])', { files });
	if (!bool(files)) {
		console.warn("!bool(files). returning");
		Alert.small.warning("No files chosen", "Nothing changed.");
		return;
	}
	return files[0];


}

/**@return {Number[]}*/
async function getOnsetTimes(filePath) {
	Log.yellow(`Vid.getOnsetTimes(${filePath})`);
	const options = { args: [filePath] };
	let onsets = await Python.runAsync("Record/get_onset_times.py", options);

	console.log('getOnsetTimes()', { onsets });
	return onsets;


}

/**@param {String} filePath
 @param {Number} firstOnset
 @param {Number} silenceLen
 @param {Number?} toSecs
 @param {Number?} notesNum*/
async function trimAndForceSilence(filePath, firstOnset, silenceLen, toSecs, notesNum) {
	Log.yellow(`Vid.trimAndForceSilence(filePath, ${firstOnset}, ${silenceLen})`);
	const options = { args: [filePath, firstOnset, silenceLen] };
	const trimmedFilePath = await Python.runAsync("Record/trim_and_force_silence.py", options);
	console.log('trimAndForceSilence()', { trimmedFilePath });
	return trimmedFilePath[0];


}

module.exports={ getVideoFilePath, getOnsetTimes, trimAndForceSilence };
