let { bool, Log } = require("pyano_local_modules/util");
let { remote } = require("electron");
let { EStore, Python } = require("pyano_local_modules/ext_libs");
let { Alert } = require("pyano_local_modules/util/Alert");
const fs = require('fs');
const path = require("path");
const vidC = 'color:#55864a';

async function browseForVideoFile() {
	console.log('%cVid.browseForVideoFile()', vidC);


	const currentWindow = remote.getCurrentWindow();

	const dialogOptions = {
		properties: ['openFile'],
		defaultPath: EStore.truthsDirPath(),
		filters: [{ name: 'Video', extensions: ['mp4'] }],
		title: "Load video file..."
	};
	let files = await remote.dialog.showOpenDialog(currentWindow, dialogOptions);
	console.log('browseForVideoFile() (returning [0])', { files });
	if (!bool(files)) {
		console.warn("!bool(files). returning");
		Alert.small.warning("No file chosen", "Nothing changed.");
		return null;
	}
	return files[0];


}

async function maybeMoveVideoFile(filePath) {
	console.log('%cVid.maybeMoveVideoFile(filePath)', vidC);
	const vidFileName = path.basename(filePath);
	const vidNewPath = path.join(EStore.truthsDirPath(), vidFileName);
	if (vidNewPath == filePath)
		return filePath;

	// Chosen file is not in truths dir
	let { value: shouldMove } = await Alert.small.info(`Move ${vidFileName} to truths folder?`, null, true);
	console.log({ shouldMove });
	await fs.renameSync(filePath, vidNewPath);
	Alert.small.success(`Successfully moved ${vidFileName} to truths folder.`);
	return vidNewPath;
}

/**@return {Number[]}*/
async function getOnsetTimes(filePath) {
	console.log(`%cVid.getOnsetTimes(${filePath})`, vidC);
	Alert.small.info('Getting onsets...');
	const options = { args: [filePath] };
	let onsets = await Python.runAsync("Record/get_onset_times.py", options);

	console.log('Vid.getOnsetTimes()', { onsets });
	return onsets;


}

/**@param {String} filePath
 @param {Number} firstOnset
 @param {Number} silenceLen
 @param {Number?} toSecs
 @param {Number?} notesNum*/
async function trimAndForceSilence(filePath, firstOnset, silenceLen, toSecs, notesNum) {
	console.log(`%cVid.trimAndForceSilence(filePath, ${firstOnset}, ${silenceLen}, ${toSecs}, ${notesNum})`, vidC);
	let options = { args: [filePath, firstOnset, silenceLen] };
	if (toSecs && notesNum)
		options.args.push(toSecs, notesNum);
	const trimmedFilePath = await Python.runAsync("Record/trim_and_force_silence.py", options);
	console.log('\tVid.trimAndForceSilence()', { trimmedFilePath });
	return trimmedFilePath[0];


}

module.exports = { maybeMoveVideoFile, browseForVideoFile, getOnsetTimes, trimAndForceSilence };
