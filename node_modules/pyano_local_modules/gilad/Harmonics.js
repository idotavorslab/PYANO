let Salamander = require("./Salamander");
let PianoBase = require("./PianoBase");
let Util = require("./Util");
let Tone = require("tone");

// let noteToMidi = Util.noteToMidi;
// let createSource = Util.createSource;
// let midiToNote = Util.midiToNote;
// let midiToFrequencyRatio = Util.midiToFrequencyRatio;
// let randomBetween = Util.randomBetween;
// let Buffers = Tone.Buffers;
// let Frequency = Tone.Frequency;
// let Sampler = Tone.Sampler;

// the harmonics notes that Salamander has
const harmonics = [21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87];

class Harmonics extends PianoBase {

	constructor(range = [21, 108]) {
		super();

		const lowerIndex = harmonics.findIndex((note) => note >= range[0]);
		let upperIndex = harmonics.findIndex((note) => note >= range[1]);
		upperIndex = upperIndex === -1
		             ? upperIndex = harmonics.length
		             : upperIndex;

		const notes = harmonics.slice(lowerIndex, upperIndex);

		this._samples = {};

		for (let n of notes) {
			this._samples[n] = Salamander.getHarmonicsUrl(n);
		}
	}

	start(note, time, velocity) {
		//make sure it's a valid range
		if (note >= harmonics[0] && note <= harmonics[harmonics.length - 1]) {
			this._sampler.triggerAttack(Util.midiToNote(note), time, velocity * Util.randomBetween(0.5, 1));
		}
	}

	load(baseUrl) {
		return new Promise((success, fail) => {
			this._sampler = new Tone.Sampler(this._samples, success, baseUrl).connect(this.output);
			this._sampler.release = 1;
		});
	}
}

module.exports = Harmonics;
