let Store = require('electron-store');
let Path = require("path");
const fs = require('fs');


class MyStore extends Store {

	constructor(_doTruthFileCheck = true) {
		super();
		this._mode = 'test';
		if (_doTruthFileCheck)
			this._doTruthFileCheck();

	}

	get mode() {
		return this._mode;
	}

	/**@param {'test' | 'exam'} value*/
	set mode(value) {
		if (value != 'test' && value != 'exam')
			throw new Error(`MyStore mode setter, got value: '${value}'. Must be either 'test' or 'exam'`);
		this._mode = value;
	}

	/**@private*/
	_doTruthFileCheck() {
		console.log('MyStore._doTruthFileCheck()');
		const config = this.config();
		const truth = config.truth();
		truth.txt.allExist()
		     .then(async exist => {
			     if (exist) {
				     return Alert.small.success(`All "${truth.name}" txt files exist.`);
			     } else {
				     let txtFilesList = this.truthFilesList('txt').map(fsx.remove_ext);
				     let filteredTxts = txtFilesList.filter(a => txtFilesList.filter(txt => txt.startsWith(a)).length >= 3);
				     if (!bool(filteredTxts))
					     return await Alert.big.warning({
						     title: 'No valid truth files found',
						     html: 'There needs to be at least one txt file with 2 "on" and "off" counterparts.'
					     });


				     await Alert.big.blocking({
					     title: `Truth file invalid: ${truth.name}`,
					     html: '<b>Please choose one of the following valid truths:</b>',
				     }, {
					     strings: filteredTxts,
					     clickFn: async $s => {
						     try {

							     config.finished_trials_count = 0;
							     config.levels = [];
							     config.truth_file_path = new Truth(Path.join(this.truthsDirPath(), $s.text()));


							     reloadPage();
						     } catch (err) {
							     document.getElementById('swal2-title').innerText = err.message;
							     document.getElementById('swal2-content').style.display = 'none';
							     document.getElementsByClassName('swal2-icon swal2-warning')[0].style.display = 'inherit';
							     throw err;
						     }

					     }
				     });
			     }
		     });

	}


	/**@return {Config}*/
	config() {
		return new Config(this.mode);
	}

	// TODO: unused
	/**@param {Truth} truth
	 @returns {Promise<Truth>}
	 setTruthFilePath(truth) {
		console.warn("MyStore.setTruthFilePath() used instead of Config.setTruthFilePath().");
		return truth.txt.allExist()
		            .then(exist => {
			            if (exist) {
				            this.set(`current_${this.mode}.truth_file_path`, `experiments\\truths\\${truth.txt.base.name}`);
				            return truth;
			            } else {
				            throw new Error(`Not all txt files of truth exist: ${truth.txt.base.name}`);
			            }
		            });
	}*/

	// TODO: unused
	/**@param {TDemoType} type
	 setDemoType(type) {
		if (!type.in(['video', 'animation']))
			throw new Error(`setDemoMode(type = ${type}), can be either video or animation`);
		this.set(`current_${this.mode}.demo_type`, type);
	}*/


	/**@example
	 update('subjects', [names])
	 @param {string} K
	 @param kv
	 @return {*} */
	update(K, kv) {
		let V = this.get(K);
		if (Array.isArray(V)) {
			this.set(K, [...V, kv]);
		} else {
			Object.assign(V, kv);
			this.set(K, V);
		}
		return this.get(K);
	}

	/** @param {string} K
	 @return {TConfig} */
	increase(K) {
		let V = this.get(K);

		if (V === undefined)
			this.set(K, 1);
		else if (!isNaN(Math.floor(V)))
			this.set(K, int(V) + 1);
		else
			throw new TypeError("MyStore tried to increase a value that is not a number or string");

		return this.get('current_test');
	}

	get last_page() {
		return this.get('last_page');
	}

	/**@param {TLastPage} page*/
	set last_page(page) {
		const validpages = ['exam', 'new_test', 'inside_test', 'record', 'file_tools', 'settings'];
		if (!page.in(validpages))
			throw new Error(`setLastPage(page = ${page}), must be one of ${validpages.join(', ')}`);

		this.set('last_page', page);
		if (page == 'exam')
			this.mode = 'exam';
		else
			this.mode = 'test';
	}

	/**@return {string}*/
	get root_abs_path() {
		return this.get('root_abs_path');
	}

	/**@param {string[]} subjectList*/
	set subjects(subjectList) {
		this.set('subjects', subjectList);
		const config = this.config();
		if (!(config.current_subject.in(subjectList)))
			config.current_subject = null;
	}

	// TODO: unused
	/**@param {TLastPage} page
	 setLastPage(page) {
		const validpages = ['exam', 'new_test', 'inside_test', 'record', 'file_tools', 'settings'];
		if (!page.in(validpages))
			throw new Error(`setLastPage(page = ${page}), must be one of ${validpages.join(', ')}`);

		this.set('last_page', page);
		if (page == 'exam')
			this.mode = 'exam';
		else
			this.mode = 'test';
	}*/

	/**"C:\Sync\Code\Python\Pyano\pyano_01\src\experiments\truths"
	 @return {string}*/
	truthsDirPath() {
		return Path.join(this.root_abs_path, 'experiments', 'truths');
	}

	/**@param {String?} extFilter
	 @return {string[]} truthFiles*/
	truthFilesList(extFilter = null) {
		if (extFilter != null)
			if (!extFilter.in(['txt', 'mid', 'mp4']))
				throw new Error(`truthFilesList(extFilter = ${extFilter}), must be either ['txt','mid','mp4'] or not at all`);

		const truthsDirPath = this.truthsDirPath();

		let truthFiles = [...new Set(fs.readdirSync(truthsDirPath))];
		if (extFilter != null)
			return truthFiles.filter(f => Path.extname(f) == `.${extFilter}`);
		return truthFiles;
	}

	// TODO: unused
	/**"my_truth[.txt]"
	 @example
	 truthFileName()
	 >>> my_truth
	 truthFileName({withExtension:true})
	 >>> my_truth.txt
	 @param {boolean} withExtension
	 @return {string}
	 truthFileName({ withExtension }) {

		const truthFilePath = this.get(`current_${this.mode}.truth_file_path`);
		if (withExtension)
			return fsx.basename(truthFilePath);
		else
			return fsx.basename(truthFilePath, '.txt');
	}*/

	// TODO: unused
	/**"C:\Sync\Code\Python\Pyano\pyano_01\src\experiments\truths\my_truth[.?]"
	 @example
	 truthFilePath()
	 >>> "C:\Sync\Code\Python\Pyano\pyano_01\src\experiments\truths\my_truth"
	 truthFilePath('mid')
	 >>> "C:\Sync\Code\Python\Pyano\pyano_01\src\experiments\truths\my_truth.mid"
	 @param {String?} ext
	 @return {string}
	 truthFilePath(ext = null) {
		let truthFileName = this.truthFileName({ withExtension: false });
		if (ext != null) {
			if (ext.includes('.'))
				throw new Error(`ext included dot. Pass only file type. received: ${ext}`);
			if (!ext.in(['txt', 'mid', 'mp4']))
				throw new Error(`ext is not txt, mid or mp4. Pass only one of these. received: ${ext}`);

			return Path.join(this.truthsDirPath(), `${truthFileName}.${ext}`);
		} else {
			return Path.join(this.truthsDirPath(), `${truthFileName}`);
		}
	}*/

	// TODO: unused
	/**@return {Truth}
	 truth() {
		return new Truth(Path.join(this.truthsDirPath(), Path.basename(this.get(`current_${this.mode}.truth_file_path`), '.txt')));
	}*/

	/** "C:\Sync\Code\Python\Pyano\pyano_01\src\experiments\subjects"
	 @return {string} */
	subjectsDirPath() {
		return Path.join(this.root_abs_path, 'experiments', 'subjects');
	}


	salamanderDirPath() {
		return Path.join(this.root_abs_path, 'templates', 'Salamander/');
	}

	// TODO: unused
	/**"c:\Sync\Code\Python\Pyano\pyano_01\src\experiments\subjects\gilad\fur_elise"
	 @return {string}
	 testOutPath() {
		const currSubjectDir = Path.join(this.subjectsDirPath(), this.config().current_subject); // ".../subjects/gilad"
		return Path.join(currSubjectDir, this.truth().name);
	}*/

	//	TODO: unused
	/**Gets the current trial's path (join this.testOutPath() and level_${level_index}...), and returns a Truth of it
	 @return {Truth}
	 trialTruth() {
		let [level_index, trial_index] = this.currentTrialCoords();
		// return new Truth(Path.join(this.testOutPath(), `level_${level_index}_trial_${trial_index}`));
		return new Truth(Path.join(this.config().testOutPath(), `level_${level_index}_trial_${trial_index}`));
	}*/

	/**
	 * @return {{
	 * skip_whole_truth_demo: (function(): boolean),
	 * skip_level_intro_demo: (function(): boolean),
	 * skip_failed_trial_feedback: (function(): boolean),
	 * skip_passed_trial_feedback: (function(): boolean)
	 * toObj}
	 * }
	 */
	get dev() {
		const _dev = this.get('dev');
		return {
			skip_whole_truth_demo: () => _dev && this.get('devoptions.skip_whole_truth_demo'),
			skip_level_intro_demo: () => _dev && this.get('devoptions.skip_level_intro_demo'),
			skip_passed_trial_feedback: () => _dev && this.get('devoptions.skip_passed_trial_feedback'),
			skip_failed_trial_feedback: () => _dev && this.get('devoptions.skip_failed_trial_feedback'),
		};
	}

	// ***DYNAMIC CONTENT


	//	TODO: unused
	/*isDemoVideo() {
		return this.config().demo_type == "video";
	}
	*/

	//TODO: unused
	/*isWholeTestOver() {
		let { levels, finished_trials_count } = this.config();
		return sum(levels.map(level => level.trials)) == finished_trials_count;
	}
	*/
	// TODO: unused
	/**@return {number[]}
	 currentTrialCoords() {
		let { levels, finished_trials_count } = this.config();
		let flatTrialsList = levels.map(level => level.trials);
		for (let [levelIndex, trialsNum] of enumerate(flatTrialsList)) {

			let trialSumSoFar = sum(flatTrialsList.slice(0, levelIndex + 1));
			if (trialSumSoFar > finished_trials_count)
				return [levelIndex, trialsNum - (trialSumSoFar - finished_trials_count)];
		}
		throw "currentTrialCoords: out of index error";
	}
	 */

	// TODO: unused
	/**@return {Level}
	 getCurrentLevel() {
		const config = this.config();
		let [level_index, trial_index] = this.currentTrialCoords();
		return new Level(config.levels[level_index], level_index, trial_index);
	}*/

	// TODO: unused
	/**@return {Levels}
	 getLevels() {
		let [level_index, trial_index] = this.currentTrialCoords();
		return new Levels(this.config().levels, level_index, trial_index);
	}*/


}

/**@class*/
class Config extends MyStore {
	/**@param {'test' | 'exam'} mode*/
	constructor(mode) {
		super(false);
		this.mode = mode;


	}

	get _KEYS() {
		return ['allowed_rhythm_deviation',
		        'allowed_tempo_deviation',
		        'current_subject',
		        'demo_type',
		        'errors_playingspeed',
		        'finished_trials_count',
		        'levels',
		        'truth_file_path'];
	}

	/**@param {TConfigKey} key*/
	_get(key) {
		return super.get(`current_${this.mode}.${key}`);
	}

	/**@param {Object | TConfigKey} keyOrObj
	 * @param value*/
	_set(keyOrObj, value) {
		const type = typeof keyOrObj;
		if (type === 'string') {
			super.set(`current_${this.mode}.${keyOrObj}`, value);
			return;
		}
		if (type === 'object') {
			if (keyOrObj.keys().some(key => !key.in(this._KEYS)))
				throw new Error(`Config(${this.mode}).set: "keyOrObj" is object, some keys not in this._KEYS. keyOrObj keys: ${keyOrObj.keys()
				                                                                                                                       .join(', ')}`);
			for (const key in keyOrObj)
				super.set(`current_${this.mode}.${key}`, keyOrObj[key]);

			return;

		}
		throw new TypeError(`Config(${this.mode}).set: arg "keyOrObj" is not string or object. type: ${type}. keyOrObj: ${keyOrObj}`);
	}

	/**@return {string} */
	get allowed_tempo_deviation() {
		return this._get('allowed_tempo_deviation');
	}

	/**@param {string} deviation*/
	set allowed_tempo_deviation(deviation) {
		if (typeof deviation != 'string')
			throw new TypeError(`config set allowed_tempo_deviation, received "deviation" not of type string. deviation: ${deviation}`);
		if (!deviation.endsWith("%"))
			throw new Error(`config set got bad deviation, not % at the end. deviation: ${deviation}`);
		this._set('allowed_tempo_deviation', deviation);
	}

	/**@return {string} */
	get allowed_rhythm_deviation() {
		return this._get('allowed_rhythm_deviation');
	}

	/**@param {string} deviation*/
	set allowed_rhythm_deviation(deviation) {
		if (typeof deviation != 'string')
			throw new TypeError(`config set allowed_rhythm_deviation, received "deviation" not of type string. deviation: ${deviation}`);
		if (!deviation.endsWith("%"))
			throw new Error(`config set got bad deviation, not % at the end. deviation: ${deviation}`);
		this._set('allowed_rhythm_deviation', deviation);
	}


	/**@return {string} */
	get current_subject() {
		return this._get('current_subject');
	}

	/**@param {string|null} name*/
	set current_subject(name) {
		this._set('current_subject', name);
		if (name)
			super.set('subjects', [...super.get('subjects'), name]);
	}


	/**@return {number} */
	get errors_playingspeed() {
		return this._get('errors_playingspeed');
	}

	/**@param {number} speed*/
	set errors_playingspeed(speed) {
		if (isNaN(speed))
			throw new TypeError(`config set errors_playingspeed, received bad "speed" NaN: ${speed}`);
		this._set('errors_playingspeed', speed);

	}


	get demo_type() {
		return this._get('demo_type');
	}

	/**@param {TDemoType} type*/
	set demo_type(type) {
		if (!type.in(['video', 'animation']))
			throw new Error(`setDemoMode(type = ${type}), can be either video or animation`);
		return this._set('demo_type', type);
	}

	/**@return {number} */
	get finished_trials_count() {
		return this._get('finished_trials_count');
	}

	/**@param {number} count*/
	set finished_trials_count(count) {
		this._set('finished_trials_count', count);
	}

	increaseFinishedTrialsCount() {
		this.finished_trials_count = this.finished_trials_count + 1;
	}

	get truth_file_path() {
		return this._get('truth_file_path');
	}

	/**@param {Truth} truth
	 @returns void*/
	set truth_file_path(truth) {
		truth.txt.allExist()
		     .then(exist => {
			     if (exist) {
				     this._set(`truth_file_path`, `experiments/truths/${truth.txt.base.name}`);
			     } else {
				     throw new Error(`Not all txt files of truth exist: ${truth.txt.base.name}`);
			     }
		     });

	}

	get levels() {
		return this._get('levels');
	}

	/**@param {TLevel[]} levels*/
	set levels(levels) {
		if (!Array.isArray(levels))
			throw new Error(`config.set levels, received "levels" not isArray. levels: ${levels}`);
		this._set('levels', levels);
	}

	get learning_type() {
		return this._get('learning_type');
	}

	set learning_type(type) {
		return this._set('learning_type', type);
	}

	/**@return {number[]}*/
	currentTrialCoords() {
		// let { levels, finished_trials_count } = this.config();
		let flatTrialsList = this.levels.map(level => level.trials);
		for (let [levelIndex, trialsNum] of enumerate(flatTrialsList)) {

			let trialSumSoFar = sum(flatTrialsList.slice(0, levelIndex + 1));
			const finishedTrialsCount = this.finished_trials_count;
			if (trialSumSoFar > finishedTrialsCount)
				return [levelIndex, trialsNum - (trialSumSoFar - finishedTrialsCount)];
		}
		throw "currentTrialCoords: out of index error";
	}

	isDemoVideo() {
		return this.demo_type == 'video';
	}

	/**@return {boolean}*/
	isWholeTestOver() {
		return sum(this.levels.map(level => level.trials)) == this.finished_trials_count;
	}

	getSubjectDirNames() {
		return require("fs").readdirSync(Path.join(super.get('root_abs_path'), 'experiments', 'subjects'));
	}

	/**@return {Level}*/
	getCurrentLevel() {

		let [level_index, trial_index] = this.currentTrialCoords();
		return new Level(this.levels[level_index], level_index, trial_index);
	}

	/**@return {Levels}*/
	getLevels() {
		let [level_index, trial_index] = this.currentTrialCoords();
		return new Levels(this.levels, level_index, trial_index);
	}

	/**@return {Truth}*/
	truth() {
		// const truthsDirPath = proto.truthsDirPath();
		// const truthsDirPath = this.truthsDirPath();
		const truthsDirPath = super.truthsDirPath();
		const truthFileName = Path.basename(this.truth_file_path, '.txt');
		return new Truth(Path.join(truthsDirPath, truthFileName));
	}

	/**Gets the current trial's path (join this.testOutPath() and level_${level_index}...), and returns a Truth of it
	 @return {Truth}*/
	trialTruth() {
		let [level_index, trial_index] = this.currentTrialCoords();
		// return new Truth(Path.join(this.testOutPath(), `level_${level_index}_trial_${trial_index}`));
		return new Truth(Path.join(this.testOutPath(), `level_${level_index}_trial_${trial_index}`));
	}

	/**"c:\Sync\Code\Python\Pyano\pyano_01\src\experiments\subjects\gilad\fur_elise"
	 @return {string}*/
	testOutPath() {
		const currSubjectDir = Path.join(super.subjectsDirPath(), this.current_subject); // ".../subjects/gilad"
		return Path.join(currSubjectDir, this.truth().name);
	}


}

/**
 * @type {MyStore}
 */
module.exports = MyStore;
