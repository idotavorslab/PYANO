"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.group(`util.js`);
const MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
function isObject(obj) {
    return typeof obj === 'object' && !!obj;
}
exports.isObject = isObject;
function shallowProperty(key) {
    return function (obj) {
        return obj == null ? void 0 : obj[key];
    };
}
exports.shallowProperty = shallowProperty;
function getLength(collection) {
    return shallowProperty('length')(collection);
}
exports.getLength = getLength;
function anyDefined(obj) {
    let array;
    if (isObject(obj)) {
        array = Object.values(obj);
    }
    else if (isArray(obj)) {
        array = obj;
    }
    else {
        throw new TypeError(`expected array or obj, got: ${typeof obj}`);
    }
    return array.filter(x => x !== undefined).length > 0;
}
exports.anyDefined = anyDefined;
function equalsAny(obj, ...others) {
    if (!others) {
        console.warn('Not even one other was passed');
        return false;
    }
    let strict = !(isArrayLike(obj) && isObject(obj[obj.length - 1]) && obj[obj.length - 1].strict == false);
    const _isEq = (_obj, _other) => strict ? _obj === _other : _obj == _other;
    for (let other of others) {
        if (_isEq(obj, other)) {
            return true;
        }
    }
    return false;
}
exports.equalsAny = equalsAny;
function anyTruthy(obj) {
    let array;
    if (isObject(obj)) {
        array = Object.values(obj);
    }
    else if (isArray(obj)) {
        array = obj;
    }
    else {
        throw new TypeError(`expected array or obj, got: ${typeof obj}`);
    }
    return array.filter(x => bool(x)).length > 0;
}
exports.anyTruthy = anyTruthy;
function allUndefined(obj) {
    let array;
    if (isObject(obj)) {
        array = Object.values(obj);
    }
    else if (isArray(obj)) {
        array = obj;
    }
    else {
        throw new TypeError(`expected array or obj, got: ${typeof obj}`);
    }
    return array.filter(x => x !== undefined).length === 0;
}
exports.allUndefined = allUndefined;
function isArrayLike(collection) {
    const length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
}
exports.isArrayLike = isArrayLike;
function enumerate(obj) {
    let typeofObj = typeof obj;
    if (obj === undefined
        || isEmptyObj(obj)
        || isEmptyArr(obj)
        || obj === "") {
        return [];
    }
    if (obj === null
        || typeofObj === "boolean"
        || typeofObj === "number"
        || typeofObj === "function") {
        throw new TypeError(`${typeofObj} object is not iterable`);
    }
    let array = [];
    if (isArray(obj)) {
        let i = 0;
        for (let x of obj) {
            array.push([i, x]);
            i++;
        }
    }
    else {
        for (let prop in obj) {
            array.push([prop, obj[prop]]);
        }
    }
    return array;
}
exports.enumerate = enumerate;
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
exports.wait = wait;
function bool(val) {
    if (!val) {
        return false;
    }
    const typeofval = typeof val;
    if (typeofval !== 'object') {
        if (typeofval === 'function') {
            return true;
        }
        else {
            return !!val;
        }
    }
    let toStringed = {}.toString.call(val);
    if (toStringed === '[object Object]' || toStringed === '[object Array]') {
        return Object.keys(val).length !== 0;
    }
    return !!val.valueOf();
}
exports.bool = bool;
function isArray(obj) {
    if (!obj) {
        return false;
    }
    return typeof obj !== 'string' && (Array.isArray(obj) || typeof obj[Symbol.iterator] === 'function');
}
exports.isArray = isArray;
function isEmptyArr(collection) {
    return isArray(collection) && getLength(collection) === 0;
}
exports.isEmptyArr = isEmptyArr;
function isEmptyObj(obj) {
    return isObject(obj) && !isArray(obj) && Object.keys(obj).length === 0;
}
exports.isEmptyObj = isEmptyObj;
function isFunction(fn) {
    let toStringed = {}.toString.call(fn);
    return !!fn && toStringed === '[object Function]';
}
exports.isFunction = isFunction;
exports.str = (val) => val ? val.toString() : "";
function sum(arr) {
    let sum = 0;
    let dirty = false;
    for (let v of arr) {
        let number = parseFloat(v);
        if (!isNaN(number)) {
            dirty = true;
            sum += number;
        }
    }
    return !dirty ? null : sum;
}
exports.sum = sum;
function* range(start, stop) {
    for (let i = start; i <= stop; i++) {
        yield i;
    }
}
exports.range = range;
function round(n, d = 0) {
    const fr = 10 ** d;
    return Math.floor(n * fr) / fr;
}
exports.round = round;
function small(...args) {
    return [`%c${args.join(' ')}`, `font-size:10px`];
}
exports.small = small;
function any(collection) {
    return collection.some(item => bool(item));
}
exports.any = any;
function all(collection) {
    return collection.every(item => bool(item));
}
exports.all = all;
function* zip(arr1, arr2) {
    for (let key in arr1) {
        yield [arr1[key], arr2[key]];
    }
}
exports.zip = zip;
function $fadeOut(jQuery, ms) {
    return new Promise(resolve => jQuery.fade(ms, 0, resolve));
}
exports.$fadeOut = $fadeOut;
function $fadeIn(jQuery, ms) {
    return new Promise(resolve => jQuery.fade(ms, 1, resolve));
}
exports.$fadeIn = $fadeIn;
async function $fadeInMany(ms, ...jQueries) {
    let promises = [];
    for (let jQ of jQueries) {
        promises.push($fadeIn(jQ, ms));
    }
    return await Promise.all(promises);
}
exports.$fadeInMany = $fadeInMany;
async function $fadeOutMany(ms, ...jQueries) {
    let promises = [];
    for (let jQ of jQueries) {
        promises.push($fadeOut(jQ, ms));
    }
    return await Promise.all(promises);
}
exports.$fadeOutMany = $fadeOutMany;
async function concurrent(...promises) {
    return await Promise.all(promises);
}
exports.concurrent = concurrent;
function getCurrentWindow() {
    const { remote } = require("electron");
    return remote.getCurrentWindow();
}
exports.getCurrentWindow = getCurrentWindow;
function reloadPage() {
    getCurrentWindow().reload();
}
exports.reloadPage = reloadPage;
exports.strong = (s) => `<strong>${s}</strong>`;
exports.bold = s => `<b>${s}</b>`;
function $midVertAlign(html) {
    const $ = require("jquery");
    return $('<div class="mid-v-align-container">')
        .append($('<span class="mid-v-align">').html(html));
}
exports.$midVertAlign = $midVertAlign;
console.log('util.js EOF');
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,