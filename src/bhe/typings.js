"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"typings.js","sourceRoot":"","sources":["typings.ts"],"names":[],"mappings":"","sourcesContent":["// TODO: why <EventName> needed in allOff()?\n\n\nimport { BetterHTMLElement } from \"./index\";\n\nexport interface TMap<T> {\n    [s: string]: T;\n\n    [s: number]: T\n}\n\nexport interface TRecMap<T> {\n    [s: string]: T | TRecMap<T>;\n\n    [s: number]: T | TRecMap<T>\n}\n\n// type IMap<T> = {\n//     [s in keyof T]: T\n// }\n\n\n// type EventNameFunctionMapOrig<E extends EventName> = {\n//     [P in E]?: (event: HTMLElementEventMap[P]) => void;\n// }[E];\n//\n// type EventNameFunctionMap2<E extends EventName> = E extends EventName ? (event: HTMLElementEventMap[E]) => void : never;\n// type EventNameFunctionMap3 = {\n//     [P in EventName]?: (event: HTMLElementEventMap[P]) => void;\n// }\n// type EventNameFunctionMap4<E extends EventName> = {\n//     [P in EventName]?: (event: HTMLElementEventMap[P]) => void;\n// }\nexport type EventName = keyof HTMLElementEventMap;\n// EventName2Function<\"click\"> → function(event: MouseEvent) { }\nexport type EventName2Function<E extends EventName = EventName> = {\n    [P in EventName]?: (event: HTMLElementEventMap[P]) => void;\n}[E]\n// e.g. { \"mouseover\" : MouseEvent, ... }\nexport type MapOfEventName2Function = Partial<Record<keyof HTMLElementEventMap, EventName2Function>>\n\n\n/*type MouseOverFunction = EventName2Function<\"mouseover\">;\n\n\nfunction expectsMouseEventFunction(fn: (event: MouseEvent) => void) {\n\n}\n\nconst mouseEventFunction: MouseOverFunction = (event: MouseEvent) => {\n};\n\nexpectsMouseEventFunction(mouseEventFunction);\n\nfunction expectsMouseEventFunctionPairs(pairs: MapOfEventName2Function) {\n    for (let [evName, evFn] of Object.entries(pairs)) {\n        expectsMouseEventFunction(evFn)\n    }\n\n}\n\nconst pairs: MapOfEventName2Function = {\"mouseover\": mouseEventFunction};\nexpectsMouseEventFunctionPairs(pairs);*/\n\n\n// // HTMLTag2HTMLElement<\"a\"> → HTMLAnchorElement\n// type HTMLTag2HTMLElement<K extends keyof HTMLElementTagNameMap> = {\n//     [P in K]: HTMLElementTagNameMap[P]\n// }[K]\n//\n// // HTMLTag2HTMLElement2[\"a\"] → HTMLAnchorElement\n// type HTMLTag2HTMLElement2 = {\n//     [P in keyof HTMLElementTagNameMap]: HTMLElementTagNameMap[P]\n// }\n//\n// // const a: HTMLTag2HTMLElement<\"a\"> = undefined;\n// // const b: HTMLTag2HTMLElement2[\"a\"] = undefined;\n\n\n/**\n * \"a\", \"div\"\n * @example\n * const foo = <K extends Tag>(tag: K) => document.createElement(tag);\n * foo(\"a\") → HTMLAnchorElement\n * foo(\"BAD\") // error\n */\nexport type Tag = Exclude<keyof HTMLElementTagNameMap, \"object\">;\nexport type NotTag<T extends Tag> = Exclude<Tag, T>;\nexport type QueryOrPreciseTag<Q, T extends Tag> = Exclude<Q, QuerySelector<NotTag<T>>>;\n// /**\n//  *\"a\", \"div\", \"gilad\".\n//  *Tag2Element expects a tag and returns an HTMLElement.\n//  *@example\n//  *const baz = <K extends Tag | string>(query: K) => document.querySelector(query);\n//  *baz(\"div\") → HTMLDivElement\n//  *baz(\"diva\") → HTMLSelectElement | HTMLLegendElement | ...\n//  */\n// type Tag2Element<K extends Tag = Tag> = K extends Tag ? HTMLElementTagNameMap[K] : HTMLElementTagNameMap[Tag]\nexport type TagOrString = Tag | string;\n/**\n * \"a\", \"div\", \"gilad\".\n * QuerySelector expects a tag and returns a Tag.\n * @example\n * const bar = <K extends Tag | string>(query: QuerySelector<K>) => document.querySelector(query);\n * bar(\"a\") → HTMLAnchorElement\n * bar(\"gilad\") → HTMLSelectElement | HTMLLegendElement | ...\n */\nexport type QuerySelector<K extends TagOrString = TagOrString> = K extends Tag ? K : string;\n\n// const foo = <K extends Tag>(tag: K) => document.createElement(tag);\n\n// const baz = <K extends Tag | string>(query: K) => document.querySelector(query);\n\n// const bar = <K extends Tag | string>(query: QuerySelector<K>) => document.querySelector(query);\n\n// Tag2BHE[\"a\"] → Anchor\n/*\ninterface Tag2BHE {\n    \"img\": Img,\n    \"a\": Anchor,\n    \"input\": Input<HTMLInputElement>,\n    \"div\": Div,\n    \"p\": Paragraph,\n    \"button\": Button,\n    \"span\": Span,\n}\n*/\n\n\n// type BHETag = keyof Tag2BHE;\n// type BHEHTMLElement =\n//     HTMLAnchorElement |\n//     HTMLInputElement |\n//     HTMLImageElement |\n//     HTMLParagraphElement |\n//     HTMLDivElement |\n//     HTMLButtonElement |\n//     HTMLSpanElement;\n//\n// type StdBHEHTMLElement =\n//     HTMLParagraphElement |\n//     HTMLDivElement |\n//     HTMLButtonElement |\n//     HTMLSpanElement\n\nexport type Element2Tag<T> =\n    T extends HTMLInputElement ? \"input\"\n        : T extends HTMLAnchorElement ? \"a\"\n        : T extends HTMLImageElement ? \"img\"\n            : Tag\n\n// type MapValues<T> = { [K in keyof T]: T[K] }[keyof T];\n\n// HTMLDivElement, ...\n// type HTMLElements = MapValues<HTMLElementTagNameMap>;\n// type Filter<T> = T extends HTMLElements ? T : never;\n// type GenericFilter<T, U> = T extends U ? T : never;\n\n// const what: Element2Tag<HTMLDivElement> = undefined;\n// const what: Filter<HTMLInputElement, HTMLElements> = undefined;\n// const what: Filter<HTMLInputElement> = undefined;\n// const what: Element2Tag<HTMLAnchorElement> = undefined;\n\n\n// type ChildrenObj = TMap<Tag2Element> | TRecMap<Tag2Element>\n// type ChildrenObj = TMap<QuerySelector> | TRecMap<QuerySelector>\nexport type ChildrenObj = TRecMap<QuerySelector | BetterHTMLElement | typeof BetterHTMLElement>\nexport type Enumerated<T> =\n    T extends (infer U)[] ? [number, U][]\n        : T extends TRecMap<(infer U)> ? [keyof T, U][]\n        : T extends boolean ? never : any;\nexport type Returns<T> = (s: string) => T;\n// type TReturnBoolean = (s: string) => boolean;\n\n\nexport type Awaited<T> = T extends Promise<infer U> ? U : T;\n// type Callable<T1, T2, F> = F extends (a1: T1, a2: T2) => infer R ? R : any;\n// type Callable2<T1, F> = F extends (a1: T1, a2: HTMLElement) => infer R ? R : any;\n\n\n/////////////////////////////////////////////////\n/////////////// CSS /////////////////////////////\n/////////////////////////////////////////////////\n\n// TODO: https://www.npmjs.com/package/csstype\nexport type OmittedCssProps = \"animationDirection\"\n    | \"animationFillMode\"\n    | \"animationIterationCount\"\n    | \"animationPlayState\"\n    | \"animationTimingFunction\"\n    | \"opacity\"\n    | \"padding\"\n    | \"paddingBottom\"\n    | \"paddingLeft\"\n    | \"paddingRight\"\n    | \"paddingTop\"\n    | \"preload\"\n    | \"width\"\nexport type PartialCssStyleDeclaration = Omit<Partial<CSSStyleDeclaration>, OmittedCssProps>;\n\nexport interface CssOptions extends PartialCssStyleDeclaration {\n    animationDirection?: AnimationDirection;\n    animationFillMode?: AnimationFillMode;\n    animationIterationCount?: number;\n    animationPlayState?: AnimationPlayState;\n    animationTimingFunction?: AnimationTimingFunction;\n    opacity?: string | number;\n    padding?: string | number;\n    paddingBottom?: string | number;\n    paddingLeft?: string | number;\n    paddingRight?: string | number;\n    paddingTop?: string | number;\n    preload?: \"auto\" | string;\n    width?: string | number;\n}\n\n\nexport type CubicBezierFunction = [number, number, number, number];\nexport type Jumpterm = 'jump-start' | 'jump-end' | 'jump-none' | 'jump-both' | 'start' | 'end';\n\n/**Displays an animation iteration along n stops along the transition, displaying each stop for equal lengths of time.\n * For example, if n is 5,  there are 5 steps.\n * Whether the animation holds temporarily at 0%, 20%, 40%, 60% and 80%, on the 20%, 40%, 60%, 80% and 100%, or makes 5 stops between the 0% and 100% along the animation, or makes 5 stops including the 0% and 100% marks (on the 0%, 25%, 50%, 75%, and 100%) depends on which of the following jump terms is used*/\nexport type StepsFunction = [number, Jumpterm];\nexport type AnimationTimingFunction =\n    'linear'\n    | 'ease'\n    | 'ease-in'\n    | 'ease-out'\n    | 'ease-in-out'\n    | 'step-start'\n    | 'step-end'\n    | StepsFunction\n    | CubicBezierFunction\nexport type AnimationDirection = 'normal' | 'reverse' | 'alternate' | 'alternate-reverse';\nexport type AnimationFillMode = 'none' | 'forwards' | 'backwards' | 'both';\n\nexport interface TransformOptions {\n    matrix?: [number, number, number, number, number, number],\n    matrix3d?: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number],\n    perspective?: string, // px\n    rotate?: string, // deg\n    rotate3d?: [number, number, number, string] // [,,,deg]\n    rotateX?: string,\n    rotateY?: string,\n    rotateZ?: string,\n    scale?: number, // 1.5\n    scale3d?: [number, number, number],\n    scaleX?: [number, number, number],\n    scaleY?: [number, number, number],\n    skew?: [string, string] // deg, deg\n    skewX?: string,\n    skewY?: string,\n    translate?: [string, string], // px, px\n    translate3d?: [string, string, string],\n    translateX?: string,\n    translateY?: string,\n    translateZ?: string,\n\n\n}\n\nexport interface AnimateOptions {\n    delay?: string;\n    direction?: AnimationDirection;\n    duration: string;\n    fillMode?: AnimationFillMode;\n    iterationCount?: number;\n    name: string;\n    playState?: AnimationPlayState;\n    /** Also accepts:\n     * cubic-bezier(p1, p2, p3, p4)\n     * 'ease' == 'cubic-bezier(0.25, 0.1, 0.25, 1.0)'\n     * 'linear' == 'cubic-bezier(0.0, 0.0, 1.0, 1.0)'\n     * 'ease-in' == 'cubic-bezier(0.42, 0, 1.0, 1.0)'\n     * 'ease-out' == 'cubic-bezier(0, 0, 0.58, 1.0)'\n     * 'ease-in-out' == 'cubic-bezier(0.42, 0, 0.58, 1.0)'\n     * */\n    timingFunction?: AnimationTimingFunction;\n}\n\n"]}