"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('MyFs.index.ts');
const fs = require("fs");
const path = require("path");
const util_1 = require("../util");
function createIfNotExists(path) {
    try {
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
            console.warn(`createIfNotExists(path) created: ${path}`);
            return false;
        }
        return true;
    }
    catch (e) {
        console.error(`createIfNotExists(${path})`, e);
    }
}
function isEmpty(abspath, { recursive }) {
    const items = fs.readdirSync(abspath);
    if (!recursive) {
        return !util_1.bool(items);
    }
    for (let item of items) {
        const itemAbs = path.join(abspath, item);
        let stats = fs.statSync(itemAbs);
        if (stats.isDirectory()) {
            let empty = isEmpty(itemAbs, { recursive: true });
            if (!empty) {
                return false;
            }
        }
        else {
            return false;
        }
    }
    return true;
}
function getEmptyDirs(abspath) {
    const emptyDirs = [];
    const items = fs.readdirSync(abspath);
    let removedFiles = false;
    if (!util_1.bool(items))
        return [abspath];
    for (let item of items) {
        const itemAbs = path.join(abspath, item);
        let stats = fs.statSync(itemAbs);
        if (stats.isDirectory()) {
            if (isEmpty(itemAbs, { recursive: true })) {
                emptyDirs.push(itemAbs);
            }
            else {
                emptyDirs.push(...getEmptyDirs(itemAbs));
            }
        }
        else {
            console.log('stats.size:', stats.size);
            if (stats.size === 0) {
                fs.unlinkSync(itemAbs);
                removedFiles = true;
            }
        }
    }
    if (removedFiles) {
        return getEmptyDirs(abspath);
    }
    return emptyDirs;
}
function removeEmptyDirs(abspath) {
    const emptydirs = getEmptyDirs(abspath);
    console.log({ emptydirs });
    for (let dir of emptydirs) {
        fs.rmdirSync(dir);
    }
}
exports.default = {
    createIfNotExists,
    isEmpty,
    getEmptyDirs,
    removeEmptyDirs
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDN0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixrQ0FBK0I7QUFJL0IsU0FBUyxpQkFBaUIsQ0FBQyxJQUFZO0lBQ25DLElBQUk7UUFDQSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLElBQUksRUFBRSxDQUFDLENBQUM7WUFDekQsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQztLQUdmO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNsRDtBQUNMLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxPQUFlLEVBQUUsRUFBRSxTQUFTLEVBQTBCO0lBQ25FLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNaLE9BQU8sQ0FBQyxXQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDdEI7SUFDRCxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRTtRQUNwQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWpDLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3JCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNSLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1NBQ0o7YUFBTTtZQUNILE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0tBQ0o7SUFDRCxPQUFPLElBQUksQ0FBQztBQUVoQixDQUFDO0FBR0QsU0FBUyxZQUFZLENBQUMsT0FBZTtJQUNqQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDckIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDekIsSUFBSSxDQUFDLFdBQUksQ0FBQyxLQUFLLENBQUM7UUFDWixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFckIsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDcEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqQyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUNyQixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtnQkFDdkMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMzQjtpQkFBTTtnQkFDSCxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDNUM7U0FDSjthQUFNO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZCLFlBQVksR0FBRyxJQUFJLENBQUM7YUFDdkI7U0FDSjtLQUNKO0lBQ0QsSUFBSSxZQUFZLEVBQUU7UUFFZCxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNoQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBRXJCLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxPQUFlO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUMzQixLQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsRUFBRTtRQUN2QixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3BCO0FBQ0wsQ0FBQztBQUVELGtCQUFlO0lBRVgsaUJBQWlCO0lBQ2pCLE9BQU87SUFDUCxZQUFZO0lBQ1osZUFBZTtDQUNsQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0IG15ZnMgZnJvbSBcIi4uL015RnNcIjsqL1xuY29uc29sZS5sb2coJ015RnMuaW5kZXgudHMnKTtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgYm9vbCB9IGZyb20gXCIuLi91dGlsXCI7XG5cblxuLyoqUmV0dXJucyB3aGV0aGVyIGV4aXN0ZWQgYWxyZWFkeSovXG5mdW5jdGlvbiBjcmVhdGVJZk5vdEV4aXN0cyhwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAgICAgICAgIGZzLm1rZGlyU3luYyhwYXRoKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgY3JlYXRlSWZOb3RFeGlzdHMocGF0aCkgY3JlYXRlZDogJHtwYXRofWApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGNyZWF0ZUlmTm90RXhpc3RzKCR7cGF0aH0pYCwgZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KGFic3BhdGg6IHN0cmluZywgeyByZWN1cnNpdmUgfTogeyByZWN1cnNpdmU6IGJvb2xlYW4gfSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGl0ZW1zID0gZnMucmVhZGRpclN5bmMoYWJzcGF0aCk7XG4gICAgaWYgKCFyZWN1cnNpdmUpIHtcbiAgICAgICAgcmV0dXJuICFib29sKGl0ZW1zKVxuICAgIH1cbiAgICBmb3IgKGxldCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1BYnMgPSBwYXRoLmpvaW4oYWJzcGF0aCwgaXRlbSk7XG4gICAgICAgIGxldCBzdGF0cyA9IGZzLnN0YXRTeW5jKGl0ZW1BYnMpO1xuXG4gICAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICBsZXQgZW1wdHkgPSBpc0VtcHR5KGl0ZW1BYnMsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgaWYgKCFlbXB0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcblxufVxuXG4vKipSZXR1cm5zIGEgbGlzdCBvZiBhYnNvbHV0ZSBwYXRocyBvZiBlbXB0eSBkaXJzKi9cbmZ1bmN0aW9uIGdldEVtcHR5RGlycyhhYnNwYXRoOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgZW1wdHlEaXJzID0gW107XG4gICAgY29uc3QgaXRlbXMgPSBmcy5yZWFkZGlyU3luYyhhYnNwYXRoKTtcbiAgICBsZXQgcmVtb3ZlZEZpbGVzID0gZmFsc2U7XG4gICAgaWYgKCFib29sKGl0ZW1zKSlcbiAgICAgICAgcmV0dXJuIFthYnNwYXRoXTtcblxuICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgY29uc3QgaXRlbUFicyA9IHBhdGguam9pbihhYnNwYXRoLCBpdGVtKTtcbiAgICAgICAgbGV0IHN0YXRzID0gZnMuc3RhdFN5bmMoaXRlbUFicyk7XG4gICAgICAgIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICBpZiAoaXNFbXB0eShpdGVtQWJzLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KSkge1xuICAgICAgICAgICAgICAgIGVtcHR5RGlycy5wdXNoKGl0ZW1BYnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbXB0eURpcnMucHVzaCguLi5nZXRFbXB0eURpcnMoaXRlbUFicykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXRzLnNpemU6Jywgc3RhdHMuc2l6ZSk7XG4gICAgICAgICAgICBpZiAoc3RhdHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZzLnVubGlua1N5bmMoaXRlbUFicyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZEZpbGVzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVtb3ZlZEZpbGVzKSB7XG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBUYWlsUmVjdXJzaW9uSlNcbiAgICAgICAgcmV0dXJuIGdldEVtcHR5RGlycyhhYnNwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGVtcHR5RGlycztcblxufVxuXG5mdW5jdGlvbiByZW1vdmVFbXB0eURpcnMoYWJzcGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgZW1wdHlkaXJzID0gZ2V0RW1wdHlEaXJzKGFic3BhdGgpO1xuICAgIGNvbnNvbGUubG9nKHsgZW1wdHlkaXJzIH0pO1xuICAgIGZvciAobGV0IGRpciBvZiBlbXB0eWRpcnMpIHtcbiAgICAgICAgZnMucm1kaXJTeW5jKGRpcilcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNyZWF0ZUlmTm90RXhpc3RzLFxuICAgIGlzRW1wdHksXG4gICAgZ2V0RW1wdHlEaXJzLFxuICAgIHJlbW92ZUVtcHR5RGlyc1xufVxuIl19