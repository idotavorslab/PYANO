"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("../util");
class LevelNew {
    constructor(level, index, internalTrialIndex) {
        if (index === undefined) {
            console.error(`LevelNew ctor, index is undefined. Continuing with index=0`);
            index = 0;
        }
        const { notes, rhythm, tempo, trials } = level;
        this.notes = notes;
        this.rhythm = rhythm;
        this.tempo = tempo;
        this.trials = trials;
        this.index = index;
        this.internalTrialIndex = internalTrialIndex;
    }
    toJSON() {
        const { notes, rhythm, tempo, trials } = this;
        return { notes, rhythm, tempo, trials };
    }
    isFirstTrial() {
        if (this.internalTrialIndex === undefined) {
            alert("internalTrialIndex is undefined");
        }
        return this.internalTrialIndex === 0;
    }
    isLastTrial() {
        return this.internalTrialIndex === this.trials - 1;
    }
    hasZeroes() {
        return !util.bool(this.notes) || !util.bool(this.trials);
    }
    valuesOk() {
        if (!util.bool(this.notes) || !util.bool(this.trials)) {
            return false;
        }
        if (this.rhythm) {
            if (!util.bool(this.tempo)) {
                return false;
            }
        }
        else {
            if (util.bool(this.tempo)) {
                return false;
            }
        }
        return true;
    }
}
exports.LevelNew = LevelNew;
class LevelNewCollection {
    constructor(levels, currentLevelIndex, currentInternalTrialIndex) {
        this._levels = levels.map((level, index) => new LevelNew(level, index));
        if (currentLevelIndex !== undefined) {
            this.current = this._levels[currentLevelIndex];
            this.current.internalTrialIndex = currentInternalTrialIndex;
        }
    }
    get length() {
        return this._levels.length;
    }
    get previous() {
        return this.get(this.current.index - 1);
    }
    get(i) {
        return this._levels[i];
    }
    badLevels() {
        const badLevels = [];
        for (let [i, level] of util.enumerate(this._levels)) {
            if (!level.valuesOk()) {
                badLevels.push(`${i.human()} level `);
            }
        }
        return badLevels;
    }
    someHaveZeroes() {
        return this._levels.some(level => level.hasZeroes());
    }
    slicesByNotes() {
        let byNotes = {};
        for (let level of this._levels) {
            if (level.notes in byNotes) {
                byNotes[level.notes].addLevel(level);
            }
            else {
                byNotes[level.notes] = new LevelNewCollection([level]);
            }
        }
        return Object.values(byNotes);
    }
    addLevel(level) {
        this._levels.push(level);
    }
    getNextTempoOfThisNotes() {
        if (this.current.rhythm) {
            return this.current.tempo;
        }
        for (let i = this.current.index; i < this._levels.length; i++) {
            const lvl = this._levels[i];
            if (lvl.notes != this.current.notes) {
                return 100;
            }
            if (lvl.tempo != null) {
                return lvl.tempo;
            }
        }
        return 100;
    }
    isCurrentLastLevel() {
        return this.current.index == this.length - 1;
    }
    maxNotes() {
        return Math.max(...this._levels.map(lvl => lvl.notes));
    }
    [Symbol.iterator]() {
        return this._levels.values();
    }
}
exports.LevelNewCollection = LevelNewCollection;
class Level {
    constructor(level, index, internalTrialIndex) {
        if (index == undefined) {
            alert("Level(level, index, internalTrialIndex) index is undefined");
        }
        const { notes, rhythm, tempo, trials } = level;
        this.notes = notes;
        this.rhythm = rhythm;
        this.tempo = tempo;
        this.trials = trials;
        this.index = index;
        this.internalTrialIndex = internalTrialIndex;
    }
    isFirstTrial() {
        if (this.internalTrialIndex == undefined) {
            alert("internalTrialIndex is undefined");
        }
        return this.internalTrialIndex == 0;
    }
    isLastTrial() {
        return this.internalTrialIndex == this.trials - 1;
    }
    hasZeroes() {
        return !util.bool(this.notes) || !util.bool(this.trials);
    }
}
exports.Level = Level;
class Levels {
    constructor(levels, currentLevelIndex, currentInternalTrialIndex) {
        this._levels = levels.map((level, index) => new Level(level, index));
        if (currentLevelIndex != undefined) {
            this.current = this._levels[currentLevelIndex];
            this.current.internalTrialIndex = currentInternalTrialIndex;
        }
    }
    get length() {
        return this._levels.length;
    }
    get(i) {
        return this._levels[i];
    }
    someHaveZeroes() {
        return this._levels.some(level => level.hasZeroes());
    }
    slicesByNotes() {
        let byNotes = {};
        for (let level of this._levels) {
            if (level.notes in byNotes) {
                byNotes[level.notes].addLevel(level);
            }
            else {
                byNotes[level.notes] = new Levels([level]);
            }
        }
        return Object.values(byNotes);
    }
    addLevel(level) {
        this._levels.push(level);
    }
    getNextTempoOfThisNotes() {
        if (this.current.rhythm) {
            return this.current.tempo;
        }
        for (let i = this.current.index; i < this._levels.length; i++) {
            const lvl = this._levels[i];
            if (lvl.notes != this.current.notes) {
                return 100;
            }
            if (lvl.tempo != null) {
                return lvl.tempo;
            }
        }
        return 100;
    }
    isCurrentLastLevel() {
        return this.current.index == this.length - 1;
    }
    maxNotes() {
        return Math.max(...this._levels.map(lvl => lvl.notes));
    }
    [Symbol.iterator]() {
        return this._levels.values();
    }
}
exports.Levels = Levels;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdDQUFnQztBQVVoQyxNQUFhLFFBQVE7SUFRakIsWUFBWSxLQUFnQixFQUFFLEtBQWEsRUFBRSxrQkFBMkI7UUFDcEUsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztZQUM1RSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7UUFDRCxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDOUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFHRCxZQUFZO1FBQ1IsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLENBQUMsa0JBQWtCLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFHRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsa0JBQWtC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QUFFLENBQUM7SUFDakMsQ0FBQztDQUNKO0FBakZELHdCQWlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IFRMZXZlbCB9IGZyb20gXCIuLi90ZW1wbGF0ZXMvanMvdHlwZXMuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTGV2ZWxOZXcge1xuICAgIG5vdGVzOiBudW1iZXI7XG4gICAgcmh5dGhtOiBib29sZWFuO1xuICAgIHRlbXBvOiBudW1iZXIgfCBudWxsO1xuICAgIHRyaWFsczogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTGV2ZWxOZXcgaW1wbGVtZW50cyBJTGV2ZWxOZXcge1xuICAgIHJlYWRvbmx5IG5vdGVzOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgcmh5dGhtOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHRlbXBvOiBudW1iZXIgfCBudWxsO1xuICAgIHJlYWRvbmx5IHRyaWFsczogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XG4gICAgaW50ZXJuYWxUcmlhbEluZGV4OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihsZXZlbDogSUxldmVsTmV3LCBpbmRleDogbnVtYmVyLCBpbnRlcm5hbFRyaWFsSW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYExldmVsTmV3IGN0b3IsIGluZGV4IGlzIHVuZGVmaW5lZC4gQ29udGludWluZyB3aXRoIGluZGV4PTBgKTtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG5vdGVzLCByaHl0aG0sIHRlbXBvLCB0cmlhbHMgfSA9IGxldmVsO1xuICAgICAgICB0aGlzLm5vdGVzID0gbm90ZXM7XG4gICAgICAgIHRoaXMucmh5dGhtID0gcmh5dGhtO1xuICAgICAgICB0aGlzLnRlbXBvID0gdGVtcG87XG4gICAgICAgIHRoaXMudHJpYWxzID0gdHJpYWxzO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxUcmlhbEluZGV4ID0gaW50ZXJuYWxUcmlhbEluZGV4O1xuICAgIH1cblxuICAgIHRvSlNPTigpOiBJTGV2ZWxOZXcge1xuICAgICAgICBjb25zdCB7IG5vdGVzLCByaHl0aG0sIHRlbXBvLCB0cmlhbHMgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7IG5vdGVzLCByaHl0aG0sIHRlbXBvLCB0cmlhbHMgfTtcbiAgICB9XG5cbiAgICAvKipAZGVwcmVjYXRlZCovXG4gICAgaXNGaXJzdFRyaWFsKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5pbnRlcm5hbFRyaWFsSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWxlcnQoXCJpbnRlcm5hbFRyaWFsSW5kZXggaXMgdW5kZWZpbmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVHJpYWxJbmRleCA9PT0gMDtcbiAgICB9XG5cbiAgICAvKipAZGVwcmVjYXRlZCovXG4gICAgaXNMYXN0VHJpYWwoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVHJpYWxJbmRleCA9PT0gdGhpcy50cmlhbHMgLSAxO1xuICAgIH1cblxuICAgIC8qKkBkZXByZWNhdGVkKi9cbiAgICBoYXNaZXJvZXMoKSB7XG4gICAgICAgIHJldHVybiAhdXRpbC5ib29sKHRoaXMubm90ZXMpIHx8ICF1dGlsLmJvb2wodGhpcy50cmlhbHMpO1xuICAgIH1cblxuICAgIHZhbHVlc09rKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXV0aWwuYm9vbCh0aGlzLm5vdGVzKSB8fCAhdXRpbC5ib29sKHRoaXMudHJpYWxzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmh5dGhtKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuYm9vbCh0aGlzLnRlbXBvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1dGlsLmJvb2wodGhpcy50ZW1wbykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBMZXZlbE5ld0NvbGxlY3Rpb24ge1xuICAgIHJlYWRvbmx5IGN1cnJlbnQ6IExldmVsTmV3O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2xldmVsczogTGV2ZWxOZXdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGxldmVsczogSUxldmVsTmV3W10sIGN1cnJlbnRMZXZlbEluZGV4PzogbnVtYmVyLCBjdXJyZW50SW50ZXJuYWxUcmlhbEluZGV4PzogbnVtYmVyKSB7XG5cbiAgICAgICAgdGhpcy5fbGV2ZWxzID0gbGV2ZWxzLm1hcCgobGV2ZWwsIGluZGV4KSA9PiBuZXcgTGV2ZWxOZXcobGV2ZWwsIGluZGV4KSk7XG4gICAgICAgIGlmIChjdXJyZW50TGV2ZWxJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLl9sZXZlbHNbY3VycmVudExldmVsSW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50LmludGVybmFsVHJpYWxJbmRleCA9IGN1cnJlbnRJbnRlcm5hbFRyaWFsSW5kZXg7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldmVscy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0IHByZXZpb3VzKCk6IExldmVsTmV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMuY3VycmVudC5pbmRleCAtIDEpXG4gICAgfVxuXG4gICAgZ2V0KGk6IG51bWJlcik6IExldmVsTmV3IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldmVsc1tpXTtcbiAgICB9XG5cbiAgICBiYWRMZXZlbHMoKTogbnVtYmVyW10ge1xuICAgICAgICBjb25zdCBiYWRMZXZlbHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgW2ksIGxldmVsXSBvZiB1dGlsLmVudW1lcmF0ZSh0aGlzLl9sZXZlbHMpKSB7XG4gICAgICAgICAgICBpZiAoIWxldmVsLnZhbHVlc09rKCkpIHtcbiAgICAgICAgICAgICAgICBiYWRMZXZlbHMucHVzaChgJHtpLmh1bWFuKCl9IGxldmVsIGApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhZExldmVscztcbiAgICB9XG5cbiAgICAvKipAZGVwcmVjYXRlZCovXG4gICAgc29tZUhhdmVaZXJvZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZXZlbHMuc29tZShsZXZlbCA9PiBsZXZlbC5oYXNaZXJvZXMoKSk7XG4gICAgfVxuXG4gICAgc2xpY2VzQnlOb3RlcygpOiBMZXZlbE5ld0NvbGxlY3Rpb25bXSB7XG4gICAgICAgIGxldCBieU5vdGVzID0ge307XG4gICAgICAgIGZvciAobGV0IGxldmVsIG9mIHRoaXMuX2xldmVscykge1xuICAgICAgICAgICAgaWYgKGxldmVsLm5vdGVzIGluIGJ5Tm90ZXMpIHtcbiAgICAgICAgICAgICAgICBieU5vdGVzW2xldmVsLm5vdGVzXS5hZGRMZXZlbChsZXZlbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJ5Tm90ZXNbbGV2ZWwubm90ZXNdID0gbmV3IExldmVsTmV3Q29sbGVjdGlvbihbbGV2ZWxdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGJ5Tm90ZXMpO1xuICAgIH1cblxuICAgIGFkZExldmVsKGxldmVsOiBMZXZlbE5ldykge1xuICAgICAgICB0aGlzLl9sZXZlbHMucHVzaChsZXZlbCk7XG4gICAgfVxuXG4gICAgZ2V0TmV4dFRlbXBvT2ZUaGlzTm90ZXMoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5yaHl0aG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQudGVtcG87XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY3VycmVudC5pbmRleDsgaSA8IHRoaXMuX2xldmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbHZsID0gdGhpcy5fbGV2ZWxzW2ldO1xuICAgICAgICAgICAgaWYgKGx2bC5ub3RlcyAhPSB0aGlzLmN1cnJlbnQubm90ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICAgICAgfSAvLyB3ZW50IG92ZXIgYWxsIGxldmVsIHdpdGggc2FtZSBudW1iZXIgb2Ygbm90ZXMgYW5kIGRpZG4ndCBmaW5kIGFueXRoaW5nXG4gICAgICAgICAgICBpZiAobHZsLnRlbXBvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbHZsLnRlbXBvO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxMDA7XG4gICAgfVxuXG4gICAgaXNDdXJyZW50TGFzdExldmVsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50LmluZGV4ID09IHRoaXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBtYXhOb3RlcygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoLi4udGhpcy5fbGV2ZWxzLm1hcChsdmwgPT4gbHZsLm5vdGVzKSk7XG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxMZXZlbE5ldz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGV2ZWxzLnZhbHVlcygpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgY2xhc3MgTGV2ZWwge1xuICAgIG5vdGVzOiBhbnk7XG4gICAgcmh5dGhtOiBhbnk7XG4gICAgdGVtcG86IGFueTtcbiAgICB0cmlhbHM6IGFueTtcbiAgICBpbmRleDogYW55O1xuICAgIGludGVybmFsVHJpYWxJbmRleDogYW55O1xuXG5cbiAgICBjb25zdHJ1Y3RvcihsZXZlbDogVExldmVsLCBpbmRleDogbnVtYmVyLCBpbnRlcm5hbFRyaWFsSW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGluZGV4ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWxlcnQoXCJMZXZlbChsZXZlbCwgaW5kZXgsIGludGVybmFsVHJpYWxJbmRleCkgaW5kZXggaXMgdW5kZWZpbmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbm90ZXMsIHJoeXRobSwgdGVtcG8sIHRyaWFscyB9ID0gbGV2ZWw7XG4gICAgICAgIHRoaXMubm90ZXMgPSBub3RlcztcbiAgICAgICAgdGhpcy5yaHl0aG0gPSByaHl0aG07XG4gICAgICAgIHRoaXMudGVtcG8gPSB0ZW1wbztcbiAgICAgICAgdGhpcy50cmlhbHMgPSB0cmlhbHM7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFRyaWFsSW5kZXggPSBpbnRlcm5hbFRyaWFsSW5kZXg7XG4gICAgfVxuXG4gICAgaXNGaXJzdFRyaWFsKCkge1xuICAgICAgICBpZiAodGhpcy5pbnRlcm5hbFRyaWFsSW5kZXggPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhbGVydChcImludGVybmFsVHJpYWxJbmRleCBpcyB1bmRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxUcmlhbEluZGV4ID09IDA7XG4gICAgfVxuXG4gICAgaXNMYXN0VHJpYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVHJpYWxJbmRleCA9PSB0aGlzLnRyaWFscyAtIDE7XG4gICAgfVxuXG4gICAgaGFzWmVyb2VzKCkge1xuICAgICAgICByZXR1cm4gIXV0aWwuYm9vbCh0aGlzLm5vdGVzKSB8fCAhdXRpbC5ib29sKHRoaXMudHJpYWxzKTtcbiAgICB9XG5cbn1cblxuLyoqQGNsYXNzKi9cbmV4cG9ydCBjbGFzcyBMZXZlbHMge1xuICAgIGN1cnJlbnQ6IExldmVsO1xuICAgIHByaXZhdGUgX2xldmVsczogTGV2ZWxbXTtcblxuICAgIC8qKkBwYXJhbSB7VExldmVsW119IGxldmVsc1xuICAgICBAcGFyYW0ge251bWJlcj99IGN1cnJlbnRMZXZlbEluZGV4XG4gICAgIEBwYXJhbSB7bnVtYmVyP30gY3VycmVudEludGVybmFsVHJpYWxJbmRleCovXG4gICAgY29uc3RydWN0b3IobGV2ZWxzOiBUTGV2ZWxbXSwgY3VycmVudExldmVsSW5kZXg/OiBudW1iZXIsIGN1cnJlbnRJbnRlcm5hbFRyaWFsSW5kZXg/OiBudW1iZXIpIHtcblxuXG4gICAgICAgIHRoaXMuX2xldmVscyA9IGxldmVscy5tYXAoKGxldmVsLCBpbmRleCkgPT4gbmV3IExldmVsKGxldmVsLCBpbmRleCkpO1xuICAgICAgICBpZiAoY3VycmVudExldmVsSW5kZXggIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuX2xldmVsc1tjdXJyZW50TGV2ZWxJbmRleF07XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuaW50ZXJuYWxUcmlhbEluZGV4ID0gY3VycmVudEludGVybmFsVHJpYWxJbmRleDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldmVscy5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqQHJldHVybiB7TGV2ZWx9Ki9cbiAgICBnZXQoaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGV2ZWxzW2ldO1xuICAgIH1cblxuICAgIC8qKkByZXR1cm4ge2Jvb2xlYW59Ki9cbiAgICBzb21lSGF2ZVplcm9lcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldmVscy5zb21lKGxldmVsID0+IGxldmVsLmhhc1plcm9lcygpKTtcbiAgICB9XG5cbiAgICAvKipAcmV0dXJuIHtBcnJheTxMZXZlbHM+fSovXG4gICAgc2xpY2VzQnlOb3RlcygpIHtcbiAgICAgICAgbGV0IGJ5Tm90ZXMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgbGV2ZWwgb2YgdGhpcy5fbGV2ZWxzKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWwubm90ZXMgaW4gYnlOb3Rlcykge1xuICAgICAgICAgICAgICAgIGJ5Tm90ZXNbbGV2ZWwubm90ZXNdLmFkZExldmVsKGxldmVsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnlOb3Rlc1tsZXZlbC5ub3Rlc10gPSBuZXcgTGV2ZWxzKFtsZXZlbF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoYnlOb3Rlcyk7XG4gICAgfVxuXG4gICAgLyoqQHBhcmFtIHtMZXZlbH0gbGV2ZWwqL1xuICAgIGFkZExldmVsKGxldmVsKSB7XG4gICAgICAgIHRoaXMuX2xldmVscy5wdXNoKGxldmVsKTtcbiAgICB9XG5cbiAgICAvKipAcmV0dXJuIHtudW1iZXJ9Ki9cbiAgICBnZXROZXh0VGVtcG9PZlRoaXNOb3RlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5yaHl0aG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQudGVtcG87XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY3VycmVudC5pbmRleDsgaSA8IHRoaXMuX2xldmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbHZsID0gdGhpcy5fbGV2ZWxzW2ldO1xuICAgICAgICAgICAgaWYgKGx2bC5ub3RlcyAhPSB0aGlzLmN1cnJlbnQubm90ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICAgICAgfSAvLyB3ZW50IG92ZXIgYWxsIGxldmVsIHdpdGggc2FtZSBudW1iZXIgb2Ygbm90ZXMgYW5kIGRpZG4ndCBmaW5kIGFueXRoaW5nXG4gICAgICAgICAgICBpZiAobHZsLnRlbXBvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbHZsLnRlbXBvO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxMDA7XG4gICAgfVxuXG4gICAgaXNDdXJyZW50TGFzdExldmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50LmluZGV4ID09IHRoaXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICAvKipAcmV0dXJuIHtudW1iZXJ9Ki9cbiAgICBtYXhOb3RlcygpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KC4uLnRoaXMuX2xldmVscy5tYXAobHZsID0+IGx2bC5ub3RlcykpO1xuICAgIH1cblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGV2ZWxzLnZhbHVlcygpO1xuICAgIH1cbn0iXX0=